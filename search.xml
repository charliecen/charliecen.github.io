<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Lumen实现用户注册登录认证]]></title>
      <url>http://yoursite.com/2017/02/21/Lumen-user-register-and-login-auth/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lumen是一个基于Laravel的微框架，号称是以速度为生。截用Lumen官网的一段，号称是比silex和slim还要快。</p>
<p>本文将用Lumen来实现一个完整的用户注册、登录及获取用户信息的API。</p>
<p>Lumen官方网站：<a href="https://lumen.laravel.com/" target="_blank" rel="external">https://lumen.laravel.com/</a><br>Lumen中文网站：<a href="http://lumen.laravel-china.org/" target="_blank" rel="external">http://lumen.laravel-china.org/</a></p>
<h3 id="一-安装"><a href="#一-安装" class="headerlink" title="一 安装"></a>一 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project --prefer-dist laravel/lumen lumen</div></pre></td></tr></table></figure>
<h3 id="二-数据库配置"><a href="#二-数据库配置" class="headerlink" title="二 数据库配置"></a>二 数据库配置</h3><p>跟全栈框架 Laravel 框架不一样的是，所有的 Lumen 框架的配置信息都存储在 .env 文件中。一旦 Lumen 成功安装，你需要 配置本地环境,如果没有在目录下新建.env文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">APP_ENV=local</div><div class="line">APP_DEBUG=true</div><div class="line">APP_KEY=SomeRandomString!!!</div><div class="line">DB_CONNECTION=mysql</div><div class="line">DB_HOST=localhost</div><div class="line">DB_PORT=3306</div><div class="line">DB_DATABASE=lumen</div><div class="line">DB_USERNAME=root</div><div class="line">DB_PASSWORD=charlie</div><div class="line">CACHE_DRIVER=memcached</div><div class="line">QUEUE_DRIVER=sync</div><div class="line">APP_TIMEZONE=PRC</div><div class="line">DB_TIMEZONE=+08:00</div></pre></td></tr></table></figure></p>
<h3 id="三-配置迁移数据库"><a href="#三-配置迁移数据库" class="headerlink" title="三 配置迁移数据库"></a>三 配置迁移数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_users_table --create=users</div></pre></td></tr></table></figure>
<p>执行这条命令后，会在项目目录lumen/database/migrations/ 目录下生成一个php文件，这个文件主要包括两个函数，在up()函数中根据你的需求定义数据库字段。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsersTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Run the migrations.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">            $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'username'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'password'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'email'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'api_token'</span>, <span class="number">60</span>)-&gt;unique();</div><div class="line">            $table-&gt;timestamps();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Reverse the migrations.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Schema::dropIfExists(<span class="string">'users'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行命令，创建数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure></p>
<p>数据库会生成一张users表<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-1.png" alt=""></p>
<h3 id="四-创建用户数据模型"><a href="#四-创建用户数据模型" class="headerlink" title="四 创建用户数据模型"></a>四 创建用户数据模型</h3><p>如果你的项目文件夹lumen\app\文件夹下没有User.php文件，那么新建一个User.php文件，文件内容如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Auth</span>\<span class="title">Authorizable</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>, <span class="title">AuthorizableContract</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The attributes that are mass assignable.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@var</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $fillable = [</div><div class="line">        <span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'api_token'</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The attributes excluded from the model's JSON form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@var</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $hidden = [</div><div class="line">        <span class="string">'password'</span>,</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="五-路由定义"><a href="#五-路由定义" class="headerlink" title="五 路由定义"></a>五 路由定义</h3><p>定义三个路由，实现用户登录，注册及获取用户信息<br>|序号|路由类型|路由路径|路由控制器|<br>|-|-|-|-|<br>|1|POST|user/login|UserController@login|<br>|2|POST|user/register|UserController@register|<br>|3|GET|user/info|UserController@info|</p>
<p>根据上述表的内容，在routes/web.php中定义路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$app-&gt;get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $app-&gt;version();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//登录注册</span></div><div class="line">$app-&gt;post(<span class="string">'user/login'</span>, <span class="string">'UserController@login'</span>);</div><div class="line">$app-&gt;post(<span class="string">'user/register'</span>, <span class="string">'UserController@register'</span>);</div><div class="line">$app-&gt;get(<span class="string">'user/info'</span>, [</div><div class="line">    <span class="string">'middleware'</span>    =&gt;  <span class="string">'authToken'</span>,</div><div class="line">    <span class="string">'uses'</span>  =&gt;  <span class="string">'UserController@info'</span></div><div class="line">]);</div></pre></td></tr></table></figure></p>
<h3 id="六-Controller逻辑"><a href="#六-Controller逻辑" class="headerlink" title="六 Controller逻辑"></a>六 Controller逻辑</h3><p>在Lumen\app\Http\Controllers\文件夹下新建用户控制器UserController.php，实现用户注册、登录和用户信息获取功能<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $salt;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;salt = <span class="string">"userloginregister"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//登录</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($request-&gt;has(<span class="string">'username'</span>) &amp;&amp; $request-&gt;has(<span class="string">'password'</span>))&#123;</div><div class="line">            $user = User::where(<span class="string">'username'</span>, <span class="string">'='</span>, $request-&gt;input(<span class="string">'username'</span>))-&gt;where(<span class="string">'password'</span>, <span class="string">'='</span>, sha1(<span class="keyword">$this</span>-&gt;salt.$request-&gt;input(<span class="string">'password'</span>)))-&gt;first();</div><div class="line">            <span class="keyword">if</span>($user)&#123;</div><div class="line">                $token = str_random(<span class="number">60</span>);</div><div class="line">                $user-&gt;api_token = $token;</div><div class="line">                $user-&gt;save();</div><div class="line">                <span class="keyword">return</span> $user-&gt;api_token;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户名或密码不正确,登录失败'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'登录信息不完整,请输入用户名和密码'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//注册</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($request-&gt;has(<span class="string">'username'</span>) &amp;&amp; $request-&gt;has(<span class="string">'password'</span>) &amp;&amp; $request-&gt;has(<span class="string">'email'</span>))&#123;</div><div class="line">            $user = <span class="keyword">new</span> User;</div><div class="line">            $user-&gt;username = $request-&gt;input(<span class="string">'username'</span>);</div><div class="line">            $user-&gt;password = sha1(<span class="keyword">$this</span>-&gt;salt.$request-&gt;input(<span class="string">'password'</span>));</div><div class="line">            $user-&gt;email = $request-&gt;input(<span class="string">'email'</span>);</div><div class="line">            $user-&gt;api_token = str_random(<span class="number">60</span>);</div><div class="line">            <span class="keyword">if</span>($user-&gt;save())&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户注册成功!'</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户注册失败!'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'请输入完整用户信息!'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//信息</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Auth::user();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="七-认证服务"><a href="#七-认证服务" class="headerlink" title="七 认证服务"></a>七 认证服务</h3><p>必须要通过token验证才能获取用户信息。在Lumen\app\Http\Providers\AuthServiceProvider.php中定义验证服务。我们使用header包含token的形式来验证。修改Lumen\app\Http\Providers\AuthServiceProvider.php文件代码。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Gate</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Register any application services.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Boot the authentication services for the application.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Here you may define how you wish users to be authenticated for your Lumen</span></div><div class="line">        <span class="comment">// application. The callback which receives the incoming request instance</span></div><div class="line">        <span class="comment">// should return either a User instance or null. You're free to obtain</span></div><div class="line">        <span class="comment">// the User instance via an API token or any other method necessary.</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">'auth'</span>]-&gt;viaRequest(<span class="string">'api'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> ($request-&gt;header(<span class="string">'api_token'</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> User::where(<span class="string">'api_token'</span>, <span class="string">'='</span>, $request-&gt;header(<span class="string">'api_token'</span>))-&gt;first();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">### 八 定义认证中间件</span></div><div class="line">在Lumen\app\Http\Middleware\文件夹下定义认证路由中间件AuthToken.php，就是之前在路由中定义的”authToken”。</div><div class="line">```php</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthToken</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(Auth::check())&#123;</div><div class="line">            <span class="keyword">return</span> $next($request);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            abort(<span class="number">401</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="九-启用配置信息"><a href="#九-启用配置信息" class="headerlink" title="九 启用配置信息"></a>九 启用配置信息</h3><p>在lumen\app\bootstrap\app.php中取消注释<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//让数据库信息和认证服务修改生效</span></div><div class="line">$app-&gt;withFacades();</div><div class="line"></div><div class="line">$app-&gt;withEloquent();</div><div class="line"></div><div class="line"><span class="comment">//认证中间件</span></div><div class="line">$app-&gt;routeMiddleware([</div><div class="line">     <span class="string">'authToken'</span> =&gt; App\Http\Middleware\AuthToken::class</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">//开启注册提供者</span></div><div class="line">$app-&gt;register(App\Providers\AppServiceProvider::class);</div><div class="line">$app-&gt;register(App\Providers\AuthServiceProvider::class);</div></pre></td></tr></table></figure></p>
<h3 id="十-启动服务，测试"><a href="#十-启动服务，测试" class="headerlink" title="十 启动服务，测试"></a>十 启动服务，测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S localhost:8000</div></pre></td></tr></table></figure>
<p>1.用户注册<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-2.png" alt="user-register"></p>
<p>查看数据库<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-3.png" alt="show-user"></p>
<p>2.用户登录<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-4.png" alt="user-login"></p>
<p>登录后会更新数据库的api_token<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-5.png" alt="lumen-5"></p>
<p>3.获取用户信息<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-6.png" alt="lumen-6"></p>
<hr>
<h3 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h3><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Symfony\Component\Debug\Exception\FatalErrorException]</div><div class="line">  Class &apos;Memcached&apos; not found</div></pre></td></tr></table></figure></p>
<p>解决办法，安装memcached 和php扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install memcached</div><div class="line">brew install php56-memcached</div><div class="line">启动memcached</div><div class="line">memcached -D</div></pre></td></tr></table></figure></p>
<p>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP Fatal error:  Call to a member function connection() on null in /Users/03315/www/lumen/vendor/illuminate/database/Eloquent/Model.php on line 1013</div></pre></td></tr></table></figure></p>
<p>解决办法，需要开启，路径<code>app/bootstrap/app.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$app-&gt;withEloquent();</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[thinkphp数据缓存]]></title>
      <url>http://yoursite.com/2017/02/04/thinkphp-e6-95-b0-e6-8d-ae-e7-bc-93-e5-ad-98/</url>
      <content type="html"><![CDATA[<p>由于第一次打开页面会很慢，所以需要做个数据缓存。正好thinkphp框架有封装好的方法，这里说下如何操作的；</p>
<p>1.首先介绍数据缓存的用法</p>
<p><pre class="lang:php decode:true ">// 缓存初始化<br>S(array(‘type’=&gt;’xcache’,’expire’=&gt;60));</pre><br>缓存初始化可以支持的参数根据不同的缓存方式有所区别，常用的参数是：</p>
<p><table></table></p>
<p><thead></thead></p>
<p><tr></tr></p>
<p><th>参数</th></p>
<p><th>描述</th><br><br></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>expire</td></p>
<p><td>缓存有效期（时间为秒）</td><br></p>
<p><tr></tr></p>
<p><td>prefix</td></p>
<p><td>缓存标识前缀</td><br></p>
<p><tr></tr></p>
<p><td>type</td></p>
<p><td>缓存类型</td><br><br><br><br>系统目前已经支持的缓存类型包括：<code>Apachenote、Apc、Db、Eaccelerator、File、Memcache、Redis、Shmop、Sqlite、Wincache和Xcache</code>。</p>
<p>如果S方法不传入type参数初始化的话，则读取配置文件中设置的<code>DATA_CACHE_TYPE</code>参数值作为默认类型。同样的道理，prefix参数如果没有传入会读取配置文件的<code>DATA_CACHE_PREFIX</code>参数值，expire参数没有传入则读取<code>DATA_CACHE_TIME</code>配置值作为默认。</p>
<p>2.缓存设置</p>
<p><pre class="lang:php decode:true ">// 设置缓存<br>S(‘name’,$value);<br>// 缓存数据300秒<br>S(‘name’,$value,300);<br>// 采用文件方式缓存数据300秒<br>S(‘name’,$value,array(‘type’=&gt;’file’,’expire’=&gt;300));</pre><br>3.缓存读取</p>
<p><pre class="lang:php decode:true ">// 读取缓存<br>$value = S(‘name’);</pre><br>4.缓存删除</p>
<p><pre class="lang:sh decode:true ">// 删除缓存<br>S(‘name’,null);</pre><br>5.对象方式缓存</p>
<p><pre class="lang:php decode:true ">// 初始化缓存<br>$cache = S(array(‘type’=&gt;’xcache’,’prefix’=&gt;’think’,’expire’=&gt;600));<br>$cache-&gt;name = ‘value’; // 设置缓存<br>$value = $cache-&gt;name; // 获取缓存<br>unset($cache-&gt;name); // 删除缓存</pre><br>6.缓存队列</p>
<p><pre class="lang:php decode:true ">//设置了length参数后，系统只会缓存最近的100条缓存数据。<br>S(array(‘type’=&gt;’xcache’,’length’=&gt;100,’expire’=&gt;60));</pre><br>7.具体操作，我的代码如下</p>
<p><pre class="lang:php decode:true ">  public function test()<br>    {<br>        $cacheConfig = array(<br>            ‘type’ =&gt; ‘file’,<br>            ‘expire’ =&gt; 60,<br>            ‘prefix’ =&gt; ‘order_db<em>cache</em>‘<br>        );<br>        if(!$num = S(‘test’,’’,$cacheConfig)){<br>            sleep(10);<br>            $num = 11;<br>            S(‘test’,$num, $cacheConfig);<br>        }<br>        echo $num;</pre></p>
<pre><code>}&lt;/pre&gt;
</code></pre><p>8.访问该方法,生成缓存文件</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2017/02/QQ20170204-0.png" alt=""></p>
<p>第一次访问时间</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2017/02/QQ20170204-1.png" alt=""></p>
<p>第二次访问时间</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2017/02/QQ20170204-2.png" alt=""></p>
<p>说明已经使用上缓存了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongo-3.2主从配置]]></title>
      <url>http://yoursite.com/2017/01/04/mongo-3-2-replication/</url>
      <content type="html"><![CDATA[<div>mongodb的复制使用的oplog,类似于mysql复制的binlog,不同的是oplog是保存在local数据库中的.</div><br><div>需要合理的设置oplog的大小,如果此大小没有设置那么mongodb将会使用可用空间的5%来存放oplog.官方建议64位系统至少分配1G大小.</div><br><div>当slave端落后太多master端的时候,复制会终止,此时需要管理员手工来重启mongodb然后使用resync来重新同步.</div><br><div>此外你可以设置autoresync参数,当复制终止10秒后mongodb会自动重启复制,slave端会每隔10分钟自动重新同步一次.</div><br><div><strong>注意官方现在强烈不建议使用master-slave复制模式,建议使用replica sets复制.</strong></div>

<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>这里介绍的mongodb的主从复制,并不是复制集replica sets,复制的参数如下:</p>
<pre class="lang:sh decode:true ">Replication options:
  --oplogSize arg                       操作日志大小,单位M

Master/slave options (old; use replica sets instead):
  --master                              指定角色为master mode
  --slave                               指定角色为slave mode
  --source arg                          当角色为slave的时候使用,格式为:&lt;server:port&gt;
  --only arg                            当角色为slave的时候使用,指定单独同步的数据库,默认为同步所有数据库.
  --slavedelay arg                      指定一个应用日志的延时,单位秒
  --autoresync</pre>

<h3 id="创建mongo仓库"><a href="#创建mongo仓库" class="headerlink" title="创建mongo仓库"></a>创建mongo仓库</h3><pre class="lang:sh decode:true ">vim /etc/yum.repos.d/mongodb-org-3.2.repo
[mongodb-org-3.2]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc</pre>

<h3 id="主从服务器配置"><a href="#主从服务器配置" class="headerlink" title="主从服务器配置"></a>主从服务器配置</h3><pre class="lang:sh decode:true">#安装
yum install -y mongodb-org
#修改配置
egrep -v '^$|^#' /etc/mongod.conf
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
storage:
  dbPath: /var/lib/mongo
  journal:
    enabled: true
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile
net:
  port: 27017
  bindIp: 0.0.0.0  # Listen to local interface only, comment to listen on all interfaces.
security:
  authorization: enabled
</pre>

<h3 id="配置keyFile文件"><a href="#配置keyFile文件" class="headerlink" title="配置keyFile文件"></a>配置keyFile文件</h3><p>（<a href="https://docs.mongodb.com/v3.2/tutorial/enforce-keyfile-access-control-in-existing-replica-set/" target="_blank" rel="external">官网介绍</a>）密钥文件的内容作为共享密码的成员复制集。密钥文件的内容必须相同副本集的所有成员。你可以使用任何方法生成一个密钥文件选择。密钥文件的内容必须是6 - 1024个字符长。</p>
<pre class="lang:sh decode:true ">openssl rand -base64 512 &gt;&gt; /var/lib/mongo/mongo.key
chmod 600 /var/lib/mongo/mongo.key</pre>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class="lang:sh decode:true">#主服务器启动
mongod --master -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key
#从服务器启动
mongod --slave --source master_ip:27017 -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key</pre>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>主服务器创建账号</p>
<pre class="lang:sh decode:true ">#!/bin/bash
mongo_connect="mongo 127.0.0.1/admin"  
cmd_use_admin="db = db.getSiblingDB('admin');"  
cmd_create_user="db.createUser({\"user\":\"sa\", \"pwd\":\"123456\", \"roles\":[\"root\"]});"  
echo $cmd_use_admin &gt; dbcmd.js  
echo $cmd_create_user &gt;&gt; dbcmd.js  
execute="$mongo_connect dbcmd.js"  
echo "#!/bin/sh" &gt; createDBUser.sh  
echo $execute &gt;&gt; createDBUser.sh  
sh createDBUser.sh &amp;&amp; rm -f createDBUser.sh</pre>
主库插入一条数据
<pre class="lang:sh decode:true ">use test
db.xxoo.save({xx:00});</pre>
从库查看是否同步
<pre class="lang:sh decode:true ">use test
db.test.find()</pre>

<h3 id="主库宕机如何将从库切为主库"><a href="#主库宕机如何将从库切为主库" class="headerlink" title="主库宕机如何将从库切为主库"></a>主库宕机如何将从库切为主库</h3><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><ul>
<li>停止从库<br><code>kill -2 PID</code></li>
<li>删除从数据目录中的 local.<em><br>`rm -rf /data/mongodb/data/db/local.</em>`</li>
<li>以 –master 模式启动从库 (注意修改原有端口)<br><code>mongod --master -f /etc/mongod.master.conf</code></li>
</ul>
<h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><ul>
<li>备份从库</li>
<li>重建主库，导入新数据<br>参考：<a href="https://docs.mongodb.com/v3.2/replication/" target="_blank" rel="external">https://docs.mongodb.com/v3.2/replication/</a></li>
</ul>
<p><a href="https://blog.imdst.com/mongodb-yi-di-zhu-cong-tong-bu-pei-zhi/" target="_blank" rel="external">https://blog.imdst.com/mongodb-yi-di-zhu-cong-tong-bu-pei-zhi/</a></p>
<p><a href="http://blog.csdn.net/su377486/article/details/51599255" target="_blank" rel="external">http://blog.csdn.net/su377486/article/details/51599255</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql查询24小时内无重复的记录]]></title>
      <url>http://yoursite.com/2016/12/29/mysql-query-repeat-recodes-in-hours/</url>
      <content type="html"><![CDATA[<p>需求：</p>
<p><table width="445"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td width="445">一次性解决问题率=一次解决的对话量/接入量<br>一次解决的对话量：客户在接入人工客服对话结束后24小时（暂定）内未再次请求人工服务的对话</td><br><br><br><br>由于条件还要加上日期间隔，所以从mysql查询结果到PHP处理。</p>
<p>例如：每隔2天内，用户请求对话结束时间到下次发起时间的间隔超过24小时，即为一次性解决对话量。然后再除以接入量，就是一次性解决问题率。</p>
<p>首先给出sql语句，间隔查询参考<a href="http://www.cenhq.com/2016/12/06/mysql-select-date-interval-custom-date/" target="_blank" rel="external">mysql日期间隔查询</a></p>
<p><pre class="lang:mysql decode:true ">– 间隔两天的记录<br>select<br>  floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId ,<br>  createUserId,<br>  createTime,<br>  endTime<br>FROM <code>think_kf_chat_im_group</code><br>  WHERE <code>endTime</code> &lt;&gt; 0<br>  AND <code>createTime</code> BETWEEN 1470022740 AND 1470886740<br>  and kfUserId &lt;&gt; 0<br>order BY sortId,createUserId;</pre><br>结果如下</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-0.png" alt=""></p>
<p>下面把这些记录到php通过数组来处理</p>
<p><pre class="lang:php decode:true">/**</pre></p>
<pre><code> * 一次性问题解决率,用户对话结束后,24小时内不在有新的对话出现
 * @param $array array
 * return array
 */
private function oneTimesQuesRate($array){
    $len = count($array);
    $arr = [];
    $sortId = [];
    $sortArr = [];
    $id = [];
    $count = [];
    $total = [];

    //遍历获取同一个sortId
    foreach($array as $v){
        $sortId[] = $v[&apos;sortid&apos;];
    }

    //取唯一sortId
    $unique_sortId = array_unique($sortId);

    //循环取出值
    foreach($unique_sortId as $v){
        $id[] = $v;
    }

    //循环取出间隔自定义时间内和24小时内不在发起的对话记录
    for($i = 0; $i &amp;lt; $len; $i++){
        for($j = $i+1; $j &amp;lt; $len; $j++){
            foreach($id as $v){
                if($v == $array[$i][&apos;sortid&apos;]){
                    if($array[$i][&apos;createuserid&apos;] == $array[$j][&apos;createuserid&apos;]){
                        if($array[$i][&apos;endtime&apos;] + 86400 &amp;lt;= $array[$j][&apos;createtime&apos;]){
                            // $num++;
                            $sortArr[] = $v;

                        }
                    }
                }
            }
            //每次对比后跳出循环
            break;
        }
        //获取每条的用户ID
        $arr[$array[$i][&apos;sortid&apos;]][] = $array[$i][&apos;createuserid&apos;];
    }
    //循环每个sortId,去重获取总数
    foreach($arr as $k=&amp;gt;$v){
        $count[$k] = count(array_unique($v));
    }
    //取相同值得总数
    $num = array_count_values($sortArr);

    //合并两个数组的值
    foreach($count as $k=&amp;gt;$v){
        foreach($num as $k1=&amp;gt;$v1){
            if($k == $k1){
                $total[$k] = $v + $v1;
            }else{
                $total[$k] = $v;
            }
        }
    }
    return $total;
}&lt;/pre&gt;
</code></pre><p>返回的结果如下图：<a href="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-1.png" target="_blank" rel="external"><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-1-300x138.png" alt="qq20161228-1"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>然后用这个结果来除以接入量，也就是下面的sql语句，当然这个sql查询到的结果也需要通过php来处理。也可以把上面的结果插入到数据库的临时表，通过sql来相除。多种方式可以实现。</p>
<p><pre class="lang:mysql decode:true ">– 获取每隔2天的接入量<br>SELECT<br>  floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId,<br>  min(date_format(from_unixtime(createTime),’%y-%m-%d’)) as mtime,<br>  count(kfUserId) as c<br>FROM <code>think_kf_chat_im_group</code><br>  WHERE <code>endTime</code> &lt;&gt; 0<br>  AND <code>createTime</code> BETWEEN 1470022740<br>  AND 1470886740<br>  and kfUserId &lt;&gt; 0<br>GROUP BY sortId;</pre><br>结果如下：</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-2.png" alt=""></p>
<p>用php来处理刚查询出的数据<a href="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-2.png" target="_blank" rel="external">
</a></p>
<p><pre class="lang:php decode:true ">    /**</pre></p>
<pre><code> * @param $arr1 array 总接入量
 * @param $arr array 处理过的接入量
 * @return array 返回百分比
 */
private function processData($arr1,$arr){
    $result = [];
    foreach($arr1 as $k1=&amp;gt;$v1){
        foreach($arr as $k=&amp;gt;$v){
            if($v1[&apos;sortid&apos;] == $k){
                $result[$k1][&apos;mtime&apos;] = $v1[&apos;mtime&apos;];
                $result[$k1][&apos;c&apos;] = floor($v/$v1[&apos;c&apos;]*100);
            }
        }
    }
    return $result;
}&lt;/pre&gt;
</code></pre><p>通过highcharts绘画出图形</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161228-3.png" alt=""></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax作用域范围无法获取返回值]]></title>
      <url>http://yoursite.com/2016/12/16/ajax-unable-to-get-return-value/</url>
      <content type="html"><![CDATA[<p>需求：判断title的值是否在mongo库里存在，如果不存在就继续，存在则返回false。</p>
<p>代码如下：</p>
<p><pre class="lang:js decode:true">//检测标题是否存在<br>            var result = true;<br>            $.ajax({<br>                type: ‘POST’,<br>                url: ‘<strong>APP</strong>/Home/Custorm/chkTitle’,<br>                data: {‘title’:$(‘#title’).val()},<br>                success: function(data){<br>                    if(data.count &gt;= 1){<br>                        alert(‘标题已存在,请重新输入!’);<br>                        $(‘#title’).select();<br>                        result =  false;<br>                    }<br>                },<br>                error: function(e){<br>                    console.log(e);<br>                }<br>            });<br>            return result;</pre><br>上述代码是有问题的，返回的result一直true；</p>
<p>后查到原因，是因为ajax默认是异步传输，也就是说，ajax并没有等待 success:function(data) 回调函数执行完，就已经向下执行了。于是 result的值永远只会等于其初始化的值，也就是true.</p>
<p>解决办法， 设置为同步传输。</p>
<p>//默认 async: true</p>
<p>//同步 async: false</p>
<p>参考：<a href="http://blog.csdn.net/zxstone/article/details/7297284" target="_blank" rel="external">http://blog.csdn.net/zxstone/article/details/7297284</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[thinkphp页面显示权限控制]]></title>
      <url>http://yoursite.com/2016/12/08/thinkphp-page-access-control/</url>
      <content type="html"><![CDATA[<p>需求：报表生成后，需要发布报表浏览页，在发布的同时，需要设置权限；创建者有浏览该报表权限，所属部门有浏览权限，员工级别有浏览权限，只要包含其中就可；</p>
<p>如图所示：</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161208-0.png" alt=""></p>
<p>用户信息在session里保存，所以当创建报表是，获取用户信息，当发布报表时，写入用户信息和用户设置的权限到mongo库里</p>
<p>下面是显示的操作方法</p>
<p><pre class="lang:php decode:true ">//获取用户名,只显示当前用户的报表<br>$info = $_SESSION[‘info’][‘data’];<br>$map[‘user’] = $info[‘user_name’];<br>$map = $this-&gt;getAuthInfo($map);<br>$where[‘_complex’] = array(‘_logic’=&gt;”or”, array(‘user’=&gt;$map[‘user’]), array(‘dept’=&gt;$map[‘dept’]),array(‘level’=&gt;$map[‘level’]));<br>$data = $model-&gt;order(‘ym desc’)-&gt;where($where)-&gt;limit($Page-&gt;firstRow.’,’.$Page-&gt;listRows)-&gt;select();</pre></p>
<p><pre class="lang:php decode:true ">private function getAuthInfo($map)<br>    //获取当前用户的部门和级别<br>        $info = $_SESSION[‘title’];<br>        //判断用户所属部门<br>        if($info[‘department’] == ‘技术服务部’)<br>            $map[‘dept’] = ‘jw’;<br>        elseif ($info[‘department’] == ‘手游服务部’)<br>            $map[‘dept’] = ‘sy’;<br>        elseif ($info[‘department’] == ‘端游服务部’)<br>            $map[‘dept’] = ‘dy’;<br>        elseif ($info[‘department’] == ‘监控服务部’)<br>            $map[‘dept’] = ‘jk’;<br>        else<br>            $map[‘dept’] = ‘all’;</pre></p>
<pre><code>    //判断用户的级别
    if($info[&apos;powerTitle&apos;] == &apos;员工&apos;)
        $map[&apos;level&apos;] = &apos;staff&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;组长&apos;)
        $map[&apos;level&apos;] = &apos;leader&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;主管&apos;)
        $map[&apos;level&apos;] = &apos;competent&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;经理&apos;)
        $map[&apos;level&apos;] = &apos;manager&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;总监&apos;)
        $map[&apos;level&apos;] = &apos;director&apos;;

    return $map;
}&lt;/pre&gt;
</code></pre><p>显示效果如下：</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161208-1.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql查询日期间隔自定义日期]]></title>
      <url>http://yoursite.com/2016/12/06/mysql-select-date-interval-custom-date/</url>
      <content type="html"><![CDATA[<p>需求：由于查询日期范围内数据，需要定义日期范围内数据的单位，比如从2016年11月1日到2016年12月10日，间隔为5天，也就是11月1日，11月6日，11月11日。。。</p>
<p>这里要用到mysql函数，如下：</p>
<p><pre class="lang:mysql decode:true ">DELIMITER $$<br>create function getTimeSortId(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10))<br>returns int(10)<br>begin<br>declare sortId int;<br>set sortId = 0;<br>if timetype = “day” then<br>    set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );<br>end if;<br>if timetype = “week” then<br>    set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);<br>end if;<br>if timetype = “month” then<br>    set sortId = floor((splitNum -  ( month(startTime) + year(startTime) <em> 12) % splitNum + ( month(usetime) + year(usetime) </em> 12) )/splitNum);<br>end if;<br>return sortId;<br>end $$<br>DELIMITER ;<br></pre><br>解释下函数内容：</p>
<p>getTimeSortId为函数，timetype : 日期类型，startTime ： 开始时间，usetime : 字段时间，splitNum : 间隔数；</p>
<p>如果传递的参数为天，间隔数 - 转化为天的开始时间 % 间隔数 + 转化为天的字段时间 / 间隔数 = 排序ID</p>
<p>下面周跟月就具体介绍了；</p>
<p>具体运行如下：</p>
<p><pre class="lang:mysql decode:true">select<br>  getTimeSortId(‘day’,from_unixtime(1470109260,’%y-%m-%d’),from_unixtime(createTime,’%y-%m-%d’),3) as sortId,<br>  min(from_unixtime(createTime,’%y-%m-%d’)) as mtime,<br>  count(*) from think_kf_chat_im_group<br>where createTime BETWEEN 1470109260 AND 1472442060<br>group by sortId;</pre><br><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161206-0.png" alt=""></p>
<p>到数据库中运行，查看生成的语法</p>
<p><pre class="lang:mysql decode:true ">CREATE DEFINER=<code>root</code>@<code>localhost</code> FUNCTION <code>getTimeSortId</code>(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10)) RETURNS int(10)<br>begin<br>declare sortId int;<br>declare totalDay int;<br>declare totalMonth int;<br>declare totalYear int;<br>set sortId = 0;<br>if timetype = “day” then<br>    set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );<br>end if;<br>if timetype = “week” then<br>    set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);<br>end if;<br>if timetype = “month” then<br>    set sortId = floor((splitNum -  ( month(startTime) + year(startTime) <em> 12) % splitNum + ( month(usetime) + year(usetime) </em> 12) )/splitNum);<br>end if;<br>return sortId;<br>end;</pre><br>如果不是root用户的话，会有权限问题；</p>
<p>我这里数据库有的不是root用户，所以要把这个函数放到php里定义成一个方法，然后调用生成sql语句来执行；</p>
<p><pre class="lang:php decode:true ">/**</pre></p>
<pre><code> * @param type day week month
 * @param startTime 开始时间,必须是时间戳
 * @param key 时间字段
 * @param asName 生成的ID
 * @param isTimestamp key是否为时间戳
 * @param echo $this-&amp;gt;getSortId(&quot;week&quot;, 1477929600, &quot;intitime&quot;, 2, &quot;sortId&quot;, false);
 */
protected function getSortId($type, $startTime, $key, $splitNum, $asName = &quot;sortId&quot;, $isTimestamp = false)
{
    if ($isTimestamp) {
        $key = &quot;FROM_UNIXTIME(&quot; . $key . &quot;)&quot;;
    }

    $startTime = &quot;FROM_UNIXTIME(&quot; . $startTime . &quot;)&quot;;

    if ($type == &quot;day&quot;) {
        $sql = &quot;floor( (&quot; . $splitNum . &quot; - to_days(&quot; . $startTime . &quot;) % &quot; . $splitNum . &quot; + to_days(&quot; . $key . &quot;) )/&quot; . $splitNum . &quot; ) as &quot; . $asName . &quot; &quot;;
    } else if ($type == &quot;week&quot;) {
        $sql = &quot;floor((&quot; . $splitNum . &quot; - floor((TO_DAYS(&quot; . $startTime . &quot;) + 5 )/7) % &quot; . $splitNum . &quot; + floor((TO_DAYS(&quot; . $key . &quot;) + 5 )/7) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;;
    } else if ($type == &quot;month&quot;) {
        $sql = &quot;floor((&quot; . $splitNum . &quot; -  ( month(&quot; . $startTime . &quot;) + year(&apos;&quot; . $startTime . &quot;&apos;) * 12) % &quot; . $splitNum . &quot; + ( month(&quot; . $key . &quot;) + year(&apos;&quot; . $key . &quot;&apos;) * 12) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;;
    } else {
        $sql = &quot;(0) as &quot; . $asName . &quot; &quot;;
    }
    return $sql;
}&lt;/pre&gt;
</code></pre><p>调用次方法来生成field</p>
<p><pre class="lang:php decode:true ">/**</pre></p>
<pre><code> * 根据日期间隔统计数据
 * @param $dateFormat int 间隔数字
 * @param $dateUtil string 间隔单位,如:天,周,月,年
 * @param $sTime int | datetime 开始时间
 * @param $dateField string 日期字段名
 * @param $opertion string 统计数量
 * @param $groupType string 日期类型
 * echo $this-&amp;gt;setIntervalTime(3,&apos;day&apos;,1477929600,&apos;createTime&apos;,&apos;count(*)&apos;,&apos;day&apos;);
 */
private function setIntervalTime($dateFormat,$dateUtil,$sTime,$dateField,$opertion,$groupType,$isTimestamp = true)
{
    if(is_numeric($dateFormat) &amp;amp;&amp;amp; is_string($dateUtil)){
        if(!is_int($sTime)){
            $sTime =  strtotime($sTime);
        }
        $field = $this-&amp;gt;getSortId($dateUtil,$sTime,$dateField,$dateFormat,&quot;sortId&quot;,$isTimestamp) .
            &quot;,min(date_format(&quot; .
                ($isTimestamp ? &quot;from_unixtime(&quot; . $dateField . &quot;)&quot; : $dateField).
            &quot;,&apos;&quot;.$this-&amp;gt;getGroupFormat($groupType).&quot;&apos;)) as mtime,&quot;.
            $opertion.&quot; as c&quot;;
    }else{
        $this-&amp;gt;error(&apos;你输入的日期单位或日期格式不正确&apos;);
        exit;
    }
    return $field;
}&lt;/pre&gt;
</code></pre><p>具体调用如下：</p>
<p><pre class="lang:php decode:true ">$field = $this-&gt;setIntervalTime($dateFormat,$dateUnit,$sTime,’createTime’,’count(*)’,$groupType);<br>$where[‘createTime’] = array(‘between’,array($sTime,$eTime));<br>$model-&gt;field($field)-&gt;where($where)-&gt;group(‘sortId’)-&gt;select();</pre><br>获取的数据到通过highcharts到前端显示如下</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161206-1.png" alt=""></p>
<p>&nbsp;</p>
<p>感谢同事鹏哥的帮助；大家有好的方法，求留言讨论；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html-to-pdf-for-php]]></title>
      <url>http://yoursite.com/2016/12/01/html-to-pdf-for-php/</url>
      <content type="html"><![CDATA[<p>需求：报表页面点击下载后转成pdf文件；</p>
<p>之前找了很多插件，用下来wkhtmltopdf最好用；</p>
<p>下面说下如何操作</p>
<p>首先下载插件，最好翻墙下载，不然很慢，最好下载tar.gz包，不要到github上clone,文件太大；</p>
<p><pre class="lang:sh decode:true"><a href="http://wkhtmltopdf.org/downloads.html" target="_blank" rel="external">http://wkhtmltopdf.org/downloads.html</a></pre><br><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161201-0.png" alt=""></p>
<p>拷贝文件到命令目录</p>
<p><pre class="lang:sh decode:true ">tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz<br>cd wkhtmltox/bin<br>cp wkhtmltopdf /usr/local/bin/<br></pre><br>html页面</p>
<p><pre class="lang:xhtml decode:true ">&lt;button class=”btn-success btn button” style=”margin-left: 85%” onclick=”print_pdf()”&gt;下载PDF&lt;/button&gt;<br>&lt;form action=”&lt;?php echo U(‘Custorm/savePdf’) ?&gt;” method=”post” name=”hld_res” id=”hideform”&gt;<br>  &lt;input type=”hidden” id=”hide_content” name=”content” /&gt;<br>  &lt;input type=”hidden” name=”title” value=”&lt;?php echo $data[0][‘title’]?&gt;”/&gt;<br>&lt;/form&gt;</pre><br>JS方法</p>
<p><pre class="lang:sh decode:true ">function print_pdf(){<br>            //下载范围<br>            bdhtml=window.document.body.innerHTML;<br>            sprnstr=”&lt;!–startprint–&gt;”;<br>            eprnstr=”&lt;!–endprint–&gt;”;<br>            prnhtml=bdhtml.substring(bdhtml.indexOf(sprnstr)+17);<br>            prnhtml=prnhtml.substring(0,prnhtml.indexOf(eprnstr));<br>//            将获取的html代码添加到隐藏域中传给php文件处理<br>            $(“#hide_content”).val(“”+prnhtml+””);<br>            $(“#hideform”).submit();<br>        }</pre><br>PHP方法</p>
<p><pre class="lang:php decode:true">public function savePdf()<br>    {<br>        $html = $_REQUEST[‘content’];<br>        ob_start();<br>        $html=’<br>        &lt;html&gt;<br>        &lt;link href=”<a href="http://your_domain_name/Public/css/style.css" target="_blank" rel="external">http://your_domain_name/Public/css/style.css</a>“ rel=”stylesheet”&gt;<br>        &lt;link href=”<a href="http://your_domain_name/Public/css/style-responsive.css" target="_blank" rel="external">http://your_domain_name/Public/css/style-responsive.css</a>“ rel=”stylesheet”&gt;<br>        &lt;link type=”text/css” rel=”stylesheet” href=”<a href="http://your_domain_name/Public/js/bootstrap-table/bootstrap-table.css&quot;&amp;gt" target="_blank" rel="external">http://your_domain_name/Public/js/bootstrap-table/bootstrap-table.css&quot;&amp;gt</a>;<br>        &lt;meta http-equiv=”Content-Type” content=”text/html; charset=utf-8” /&gt;<br>        &lt;body style=”background: white;”&gt; ‘.$html;<br>        $html .= ‘ &lt;/body&gt;&lt;/html&gt;’;<br>        $filename = $_REQUEST[‘title’] ? $_REQUEST[‘title’] : ‘报表-‘.date(‘Y-m-d’);<br>        file_put_contents(“{$filename}.html”, $html);<br>        ob_end_clean();<br>        //转换HTML TO PDF<br>        shell_exec(“/usr/local/bin/wkhtmltopdf -q -s A2 -O Landscape {$filename}.html {$filename}.pdf”);<br>        if(file_exists(“{$filename}.pdf”)){<br>            header(‘Content-type:application/octet-stream’);<br>            header(“Content-Disposition:attachment;filename={$filename}.pdf”);<br>            header(‘Content-Length:’.filesize(“{$filename}.pdf”));<br>            readfile(“{$filename}.pdf”);<br>            //删除本地的文件<br>            unlink(“{$filename}.pdf”);<br>            unlink(“{$filename}.html”);<br>        }else{<br>            exit;<br>        }<br>    }</pre><br>pdf文档效果</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/12/QQ20161201-1.png" alt=""></p>
<p>效果还是不错的；</p>
<p>这里遇到一个问题，就是线上的shell_exec()函数不执行。改目录权限，改sudo配置等等，都没效果，然后去配置文件里查看php.ini, 里面添加了disable_functions，去掉你要用的函数就可以了。</p>
<p>参考：<a href="http://blog.csdn.net/qq_14873105/article/details/51394026" target="_blank" rel="external">http://blog.csdn.net/qq_14873105/article/details/51394026</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[thinkphp修改mongo数据]]></title>
      <url>http://yoursite.com/2016/11/29/thinkphp-update-mongo-data/</url>
      <content type="html"><![CDATA[<p>由于需要修改mongo库的<code>status</code>的值，首先要找到这条记录的id；</p>
<p>我这里的id在mysql库里有记录，每条记录里有<code>key_time</code>字段，所以需要获取这个字段的值；</p>
<p>获取该字段的值需要从url里获取，通过ajax方式传递到后台来处理；</p>
<p><pre class="lang:js decode:true ">function commit(){<br>        var url = self.location.href;<br>        var title = $(‘h2’).html().split(‘_’);<br>        $.ajax({<br>            type: ‘POST’,<br>            url: ‘&lt;?php echo U(“ReportBrowse/info”)?&gt;’,<br>            data : {url:url,title:title[0]},<br>            success: function (data) {<br>//                console.log(data);<br>            },<br>            error: function (e) {</pre></p>
<pre><code>    }
});
</code></pre><p>}<br>后台会处理url，截取<code>key_time</code>的值</p>
<p><pre class="lang:php decode:true">public function info()<br>{<br>        //截取url字符串<br>        $url = $_REQUEST[‘url’];<br>        if ($url) {<br>            $action = explode(‘&amp;’,$url);<br>            $params = array();<br>            foreach ($action as $param) {<br>                $item = explode(‘=’, $param);<br>                $params[$item[0]] = $item[1];<br>            }</pre></p>
<pre><code>//根据预览页面的url中的key参数,从数据库yulan数据库中获取mongoId,然后到mongo库的template表中查找,修改status状态
$this-&amp;gt;editMongoId($params[$item[0]]);
</code></pre><p>}<br>这里调用了另外一个方法，这个方法就是查找mongoid, 然后根据mongoid修改<code>status</code>的值</p>
<p><pre class="lang:php decode:true ">private function editMongoId($key_time)<br>{<br>        //实例化mysql库的yulan表,根据传递的key_time查找mongoid<br>        $yulan_mysql = new Model(‘yulan’,’’,’DB_MYSQL_KW’);<br>        //实例化mongo库的template表,根据mongoid查找status状态<br>        $temp_mongo = new MongoModel(‘template’,’’,’DB_MONGO’);<br>        if($key_time){<br>            //获取预览数据里的mongoid<br>            $where[‘key_time’] = array(‘eq’,$key_time);<br>            $yulan_data = $yulan_mysql-&gt;field(‘mongoId’)-&gt;where($where)-&gt;select();<br>            if($mid = $yulan_data[0][‘mongoid’]){<br>                //根据mongoid获取模板mongo里的所有数据<br>                $status = $temp_mongo-&gt;where(array(<br>                    ‘_id’   =&gt;  $mid,<br>                ))-&gt;select();<br>                //如果状态为”草稿”,则修改mongo库的template的状态<br>                if($status[$mid][‘status’] == ‘草稿’){<br>                    $data[‘status’] = ‘已发布’;<br>                    $temp_mongo-&gt;where(array(<br>                        ‘_id’   =&gt;  $mid,<br>                    ))-&gt;save($data);<br>                }<br>            }<br>        }<br>}</pre><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[php多维数组整理]]></title>
      <url>http://yoursite.com/2016/11/29/php-array-add-value/</url>
      <content type="html"><![CDATA[<p>获取的数据需要到highcharts中显示，所以格式如下，但是在显示的时候，会有时间不存在，导致在一起显示的无法正常显示。所以需要整理数组是同样长度，并且在无时间的值为0；</p>
<p><pre class="lang:php decode:true ">array (size=3)<br>  0 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=16)<br>          0 =&gt; string ‘16-09-02’ (length=8)<br>          1 =&gt; string ‘16-09-03’ (length=8)<br>          2 =&gt; string ‘16-09-04’ (length=8)<br>          3 =&gt; string ‘16-09-05’ (length=8)<br>          4 =&gt; string ‘16-09-06’ (length=8)<br>          5 =&gt; string ‘16-09-07’ (length=8)<br>          6 =&gt; string ‘16-09-08’ (length=8)<br>          7 =&gt; string ‘16-09-09’ (length=8)<br>          8 =&gt; string ‘16-09-10’ (length=8)<br>          9 =&gt; string ‘16-09-11’ (length=8)<br>          10 =&gt; string ‘16-09-12’ (length=8)<br>          11 =&gt; string ‘16-09-13’ (length=8)<br>          12 =&gt; string ‘16-09-14’ (length=8)<br>          13 =&gt; string ‘16-09-15’ (length=8)<br>          14 =&gt; string ‘16-09-16’ (length=8)<br>          15 =&gt; string ‘16-09-17’ (length=8)<br>      ‘板块回复帖总数’ =&gt;<br>        array (size=16)<br>          0 =&gt; int 98<br>          1 =&gt; int 207<br>          2 =&gt; int 188<br>          3 =&gt; int 125<br>          4 =&gt; int 196<br>          5 =&gt; int 153<br>          6 =&gt; int 228<br>          7 =&gt; int 289<br>          8 =&gt; int 254<br>          9 =&gt; int 245<br>          10 =&gt; int 220<br>          11 =&gt; int 326<br>          12 =&gt; int 286<br>          13 =&gt; int 497<br>          14 =&gt; int 419<br>          15 =&gt; int 243<br>  1 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=13)<br>          0 =&gt; string ‘16-09-03’ (length=8)<br>          1 =&gt; string ‘16-09-05’ (length=8)<br>          2 =&gt; string ‘16-09-06’ (length=8)<br>          3 =&gt; string ‘16-09-07’ (length=8)<br>          4 =&gt; string ‘16-09-08’ (length=8)<br>          5 =&gt; string ‘16-09-09’ (length=8)<br>          6 =&gt; string ‘16-09-11’ (length=8)<br>          7 =&gt; string ‘16-09-12’ (length=8)<br>          8 =&gt; string ‘16-09-13’ (length=8)<br>          9 =&gt; string ‘16-09-14’ (length=8)<br>          10 =&gt; string ‘16-09-15’ (length=8)<br>          11 =&gt; string ‘16-09-16’ (length=8)<br>          12 =&gt; string ‘16-09-17’ (length=8)<br>      ‘版主回复帖数’ =&gt;<br>        array (size=13)<br>          0 =&gt; int 1<br>          1 =&gt; int 4<br>          2 =&gt; int 2<br>          3 =&gt; int 3<br>          4 =&gt; int 3<br>          5 =&gt; int 2<br>          6 =&gt; int 1<br>          7 =&gt; int 4<br>          8 =&gt; int 8<br>          9 =&gt; int 5<br>          10 =&gt; int 2<br>          11 =&gt; int 3<br>          12 =&gt; int 1<br>  2 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=16)<br>          0 =&gt; string ‘16-09-02’ (length=8)<br>          1 =&gt; string ‘16-09-03’ (length=8)<br>          2 =&gt; string ‘16-09-04’ (length=8)<br>          3 =&gt; string ‘16-09-05’ (length=8)<br>          4 =&gt; string ‘16-09-06’ (length=8)<br>          5 =&gt; string ‘16-09-07’ (length=8)<br>          6 =&gt; string ‘16-09-08’ (length=8)<br>          7 =&gt; string ‘16-09-09’ (length=8)<br>          8 =&gt; string ‘16-09-10’ (length=8)<br>          9 =&gt; string ‘16-09-11’ (length=8)<br>          10 =&gt; string ‘16-09-12’ (length=8)<br>          11 =&gt; string ‘16-09-13’ (length=8)<br>          12 =&gt; string ‘16-09-14’ (length=8)<br>          13 =&gt; string ‘16-09-15’ (length=8)<br>          14 =&gt; string ‘16-09-16’ (length=8)<br>          15 =&gt; string ‘16-09-17’ (length=8)<br>      ‘板块主题帖总数’ =&gt;<br>        array (size=16)<br>          0 =&gt; int 10<br>          1 =&gt; int 39<br>          2 =&gt; int 56<br>          3 =&gt; int 21<br>          4 =&gt; int 31<br>          5 =&gt; int 27<br>          6 =&gt; int 42<br>          7 =&gt; int 59<br>          8 =&gt; int 46<br>          9 =&gt; int 33<br>          10 =&gt; int 45<br>          11 =&gt; int 47<br>          12 =&gt; int 64<br>          13 =&gt; int 76<br>          14 =&gt; int 67<br>          15 =&gt; int 36</pre><br>这里写个私有方法，方便内部调用</p>
<p><pre class="lang:php decode:true ">private function getDateLength($arr)<br>    {<br>        //数组映射<br>        $new_arr = [];<br>        foreach($arr as $k=&gt;$v){<br>            foreach($v as $k1=&gt;$v1){<br>                if($k1 != ‘day’){<br>                    foreach($v[‘day’] as $k2=&gt;$v2){<br>                        $new_arr[$k][$v2] = $v1[$k2];<br>                    }<br>                }<br>            }<br>        }<br>        //数组补值<br>        $data = [];<br>        $max = max($new_arr);<br>        foreach($new_arr as $k=&gt;$v){<br>            foreach($max as $k1=&gt;$v1){<br>                if(in_array($k1,array_keys($v))){<br>                    $data[$k][$k1] = $v[$k1];<br>                }else{<br>                    $data[$k][$k1] = 0;<br>                }<br>            }<br>        }<br>        //转化成原型<br>        $array = [];<br>        foreach($arr as $k=&gt;$v){<br>            foreach($v as $k1=&gt;$v1){<br>                if($k1 != ‘day’){<br>                    $array[$k][$k1] = array_values($data[$k]);<br>                }else{<br>                    $array[$k][$k1] = array_keys($data[$k]);<br>                }<br>            }<br>        }<br>        return $array;<br>    }</pre><br>显示效果如下：<a href="http://www.cenhq.com/wp-content/uploads/2016/11/2A8ADEDB-B2D0-483A-B014-09283F8B760A.jpg" target="_blank" rel="external">
</a></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/11/2A8ADEDB-B2D0-483A-B014-09283F8B760A.jpg" alt=""></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[highcharts导出csv格式]]></title>
      <url>http://yoursite.com/2016/09/27/highcharts-export-csv/</url>
      <content type="html"><![CDATA[<p>业务需求报表导出格式为CSV，所以需要引用export-csv.js和exporting.js</p>
<p>代码如下:</p>
<p><pre class="lang:js decode:true ">&lt;script src=”<a href="http://code.highcharts.com/stock/highstock.js&quot;&gt;&lt;/script&amp;gt" target="_blank" rel="external">http://code.highcharts.com/stock/highstock.js&quot;&gt;&lt;/script&amp;gt</a>;<br>&lt;script src=”<a href="http://code.highcharts.com/modules/exporting.js&quot;&gt;&lt;/script&amp;gt" target="_blank" rel="external">http://code.highcharts.com/modules/exporting.js&quot;&gt;&lt;/script&amp;gt</a>;<br>&lt;script src=”<a href="http://highcharts.github.io/export-csv/export-csv.js&quot;&gt;&lt;/script&amp;gt" target="_blank" rel="external">http://highcharts.github.io/export-csv/export-csv.js&quot;&gt;&lt;/script&amp;gt</a>;</pre></p>
<p>&lt;div id=”container” style=”height: 300px; margin-top: 2em”&gt;&lt;/div&gt;</p>
<p>&lt;script&gt;<br>var chart = new Highcharts.StockChart({</p>
<pre><code>chart: {
    renderTo: &apos;container&apos;
},

navigator: {
    series: {
        includeInCSVExport: false
    }
},
series: [{
    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
    pointStart: Date.UTC(2016, 0, 1),
    pointInterval: 24 * 36e5
}],

exporting: {
    csv: {
        dateFormat: &apos;%Y-%m-%d&apos;
    }
}
</code></pre><p>});<br>&lt;/script&gt;<br>显示效果：</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/09/QQ20160927-0.png" alt=""></p>
<p>导出结果：</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2016/09/QQ20160927-1.png" alt=""></p>
<p>参考：<a href="https://github.com/highcharts/export-csv" target="_blank" rel="external">https://github.com/highcharts/export-csv</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax+setInterval实时更新]]></title>
      <url>http://yoursite.com/2016/09/20/ajax-setinterval/</url>
      <content type="html"><![CDATA[<div>要求页面部分数据更新，具有实时性。需要用到定时器(setInter)和异步技术(Ajax)</div><br><div>首先前段页面</div><br><div><br><pre class="lang:php decode:true ">index.php<br>&lt;div class=”count” id=”count” &gt;100&lt;/div&gt;<br>&lt;script src=”/js/jquery-2.1.1.min.js”&gt;&lt;/script&gt;<br>&lt;script type=”text/javascript”&gt;<br>    setInterval(function(){<br>        $.ajax({<br>            type:”post”,<br>            dataType:”json”,<br>            url: ‘index.php?r=test/getdata’,<br>            success:function(data){<br>                $(“#count”).html(data[0][‘id’]);<br>                //console.log(data[0][‘id’]);<br>            },<br>            error: function(){<br>                alert(‘wrong’);<br>            },<br>        });<br>    },3000);<br><br>&lt;/script&gt;</pre><br>后端处理页面，可以从数据库获取数据也可以中接口，这里自定义数组<br><pre class="lang:php decode:true ">public function actionGetdata()<br>    {<br>        $data = array(<br>            array(‘id’=&gt;4,’name’=&gt;’test1’<br>        );<br>        echo json_encode($data);<br><br>    }<br><br>    public function actionIndex(){<br>        return $this-&gt;render(‘index’);<br>    }</pre><br><div>浏览器访问</div><br><div><a href="http://test-advanced.com/index.php?r=test/index" target="_blank" rel="external">http://test-advanced.com/index.php?r=test/index</a>   #test表示控制器，index表示方法</div><br><div>更改数组里的id，前段页面数据实时变化</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2016/09/QQ20160920-0.png" alt=""></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix-api使用php版本]]></title>
      <url>http://yoursite.com/2016/09/12/zabbix-api-php/</url>
      <content type="html"><![CDATA[<h3 id="API简介"><a href="#API简介" class="headerlink" title="API简介"></a>API简介</h3><p>Zabbix API开始扮演着越来越重要的角色，尤其是在集成第三方软件和自动化日常任务时。很难想象管理数千台服务器而没有自动化是多么的困难。Zabbix API为批量操作、第三方软件集成以及其他作用提供可编程接口。</p>
<div><br><div>Zabbix API是在1.8版本中开始引进并且已经被广泛应用。所有的Zabbix移动客户端都是基于API，甚至原生的WEB前端部分也是建立在它之上。Zabbix API 中间件使得架构更加模块化也避免直接对数据库进行操作。它允许你通过JSON RPC协议来创建、更新和获取Zabbix对象并且做任何你喜欢的操作【当然前提是你拥有认证账户】。</div><br><div></div><br><div><br><br>Zabbix API提供两项主要功能：<br><br><em>   远程管理Zabbix配置
</em>   远程检索配置和历史数据<br><br>#### <strong>使用JSON</strong><br><br>API 采用JSON-RPC实现。这意味着调用任何函数，都需要发送POST请求，输入输出数据都是以JSON格式。大致工作流如下：<br><br><em>   准备JSON对象，它描述了你想要做什么（创建主机，获取图像，更新监控项等）。
</em>   采用POST方法向<a href="http://example.com/zabbix/api_jsonrpc.php%E5%8F%91%E9%80%81%E6%AD%A4JSON%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">http://example.com/zabbix/api_jsonrpc.php发送此JSON对象</a>. <a href="http://example.com/zabbix/%E6%98%AFZabbix%E5%89%8D%E7%AB%AF%E5%9C%B0%E5%9D%80%E3%80%82api_jsonrpc.php%E6%98%AF%E8%B0%83%E7%94%A8API%E7%9A%84PHP%E8%84%9A%E6%9C%AC%E3%80%82%E5%8F%AF%E5%9C%A8%E5%AE%89%E8%A3%85%E5%8F%AF%E8%A7%86%E5%8C%96%E5%89%8D%E7%AB%AF%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%BE%E5%88%B0%E3%80%82" target="_blank" rel="external">http://example.com/zabbix/是Zabbix前端地址。api_jsonrpc.php是调用API的PHP脚本。可在安装可视化前端的目录下找到。</a><br><em>   获取JSON格式响应。
</em>   注：请求除了必须是POST方法之外，HTTP Header Content-Type必须为【application/jsonrequest，application/json-rpc，application/json】其中之一。<br>可以采用脚本或者任何”手动”支持JSON RPC的工具来使用API。而首先需要了解的就是如何验证和如何使用验证ID来获取想要的信息。<br><br></div><br><div><br><br>#### <strong>基本请求格式</strong><br><br><div><br><div>Zabbix API 简化的JSON请求如下：</div><br><div><br><pre class="lang:sh decode:true ">{<br>“jsonrpc”: “2.0”,<br>“method”: “method.name”,<br>“params”: {<br>“param_1_name”: “param_1_value”,<br>“param_2_name”: “param_2<em>value”<br>},<br>“id”: 1,<br>“auth”: “159121b60d19a9b4b55d49e30cf12b81”,<br>}</em></pre><br>下面一行一行来看：<br><br><em>   “jsonrpc”: “2.0”-这是标准的JSON RPC参数以标示协议版本。所有的请求都会保持不变。
</em>   “method”: “method.name”-这个参数定义了真实执行的操作。例如：host.create、item.update等等<br>*   “params”-这里通过传递JSON对象来作为特定方法的参数。如果你希望创建监控项，”name”和”key“参数是需要的，每个方法需要的参数在Zabbix API文档中都有描述。<br><em>   “id”: 1-这个字段用于绑定JSON请求和响应。响应会跟请求有相同的”id”。在一次性发送多个请求时很有用，这些也不需要唯一或者连续
</em>   “auth”: “159121b60d19a9b4b55d49e30cf12b81”-这是一个认证令牌【authentication token】用以鉴别用户、访问API。这也是使用API进行相关操作的前提-获取认证ID。<br><br>### API 使用<br><br><em>   <strong>环境准备</strong><br>Zabbix API是基于JSON-RPC 2.0规格，具体实现可以选择任何你喜欢的编程语言或者手动方式。这里我们采用的Python和基于Curl的方式来做示例。Python 2.7版本已经支持JSON，所以不再需要其他模块组件。当然可以采用Perl、Ruby、PHP之类的语言，使用前先确保相应JSON模块的安装。

</em>   <strong>身份验证</strong><br><div><br><div>任何Zabbix API客户端在真正工作之前都需要验证它自身。在这里是采用User.login方法。这个方法接受一个用户名和密码作为参数并返回验证ID，一个安全哈希串用于持续的API调用（在使用User.logout之前该验证ID均有效）。这里使用php代码获取</div><br><div><br><pre class="lang:php decode:true ">function Curl($url,$header,$info){<br>        $ch = curl_init();<br>        curl_setopt($ch,CURLOPT_URL, $url);<br>        curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1);<br>        curl_setopt($ch,CURLOPT_HTTPHEADER,$header);<br>        curl_setopt($ch,CURLOPT_POST, 1);<br>        curl_setopt($ch,CURLOPT_POSTFIELDS, $info);<br>        $response = curl_exec($ch);<br>        curl_close($ch);<br>        return json_decode($response);<br>    }</pre><br><pre class="lang:php decode:true">//获取token<br>function GetToken() {<br><br>        $logininfo = [<br>            ‘jsonrpc’ =&gt; ‘2.0’,<br>            ‘method’ =&gt; ‘user.login’,<br>            ‘params’ =&gt; [<br>                ‘user’ =&gt; ‘username’,<br>                ‘password’ =&gt; ‘password’,<br>            ],<br>            ‘id’ =&gt; 1,<br>        ];<br><br>        $url = ‘<a href="http://www.example.com/api_jsonrpc.php" target="_blank" rel="external">http://www.example.com/api_jsonrpc.php</a>‘;<br>        $data = json_encode($logininfo);<br>        $header = [“Content-type: application/json”];<br>        //实例化模型<br>        $model = new GetZabbixToken();<br>        if (!$result = $model-&gt;Curl($url, $header, $data)) {<br>            echo ‘无法获取token’;<br>            exit;<br>        }<br><br>        $token = $result-&gt;result;<br>        return $token;<br>    }<br><br>//获取主机信息<br>function GetHosts() {<br>        $hostinfo = [<br>            ‘jsonrpc’ =&gt; ‘2.0’,<br>            ‘method’ =&gt; ‘host.get’,<br>            ‘params’ =&gt; [<br>                ‘output’ =&gt; [‘hostid’, ‘name’],<br>                ‘filter’ =&gt; [‘host’ =&gt; ‘’],<br>            ],<br>            ‘auth’ =&gt; GetToken(),<br>            ‘id’ =&gt; 1<br>        ];<br>        $url = ‘<a href="http://www.example.com/api_jsonrpc.php" target="_blank" rel="external">http://www.example.com/api_jsonrpc.php</a>‘;<br>        $data = json<em>encode($hostinfo);<br>        $header = [“Content-type: application/json”];<br>        if (!$result = Curl($url, $header, $data)) {<br>            echo ‘无法获取主机信息’;<br>            exit;<br>        }<br>        return $result-&gt;result;<br>    }</em></pre><br>这里我用前端页面渲染，效果如下<br><br><img src="http://www.cenhq.com/wp-content/uploads/2016/09/hostinfo.jpg" alt=""><br><br>查看详情页是具体主机硬件信息<br><br><img src="http://www.cenhq.com/wp-content/uploads/2016/09/info.jpg" alt=""><br><br></div><br>代码如下：<br><pre class="lang:php decode:true ">function GetInfo($hostid){<br>        $info = [<br>            ‘jsonrpc’ =&gt; ‘2.0’,<br>            ‘method’ =&gt; ‘item.get’,<br>            ‘params’ =&gt; [<br>                ‘output’    =&gt;  [‘key‘,’lastvalue’,’hostid’],<br>                ‘filter’    =&gt;  [<br>                    ‘hostid’ =&gt;  $hostid,<br>                    ‘key_’    =&gt;  [<br>                        ‘vfs.fs.size[/,total]’,<br>                        ‘vfs.fs.size[/,used]’,<br>                        ‘vfs.fs.size[/,free]’,<br>                        ‘vfs.fs.size[/data,total]’,<br>                        ‘vfs.fs.size[/data,used]’,<br>                        ‘vfs.fs.size[/data,free]’,<br>                        ‘system.cpu.load[percpu,avg15]’,<br>                        ‘system.cpu.load[percpu,avg5]’,<br>                        ‘system.cpu.load[percpu,avg1]’,<br>                        ‘system.cpu.util[,idle]’,<br>                        ‘system.cpu.switches’,<br>                        ‘system.cpu.util[,interrupt]’,<br>                        ‘system.cpu.util[,iowait]’,<br>                        ‘vm.memory.size[available]’,<br>                        ‘vm.memory.size[total]’,<br>                        ‘custom.vfs.dev.read.ms[sda]’,<br>                        ‘custom.vfs.dev.write.ms[sda]’,<br>                        ‘icmpping’,<br>                        ‘icmppingsec’,<br>                        ‘icmppingloss’,<br>                        ‘iptables.lines’,<br>                        ‘kernel.maxfiles’,<br>                        ‘net.if.in[em1]’,<br>                        ‘net.if.in[em2]’,<br>                        ‘net.if.in[em3]’,<br>                        ‘net.if.in[em4]’,<br>                        ‘net.if.out[em1]’,<br>                        ‘net.if.out[em2]’,<br>                        ‘net.if.out[em3]’,<br>                        ‘net.if.out[em4]’,<br>                        ‘proc.num[]’,<br>                        ‘system.boottime’,<br>                        ‘system.localtime’,<br>                        ‘system.swap.size[,free]’,<br>                        ‘system.swap.size[,pfree]’,<br>                        ‘system.swap.size[,total]’,<br>                        ‘system.uname’,<br>                        ‘system.uptime’,<br>                        ‘system.users.num’,<br>                        ‘vfs.fs.inode[/,pfree]’,<br>                        ‘vfs.fs.inode[/data,pfree]’,<br>                    ],<br>                ],<br>            ],<br>            ‘auth’  =&gt;  GetToken(),<br>            ‘id’    =&gt;  1,<br>        ];<br><br>        $url = ‘<a href="http://www.example.com/api_jsonrpc.php" target="_blank" rel="external">http://www.example.com/api_jsonrpc.php</a>‘;<br>        $info =  json_encode($info);<br>        $header = [“Content-type: application/json”];<br>        if(!$info = $model-&gt;Curl($url,$header,$info)){<br>            echo ‘无法获取信息’;<br>            exit;<br>        }<br>        return $info-&gt;result;<br>    }</pre><br>&nbsp;<br><br></div><br></div><br></div><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP数组分页]]></title>
      <url>http://yoursite.com/2016/09/12/php-array-page/</url>
      <content type="html"><![CDATA[<div>由于从api获取的数据无法通过框架分页类来分页，所以需要自己写分页方法</div><br><div>代码如下</div><br><div><br><pre class="lang:php decode:true ">&lt;?php<br><br>//数组数据<br>$data = array(<br>    array(‘id’=&gt;1,’name’=&gt;’test1’),<br>    array(‘id’=&gt;2,’name’=&gt;’test2’),<br>    array(‘id’=&gt;3,’name’=&gt;’test3’),<br>    array(‘id’=&gt;4,’name’=&gt;’test4’),<br>    array(‘id’=&gt;5,’name’=&gt;’test5’),<br>    array(‘id’=&gt;6,’name’=&gt;’test6’),<br>    array(‘id’=&gt;7,’name’=&gt;’test7’),<br>);<br><br>//获取当前页<br>$page = intval(isset($_GET[‘page’])) ? intval($_GET[‘page’]) : 1;<br>//排序order 0 - 不变     1- 反序<br>$order = 0;<br>//每页显示数<br>$count = 3;<br><br>$d = page_array($count,$page,$data,$order);<br>echo ‘&lt;pre&gt;’ ;<br>print_r($d);<br>//url地址<br>$url = ‘<a href="http://127.0.0.1:81/test.php" target="_blank" rel="external">http://127.0.0.1:81/test.php</a>‘;<br>echo show_array($countpage,$url);<br><br>/<strong><br> <em> 数组分页函数  核心函数  array_slice 
 </em> 用此函数之前要先将数据库里面的所有数据按一定的顺序查询出来存入数组中<br> <em> $count   每页多少条数据 
 </em> $page   当前第几页<br> <em> $array   查询出来的所有数组 
 </em> order 0 - 不变     1- 反序<br> <em>/<br><br>function page_array($count,$page,$array,$order){<br>    global $countpage; #定全局变量<br>    $page=(empty($page))?’1’:$page; #判断当前页面是否为空 如果为空就表示为第一页面<br>       $start=($page-1)</em>$count; #计算每次分页的开始位置<br>    if($order==1){<br>      $array=array_reverse($array);<br>    }<br>    $totals=count($array);<br>    $countpage=ceil($totals/$count); #计算总页面数<br>    $pagedata=array();<br>    $pagedata=array_slice($array,$start,$count);<br>    return $pagedata;  #返回查询数据<br>}<br>/</strong><br> <em> 分页及显示函数 
 </em> $countpage 全局变量，照写<br> <em> $url 当前url 
 </em>/<br>function show_array($countpage,$url){<br>     $page=empty($_GET[‘page’])?1:$_GET[‘page’];<br>     if($page &gt; 1){<br>        $uppage=$page-1;<br><br>     }else{<br>        $uppage=1;<br>     }<br><br>     if($page &lt; $countpage){<br>        $nextpage=$page+1;<br><br>     }else{<br>            $nextpage=$countpage;<br>     }<br><br>    $str=’&lt;div style=”border:1px; width:300px; height:30px; color:#9999CC”&gt;’;<br>    $str.=”&lt;span&gt;共  {$countpage}  页 / 第 {$page} 页&lt;/span&gt;&amp;nbsp;”;<br>    $str.=”&lt;span&gt;&lt;a href=’$url?page=1’&gt;   首页  &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”;<br>    $str.=”&lt;span&gt;&lt;a href=’$url?page={$uppage}’&gt; 上一页  &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”;<br>    $str.=”&lt;span&gt;&lt;a href=’$url?page={$nextpage}’&gt;下一页  &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”;<br>    $str.=”&lt;span&gt;&lt;a href=’$url?page={$countpage}’&gt;尾页  &lt;/a&gt;&lt;/span&gt;&amp;nbsp;”;<br>    $str.=’&lt;/div&gt;’;<br>    return $str;<br>}<br>?&gt;</pre><br>结果如下：<br><br><img src="http://www.cenhq.com/wp-content/uploads/2016/09/QQ20160912-0.png" alt=""><br><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql多实例]]></title>
      <url>http://yoursite.com/2016/09/06/mysql-many-instance/</url>
      <content type="html"><![CDATA[<p>需求：</p>
<p>mysql主从复制，主mysql版本为5.5，从mysql版本为5.7</p>
<p>主库不需要操作，只在从数据库上配置</p>
<p>由于需要同步18个数据库，由于主库的端口各不相同，从库同样要开启18个实例</p>
<p><div>前面直接用脚本操作</div></p>
<pre class="lang:sh decode:true">#!/bin/bash

#多实例端口号
port="3306 3312 3307 3319 3308 3309 3311 3330 3320 3321 3326 3327 3333 3314 3318 3323 3317 3316 3307"

for i in $port
do
    #创建数据目录
        mkdir /data/$i/dbdata -p

        #修改权限
        chown mysql:mysql /data/$i -R

        #初始化数据库
        /usr/local/mysql/bin/mysqld --initialize-insecure --user="mysql" --basedir="/usr/local/mysql" --datadir="/data/$i/dbdata"

        #拷贝配置文件
        cp /opt/my.cnf /data/$i/

        #修改配置
        sed -i "s/3312/$i/g" /data/$i/my.cnf

        #启动
        mysqld_safe --defaults-file="/data/$i/my.cnf" &amp;

        #登录,第一次登录默认密码为空
        mysql -S /tmp/mysql$i.sock &lt;&lt; EOF

        #修改密码
        use mysql;
        set password = password('******');

        #授予权限
        grant all on *.* to root@'192.168.61.%' identified by '******';
        flush privileges;
        exit;
EOF

done</pre>
脚本注释：

#初始化，5.7版本废弃mysql_install_db命令，该用mysqld 来初始化，—initialize 参数来创建密码，默认保存在~/.mysql_secret 。 —initialize-insecure 参数创建空密码

主配置文件
<pre class="lang:sh decode:true ">[client]
port = 3312
socket = /tmp/mysql3312.sock
default-character-set = utf8mb4

[mysql]
prompt="MySQL [\d]&gt; "
no-auto-rehash

[mysqld]
port = 3370
socket = /tmp/mysql3312.sock

basedir = /usr/local/mysql
datadir = /data/3312/dbdata
pid-file = /data/3312/mysql.pid
user = mysql
bind-address = 0.0.0.0
server-id = 5

init-connect = 'SET NAMES utf8mb4'
character-set-server = utf8mb4

skip-name-resolve

log_bin = mysql-bin
binlog_format = mixed
expire_logs_days = 7</pre>
查看服务
<pre class="lang:sh decode:true ">[root@host-192-168-150-202 ~]# netstat -lutnp |grep mysqld
tcp        0      0 0.0.0.0:3307                0.0.0.0:*                   LISTEN      28591/mysqld
tcp        0      0 0.0.0.0:3308                0.0.0.0:*                   LISTEN      30546/mysqld
tcp        0      0 0.0.0.0:3309                0.0.0.0:*                   LISTEN      31062/mysqld
tcp        0      0 0.0.0.0:3311                0.0.0.0:*                   LISTEN      31564/mysqld
tcp        0      0 0.0.0.0:3312                0.0.0.0:*                   LISTEN      27792/mysqld
tcp        0      0 0.0.0.0:3314                0.0.0.0:*                   LISTEN      2978/mysqld
tcp        0      0 0.0.0.0:3316                0.0.0.0:*                   LISTEN      5322/mysqld
tcp        0      0 0.0.0.0:3317                0.0.0.0:*                   LISTEN      4736/mysqld
tcp        0      0 0.0.0.0:3318                0.0.0.0:*                   LISTEN      3564/mysqld
tcp        0      0 0.0.0.0:3319                0.0.0.0:*                   LISTEN      11531/mysqld
tcp        0      0 0.0.0.0:3320                0.0.0.0:*                   LISTEN      32591/mysqld
tcp        0      0 0.0.0.0:3321                0.0.0.0:*                   LISTEN      661/mysqld
tcp        0      0 0.0.0.0:3323                0.0.0.0:*                   LISTEN      4150/mysqld
tcp        0      0 0.0.0.0:3326                0.0.0.0:*                   LISTEN      1229/mysqld
tcp        0      0 0.0.0.0:3327                0.0.0.0:*                   LISTEN      1774/mysqld
tcp        0      0 0.0.0.0:3330                0.0.0.0:*                   LISTEN      32066/mysqld
tcp        0      0 0.0.0.0:3333                0.0.0.0:*                   LISTEN      2392/mysqld
tcp        0      0 0.0.0.0:3370                0.0.0.0:*                   LISTEN      6497/mysqld
tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      5923/mysqld</pre>
登录到主数据库上查看file,pos等信息，来配置从数据库
<pre class="lang:sh decode:true">#指定主服务器
mysql&gt; change master to master_host="192.168.101.22",master_port=3370,master_user="kfuser",master_password="kfpasswd",master_log_file="mysql-bin.000006",master_log_pos=246808818;
mysql&gt; start slave;
mysql&gt; show slave status\G
*************************** 1\. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.101.99
                  Master_User: ****
                  Master_Port: 3307
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000007
          Read_Master_Log_Pos: 326301199
               Relay_Log_File: host-192-168-150-202-relay-bin.000002
                Relay_Log_Pos: 164439916
        Relay_Master_Log_File: mysql-bin.000007
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes</pre>

<hr>
<p>错误1：</p>
<p><pre class="lang:sh decode:true ">Last_Errno: 1032<br>Last_Error: Could not execute Update_rows_v1 event on table InfoServer_HS.ONLINENUMREALTIME; Can’t find record in ‘ONLINENUMREALTIME’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event’s master log mysql-bin.000006, end_log_pos 246506088</pre><br>造成1032错误的根本原因是主从数据库数据不一致,导致同步操作在从库上无法执行.</p>
<p>解决办法：</p>
<p><pre class="lang:sh decode:true ">vim /etc/my.cnf<br>slave-skip-errors = 1032 #跳过这个错误</pre><br>错误2:</p>
<p><pre class="lang:sh decode:true ">Last_SQL_Errno: 1677<br>Last_SQL_Error: Column 5 of table ‘InfoServer_HS.ONLINENUM20160906’ cannot be converted from type ‘varchar(100)’ to type ‘varchar(100)’</pre><br>解决办法：</p>
<p><pre class="lang:sh decode:true ">mysql&gt; stop slave;<br>mysql&gt; set global slave_type_conversions=ALL_NON_LOSSY;<br>mysql&gt; start slave;</pre><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix监控mongodb]]></title>
      <url>http://yoursite.com/2015/12/30/zabbix-monitor-mongodb/</url>
      <content type="html"><![CDATA[<p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本.</p>
<h3 id="1-下载模版"><a href="#1-下载模版" class="headerlink" title="1. 下载模版"></a>1. 下载模版</h3><pre class="lang:sh decode:true">cenhuqing@cenhuqingdeMBP ~$ wget http://mongoing.com/wp-content/uploads/2014/11/Mongodb_eshu.txt

模版名后缀改成xml，导入web模版

监控的参数有如下：
connections
BackgroundFlush
curosor
oplogstoragetime
pagefaults
queue
index
mem
network
Opcounters</pre>

<h3 id="2，配置客户端"><a href="#2，配置客户端" class="headerlink" title="2，配置客户端"></a>2，配置客户端</h3><pre class="lang:sh decode:true">[root@zhishi ~]# vim /usr/local/etc/zabbix_agentd.conf
Include=/usr/local/etc/zabbix.agentd.conf.d/*.conf

取消该注释
不取消也可以放在配置文件中。不过为了方便以后添加更多的参数所以创建文件</pre>

<h3 id="3-配置文件中添加参数"><a href="#3-配置文件中添加参数" class="headerlink" title="3.配置文件中添加参数"></a>3.配置文件中添加参数</h3><p><span style="color: #ff0000;">注意：mongo带认证需要添加认证用户名和密码</span></p>
<pre class="lang:sh decode:true">[root@zhishi ~]# vim /usr/local/etc/zabbix_agentd.conf.d/monitor_mongodb.conf
UserParameter=mongo.service,ps -ef | grep mongo |grep -v grep |wc -l
UserParameter=mongo.mem_resident,echo "db.serverStatus().mem"| mongo -u root -p passwd admin|grep resident | cut -d ":" -f 2 |cut -d "," -f 1| cut -d " " -f 2
UserParameter=mongo.mem_virtual,echo "db.serverStatus().mem"| mongo -u root -p passwd admin|grep virtual | cut -d ":" -f 2 |cut -d "," -f 1| cut -d " " -f 2
UserParameter=mongo.mem_mapped,echo "db.serverStatus().mem"| mongo -u root -p passwd admin|grep '\bmapped\b' | cut -d ":" -f 2 |cut -d "," -f 1| cut -d " " -f 2
UserParameter=mongo.network[*],echo "db.serverStatus().network"|mongo -u root -p passwd admin| grep $1 | cut -d ":" -f 2 |cut -d "," -f1 |cut -d " " -f 2
UserParameter=mongo.index[*],echo "db.serverStatus().indexCounters"|mongo -u root -p passwd admin| grep $1| cut -d ":" -f 2 |cut -d "," -f1 |cut -d " " -f 2
UserParameter=mongo.connection_current,echo "db.serverStatus().connections"| mongo -u root -p passwd admin| grep current|cut -d ":" -f 2|cut -d "," -f 1|cut -d " " -f 2
UserParameter=mongo.connection_available,echo "db.serverStatus().connections"| mongo -u root -p passwd admin| grep current| cut -d ":" -f 3|cut -d "," -f 1 |cut -d " " -f 2
UserParameter=mongo.opcounters[*],echo "db.serverStatus().opcounters" |mongo -u root -p passwd admin| grep $1|cut -d ":" -f 2|cut -d "," -f 1 |cut -d " " -f 2
UserParameter=mongo.rpstatus,echo "rs.status()"| mongo -u root -p passwd admin| grep myState| cut -d ":" -f 2| cut -d "," -f 1 |cut -d " " -f 2
UserParameter=mongo.queue_write,echo "db.serverStatus().globalLock.currentQueue.writers"|mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.queue_reader,echo "db.serverStatus().globalLock.currentQueue.readers"|mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.backgroundFlush,echo "db.serverStatus().backgroundFlushing.last_ms" |mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.curosor_Totalopen,echo "db.serverStatus().cursors.totalOpen" |mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.curospr_timedOu,echo "db.serverStatus().cursors.timedOut" |mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.pagefaults,echo "db.serverStatus().extra_info.page_faults" |mongo -u root -p passwd admin|sed -n 3p
UserParameter=mongo.oplog_storetime,echo "db.printReplicationInfo()"|mongo -u root -p passwd admin|sed -n 4p|cut -d "(" -f 2|cut -d "h" -f 1</pre>

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>4.1 客户端测试</p>
<pre class="lang:sh decode:true ">[root@zhishi ~]#  echo "db.serverStatus().mem"| mongo -u root -p passwd admin|grep resident | cut -d ":" -f 2 |cut -d "," -f 1| cut -d " " -f 2
93</pre>
4.2 监控端测试
<pre class="lang:sh decode:true ">[root@monitor ~]#  zabbix_get -s 10.168.210.56 -k mongo.mem_resident
93</pre>

<h3 id="5-zabbix配置"><a href="#5-zabbix配置" class="headerlink" title="5.zabbix配置"></a>5.zabbix配置</h3><p><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151230-0@2x1.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151230-1@2x1.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151230-2@2x1.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151230-3@2x1.png" alt=""></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh隧道翻墙]]></title>
      <url>http://yoursite.com/2015/12/18/ssh-tunnel-over-the-wall/</url>
      <content type="html"><![CDATA[<div>最近公司的网络到国外vps的路由丢包严重，国外vps上的shadowsocks无法使用</div><br><div>我就从公司阿里云服务器上面测试下到国外的vps路由是否正常，经测试可以访问。</div><br><div>然后我就想用阿里云做通道，公司到国外vps之间到通道。</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-1@2x.png" alt=""></div><br><div>实现步骤：</div>

<h3 id="1-云主机启用通道"><a href="#1-云主机启用通道" class="headerlink" title="1.云主机启用通道"></a>1.云主机启用通道</h3><p><pre class="lang:sh decode:true ">[root@monitor ~]# ssh -qTNf -D 0.0.0.0:12345 root@xo.xo.xo.xo<br>root@xo.xo.xo.xo’s password:</pre><br>查看监控端口</p>
<p><pre class="lang:sh decode:true ">[root@monitor ~]# netstat -lutnp |grep 12345<br>tcp        0      0 0.0.0.0:12345               0.0.0.0:*                   LISTEN      19633/ssh</pre><br>添加防火墙策略</p>
<p><pre class="lang:sh decode:true">[root@monitor ~]# vim /etc/sysconfig/iptables<br>-A INPUT -s xx.xx.xx.xx -p tcp  –dport 12345 -j ACCEPT<br>[root@monitor ~]# iptables -nL |grep 12345<br>ACCEPT     tcp  –  xx.xx.xx.xx        0.0.0.0/0           tcp dpt:12345</pre></p>
<div>注：xo.xo.xo.xo为vps地址，xx.xx.xx.xx为云主机地址</div><br><div></div><br><div>参数详解：</div><br><div><br><div><br><div>-q表示该命令进入安静模式</div><br></div><br></div><br><div><br><div><br><div>-T是指该命令不占用shell</div><br></div><br></div><br><div><br><div><br><div>-N是指该命令不执行远程命令</div><br></div><br></div><br><div><br><div><br><div>-f是指该命令在后台运行</div><br></div><br></div><br><div><br><div><br><div>-D是该命令重要参数，他的后面跟着socks5服务器的地址与端口</div><br></div><br></div><br><div><br><div><br><div>最后就是远程服务器用户名和地址</div><br><div></div><br></div><br></div><br><div><br><div>也可以使用端口映射</div><br><div>ssh -N -f -L 127.0.0.1:12345:10.21.0.34:22 test@12.3..4.5</div><br><div>其中-N，-f作用上面已经讲了，这里最重要的是-L命令，它作用是做本地映射，使得远程服务器的端口相当于本地某自定义的端口，如上面的命令，本地的12345端口就相当于10.21.0.34的22端口，以后我只需要使用ssh user@127.0.0.1 -p 12345命令就能登录10.21.0.34了，注意user是10.21.0.34的用户，最后就是我们所使用的中间服务器，这个地址需要是我们直接访问到的。其实上面所说的A主机就是127.0.0.1，B主机就是12.3.4.5，C主机就是10.21.0.34。当然了，有本地映射肯定有远程映射，就是把-L换成-R，这样我们访问远程主机的端口就相当于访问本地的端口，但我没发现该功能的更多用途。</div><br><div></div><br><div><br><div><br><div>如果你没有什么中间服务器，只是想做个端口映射，那也很简单，如下：</div><br></div><br></div><br><div><br><div><br><div>ssh -N -f -L 12345:12.3.4.5:22 test@12.3.4.5</div><br></div><br></div><br><div></div>

<h3 id="2-本地Chrome浏览器设置"><a href="#2-本地Chrome浏览器设置" class="headerlink" title="2.本地Chrome浏览器设置"></a>2.本地Chrome浏览器设置</h3><p>首先需要插件SwitchyOmega，可以chrome—&gt;更多工具—&gt;扩展程序—&gt;更多扩展程序里获取</p>
<p>也可以直接点击：<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="external">https://chrome.google.com/webstore/category/extensions?hl=zh-CN</a></p>
<p>添加完成后，选项里设置新建情景模式</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-3@2x.png" alt=""></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-4@2x.png" alt=""></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-5@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-6@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-7@2x.png" alt=""></p>
<p></p></div><br>测试下效果<p></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/12/QQ20151218-8@2x.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脚本自动添加ip到iptables]]></title>
      <url>http://yoursite.com/2015/12/17/scripts-add-ip-to-iptables/</url>
      <content type="html"><![CDATA[<p>nginx日志里有一些来历不明的ip攻击或者是用ssh来尝试登录你的密码</p>
<p>日志会记录这些来源的ip地址，根据ip地址来加入到iptables INPUT里，默认INPUT链为DROP</p>
<p>下面是我写的一个脚本，可以放到计划任务里，每天来统计</p>
<p><pre class="lang:sh decode:true ">[root@VM-241 ~]# vim add_iptables.sh </pre></p>
<p>#!/bin/bash</p>
<p>#日志文件<br>logfile=/data/app/nginx/logs/access.log</p>
<p>#统计ip，可以根据时间统计<br>awk ‘/passport-send_vcode_sms.html/{print $1}’ $logfile |sort |uniq -c |sort -nr &gt; /root/ip.txt</p>
<p>#已经在iptables中的地址<br>droped_ip=$(iptables -L -n |awk ‘/^DROP/{print $4}’)</p>
<p>#未加入iptables中的地址<br>drop_ip=$(awk ‘{print $2}’ /root/ip.txt)</p>
<p>#比较两个数组不同，把不同的ip加入到防火墙中<br>add_ip=$(awk ‘NR==1{for(i=1;i&lt;=NF;i++) B[$i]=1}NR==2{for(j=1;j&lt;=NF;j++) {if(B[$j]!=1) print $j}} ‘ &lt;(echo $droped_ip) &lt;(echo $drop_ip))<br>for i in $add_ip<br>do<br>        iptables -A INPUT -s $i -j DROP &amp;&amp; echo “已添加IP: $i 到防火墙丢弃策略中。”<br>done</p>
<p>#保存新加入的策略<br>/etc/init.d/iptables save<br>/etc/init.d/iptables reload<br>执行前的iptables策略</p>
<p><pre class="lang:sh decode:true ">[root@VM-241 ~]# iptables -L -n<br>Chain INPUT (policy DROP)<br>target     prot opt source               destination<br>ACCEPT     all  –  0.0.0.0/0            0.0.0.0/0<br>ACCEPT     all  –  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:21<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:3690<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:443<br>ACCEPT     icmp –  0.0.0.0/0            0.0.0.0/0           limit: avg 100/sec burst 100<br>ACCEPT     icmp –  0.0.0.0/0            0.0.0.0/0           limit: avg 1/sec burst 10<br>syn-flood  tcp  –  0.0.0.0/0            0.0.0.0/0           tcp flags:0x17/0x02<br>REJECT     all  –  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited<br>DROP       all  –  114.116.14.47        0.0.0.0/0<br>DROP       all  –  1.58.120.217         0.0.0.0/0</pre><br>执行脚本</p>
<p><pre class="lang:sh decode:true ">[root@VM-241 ~]# bash add_iptables.sh<br>已添加IP: 218.88.85.184 到防火墙丢弃策略中。<br>已添加IP: 122.227.51.102 到防火墙丢弃策略中。<br>已添加IP: 122.235.180.60 到防火墙丢弃策略中。<br>已添加IP: 122.95.241.64 到防火墙丢弃策略中。<br>已添加IP: 210.21.220.68 到防火墙丢弃策略中。<br>已添加IP: 106.226.24.23 到防火墙丢弃策略中。<br>已添加IP: 60.184.47.12 到防火墙丢弃策略中。<br>已添加IP: 220.113.94.30 到防火墙丢弃策略中。<br>已添加IP: 58.253.150.96 到防火墙丢弃策略中。<br>已添加IP: 110.81.117.78 到防火墙丢弃策略中。<br>已添加IP: 119.132.156.176 到防火墙丢弃策略中。<br>已添加IP: 220.171.210.251 到防火墙丢弃策略中。<br>已添加IP: 101.233.125.137 到防火墙丢弃策略中。<br>已添加IP: 60.162.152.102 到防火墙丢弃策略中。<br>已添加IP: 123.97.164.49 到防火墙丢弃策略中。<br>已添加IP: 114.83.216.53 到防火墙丢弃策略中。<br>已添加IP: 171.117.124.119 到防火墙丢弃策略中。<br>已添加IP: 58.254.4.13 到防火墙丢弃策略中。</pre><br>执行脚本后的iptables策略</p>
<p><pre class="lang:sh decode:true ">[root@VM-241 ~]# iptables -L -n<br>Chain INPUT (policy DROP)<br>target     prot opt source               destination<br>ACCEPT     all  –  0.0.0.0/0            0.0.0.0/0<br>ACCEPT     all  –  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:21<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:3690<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:443<br>ACCEPT     icmp –  0.0.0.0/0            0.0.0.0/0           limit: avg 100/sec burst 100<br>ACCEPT     icmp –  0.0.0.0/0            0.0.0.0/0           limit: avg 1/sec burst 10<br>syn-flood  tcp  –  0.0.0.0/0            0.0.0.0/0           tcp flags:0x17/0x02<br>REJECT     all  –  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited<br>DROP       all  –  114.116.14.47        0.0.0.0/0<br>DROP       all  –  1.58.120.217         0.0.0.0/0<br>DROP       all  –  218.88.85.184        0.0.0.0/0<br>DROP       all  –  122.227.51.102       0.0.0.0/0<br>DROP       all  –  122.235.180.60       0.0.0.0/0<br>DROP       all  –  122.95.241.64        0.0.0.0/0<br>DROP       all  –  210.21.220.68        0.0.0.0/0<br>DROP       all  –  106.226.24.23        0.0.0.0/0<br>DROP       all  –  60.184.47.12         0.0.0.0/0<br>DROP       all  –  220.113.94.30        0.0.0.0/0<br>DROP       all  –  58.253.150.96        0.0.0.0/0<br>DROP       all  –  110.81.117.78        0.0.0.0/0<br>DROP       all  –  119.132.156.176      0.0.0.0/0<br>DROP       all  –  220.171.210.251      0.0.0.0/0<br>DROP       all  –  101.233.125.137      0.0.0.0/0<br>DROP       all  –  60.162.152.102       0.0.0.0/0<br>DROP       all  –  123.97.164.49        0.0.0.0/0<br>DROP       all  –  114.83.216.53        0.0.0.0/0<br>DROP       all  –  171.117.124.119      0.0.0.0/0<br>DROP       all  –  58.254.4.13          0.0.0.0/0</pre><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装mongodb-enterprise-2.6]]></title>
      <url>http://yoursite.com/2015/12/08/install-mongodb-enterprise-2-6/</url>
      <content type="html"><![CDATA[<p>MongoDB社区版本和企业版本差异主要体现在安全认证、系统认证等方面，具体信息参考下表：</p>
<p><table></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td valign="top">版本特性</td></p>
<p><td valign="top">社区版本</td></p>
<p><td valign="top">企业版本</td><br></p>
<p><tr></tr></p>
<p><td valign="top">JSON数据模型、自由模式</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">水平扩展的自动分片功能</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">内置副本以及高可用性</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">完整的、可扩展的索引支撑</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">丰富的文档查询功能</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">快速的文档内更新</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">聚合框架和MapReduce</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">使用GridFS存储大量多媒体数据</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">文本搜索</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">云、预置和混合部署</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">基于角色的权限控制</td></p>
<p><td valign="top">支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">基于Kerberos先进的安全认证</td></p>
<p><td valign="top">不支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">预置监控</td></p>
<p><td valign="top">不支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">支持SNMP</td></p>
<p><td valign="top">不支持</td></p>
<p><td valign="top">支持</td><br></p>
<p><tr></tr></p>
<p><td valign="top">操作系统认证</td></p>
<p><td valign="top">不支持</td></p>
<p><td valign="top">支持</td><br><br><br><br>这里使用的是企业版，版本是2.6，新版3.2还在开发中。。。</p>
<h3 id="1-添加仓库"><a href="#1-添加仓库" class="headerlink" title="1.添加仓库"></a>1.添加仓库</h3><pre class="lang:sh decode:true ">[root@VM-248 ~]# vim /etc/yum.repos.d/mongodb-enterprise.repo
[mongodb-enterprise-2.6]
name=MongoDB Enterprise 2.6 Repository
baseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/2.6/$basearch/
gpgcheck=0
enabled=1</pre>

<h3 id="2-yum安装"><a href="#2-yum安装" class="headerlink" title="2.yum安装"></a>2.yum安装</h3><pre class="lang:sh decode:true ">[root@VM-248 ~]# yum install -y mongodb-enterprise
[root@VM-248 ~]# rpm -qa |grep mongodb
mongodb-enterprise-server-2.6.11-1.el6.x86_64
mongodb-enterprise-tools-2.6.11-1.el6.x86_64
mongodb-enterprise-2.6.11-1.el6.x86_64
mongodb-enterprise-shell-2.6.11-1.el6.x86_64
mongodb-enterprise-mongos-2.6.11-1.el6.x86_64</pre>

<h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h3><pre class="lang:sh decode:true ">[root@VM-248 ~]# egrep -v '^$|^#' /etc/mongod.conf
logpath=/var/log/mongodb/mongod.log
logappend=true
fork=true
dbpath=/var/lib/mongo
pidfilepath=/var/run/mongodb/mongod.pid
bind_ip=0.0.0.0
auth=true</pre>

<h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h3><pre class="lang:sh decode:true ">[root@VM-248 ~]# /etc/init.d/mongod start
[root@VM-248 ~]# chkconfig mongod  on</pre>

<h3 id="5-添加密码"><a href="#5-添加密码" class="headerlink" title="5.添加密码"></a>5.添加密码</h3><pre class="lang:sh decode:true ">[root@VM-248 ~]# mongo
MongoDB shell version: 2.6.11
connecting to: test
&gt; use admin
switched to db admin
&gt; db.addUser('root','password')
WARNING: The 'addUser' shell helper is DEPRECATED. Please use 'createUser' instead
Successfully added user: { "user" : "root", "roles" : [ "root" ] }
&gt; db.system.users.find()
{ "_id" : "admin.root", "user" : "root", "db" : "admin", "credentials" : { "MONGODB-CR" : "29e87d0a8716c4ae20efbcdd9d252f5b" }, "roles" : [ { "role" : "root", "db" : "admin" } ] }
&gt; exit
bye</pre>

<h3 id="6-删除密码"><a href="#6-删除密码" class="headerlink" title="6.删除密码"></a>6.删除密码</h3><pre class="lang:sh decode:true ">&gt; db.system.users.find()
{ "_id" : "test.root", "user" : "root", "db" : "test", "credentials" : { "MONGODB-CR" : "29e87d0a8716c4ae20efbcdd9d252f5b" }, "roles" : [ { "role" : "dbOwner", "db" : "test" } ] }
&gt; db.system.users.remove({user:"root"})
WriteResult({ "nRemoved" : 1 })
&gt; db.system.users.find()
&gt; exit
bye</pre>

<h3 id="7-远程连接"><a href="#7-远程连接" class="headerlink" title="7.远程连接"></a>7.远程连接</h3><p><pre class="lang:sh decode:true ">cenhuqing@cenhuqingdeMacBook-Pro ~$mongo vm248/admin -u root -p password<br>MongoDB shell version: 3.0.4<br>connecting to: vm248/admin<br>&gt; show dbs;<br>admin  0.078GB<br>local  0.078GB<br>&gt; exit<br>bye</pre><br>参考文章：<a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-enterprise-on-red-hat/" target="_blank" rel="external">https://docs.mongodb.org/manual/tutorial/install-mongodb-enterprise-on-red-hat/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix监控logstash的java]]></title>
      <url>http://yoursite.com/2015/11/16/zabbix-monitor-logstash-java/</url>
      <content type="html"><![CDATA[<p>Logstash 是一个运行在 JVM 上的软件，也就意味着 JMX 这种对 JVM 的通用监控方式对 Logstash 也是一样有效果的。要给 Logstash 启用 JMX，需要修改 ./bin/logstash.lib.sh 中 $JAVA_OPTS 变量的定义，或者在运行时设置 LS_JAVA_OPTS 环境变量。</p>
<p>在 ./bin/logstash.lib.sh 第 34 行 JAVA_OPTS=”$JAVA_OPTS -Djava.awt.headless=true” 下，添加如下几行：</p>
<pre class="lang:sh decode:true ">[root@monitor logstash]# vim bin/logstash.lib.sh
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=9010"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.local.only=false"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false"</pre>
<div>重启 logstash 服务，JMX 配置即可生效。</div>
<div>有 JMX 以后，我们可以通过 jconsole 界面查看，也可以通过 zabbix 等监控系统做长期监控。甚至 logstash 自己也有插件 logstash-input-jmx 来读取远程 JMX 数据。</div>
<div></div>
<div>注意，zabbix-server 本身并不直接对 JMX 发起请求，而是单独有一个 Java Gateway 作为中间代理层角色。zabbix-server 的 java poller 连接 zabbix-java-gateway，由 zabbix-java-gateway 去获取远程 JMX 信息。所以，在 zabbix-web 配置之前，需要先配置 zabbix server 相关进程和设置：</div>
<div></div>

### 1\. 安装zabbix-java-gateway

<div>
<pre class="lang:sh decode:true">[root@monitor logstash]# yum install http://repo.zabbix.com/zabbix/2.4/rhel/6/x86_64/zabbix-java-gateway-2.4.7-1.el6.x86_64.rpm</pre>

<h3 id="2-修改zabbix-server配置文件"><a href="#2-修改zabbix-server配置文件" class="headerlink" title="2. 修改zabbix_server配置文件"></a>2. 修改zabbix_server配置文件</h3><pre class="lang:sh decode:true ">[root@monitor logstash]# vim /usr/local/etc/zabbix_server.conf
JavaGateway=127.0.0.1
JavaGatewayPort=10052
StartJavaPollers=5</pre>

<h3 id="3-启动zabbix-jtva-gateway服务，重启logstash服务"><a href="#3-启动zabbix-jtva-gateway服务，重启logstash服务" class="headerlink" title="3. 启动zabbix-jtva-gateway服务，重启logstash服务"></a>3. 启动zabbix-jtva-gateway服务，重启logstash服务</h3><pre class="lang:sh decode:true ">[root@monitor logstash]# /etc/init.d/zabbix-java-gateway start
[root@monitor logstash]# /etc/init.d/logstash restart</pre>
<div>查看JMX监控端口</div>
<div>
<pre class="lang:sh decode:true ">[root@monitor logstash]# netstat -lutnp |grep 9010
tcp        0      0 0.0.0.0:9010                0.0.0.0:*                   LISTEN      11842/java</pre>

<h3 id="4-配置zabbix"><a href="#4-配置zabbix" class="headerlink" title="4. 配置zabbix"></a>4. 配置zabbix</h3><h5 id="4-1-选择监控JMX的主机"><a href="#4-1-选择监控JMX的主机" class="headerlink" title="4.1 选择监控JMX的主机"></a>4.1 选择监控JMX的主机</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-0@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-1@2x.png" alt=""></p>
<h5 id="4-2-添加JMX"><a href="#4-2-添加JMX" class="headerlink" title="4.2 添加JMX"></a>4.2 添加JMX</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-2@2x.png" alt=""></p>
<h5 id="4-3-添加项目"><a href="#4-3-添加项目" class="headerlink" title="4.3 添加项目"></a>4.3 添加项目</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-4@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-5@2x.png" alt=""></p>
<h5 id="4-4-创建图形"><a href="#4-4-创建图形" class="headerlink" title="4.4 创建图形"></a>4.4 创建图形</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-6@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-7@2x.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/11/QQ20151116-8@2x.png" alt=""></p>
<p></p></div><p></p>
<hr>
<p><span style="color: #ff0000;">错误如下：</span></p>
<p></p></div><p></p>
<div><img src="http://www.cenhq.com/wp-content/uploads/2015/11/1.jpg" alt=""></div><br><div><br><div>貌似无法连接java的9010端口，所以手动检测下</div><br><div>检测需要cmdline-jmxclient-0.10.3.jar</div><br><div>所以要先下载</div><br><div><br><pre class="lang:sh decode:true ">[root@monitor src]# wget <a href="http://crawler.archive.org/cmdline-jmxclient/cmdline-jmxclient-0.10.3.jar" target="_blank" rel="external">http://crawler.archive.org/cmdline-jmxclient/cmdline-jmxclient-0.10.3.jar</a></pre><br><pre class="lang:sh decode:true ">[root@monitor src]# java -jar cmdline-jmxclient-0.10.3.jar - 127.0.0.1:9010 java.lang:type=Memory NonHeapMemoryUsage<br>Exception in thread “main” java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: 127.0.0.1; nested exception is:<br>    java.net.ConnectException: 拒绝连接]<br>    at javax.management.remote.rmi.RMIConnector.connect(RMIConnector.java:369)<br>    at javax.management.remote.JMXConnectorFactory.connect(JMXConnectorFactory.java:270)<br>    at org.archive.jmx.Client.execute(Client.java:225)</pre><br>果然无法连接，最后查看端口没有监听。所以重启logstash服务，并实时查看错误日志。<br><pre class="lang:sh decode:true ">[root@monitor ~]# tailf /var/log/logstash/logstash.err<br>Errno::EACCES: Permission denied - /app/logstash-log/local6-5160-2015.11.16.log<br>     initialize at org/jruby/RubyFile.java:363<br>            new at org/jruby/RubyIO.java:853<br>           open at /opt/logstash/vendor/bundle/</pre><br>后来检查出来是自定义的配置文件有问题，移动配置文件，然后重启就可以了。<br><pre class="lang:sh decode:true ">[root@monitor src]# java -jar cmdline-jmxclient-0.10.3.jar - 127.0.0.1:9010 java.lang:type=Memory NonHeapMemoryUsage<br>11/16/2015 17:02:27 +0800 org.archive.jmx.Client NonHeapMemoryUsage:<br>committed: 62205952<br>init: 2555904<br>max: -1<br>used: 58527992</pre><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql数据目录迁移]]></title>
      <url>http://yoursite.com/2015/11/16/mysql-data-dir-move/</url>
      <content type="html"><![CDATA[<p>早上来看到磁盘容量不足而报警，看下目录数据，决定迁移mysql数据到另外空闲磁盘上。</p>
<p>mysql的数据目录位置是/data/，需要迁移到/app/目录下</p>
<p>实现步骤：</p>
<h3 id="1-停止mysql服务"><a href="#1-停止mysql服务" class="headerlink" title="1. 停止mysql服务"></a>1. 停止mysql服务</h3><pre class="lang:sh decode:true ">[root@monitor ~]# /etc/init.d/mysqld stop
Shutting down MySQL.... SUCCESS!</pre>

<h3 id="2-移动数据"><a href="#2-移动数据" class="headerlink" title="2. 移动数据"></a>2. 移动数据</h3><pre class="lang:sh decode:true ">[root@monitor ~]# mv /data/mysql/ /app/data/</pre>

<h3 id="3-修改主配置文件"><a href="#3-修改主配置文件" class="headerlink" title="3. 修改主配置文件"></a>3. 修改主配置文件</h3><pre class="lang:sh decode:true">[root@monitor ~]# vim /etc/my.cnf
[mysqld]
basedir = /usr/local/mysql
datadir = /app/data/mysql
pid-file = /app/data/mysql/mysql.pid</pre>

<h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4. 启动服务"></a>4. 启动服务</h3><p><pre class="lang:sh decode:true ">[root@monitor ~]# /etc/init.d/mysqld start<br>Starting MySQL. ERROR! The server quit without updating PID file (/app/data/mysql/mysql.pid).</pre><br>启动报错，解决办法，开启错误日志</p>
<p><pre class="lang:sh decode:true ">[root@monitor ~]# vim /etc/my.cnf<br>log_error = /app/data/mysql/mysql-error.log<br>slow_query_log_file = /app/data/mysql/mysql-slow.log<br></pre><br>由于日志路径未修改，导致出错。所以改完启动就可以了。</p>
<p><pre class="lang:sh decode:true ">[root@monitor ~]# /etc/init.d/mysqld start<br>Starting MySQL… SUCCESS!</pre><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis-Crackit漏洞测试]]></title>
      <url>http://yoursite.com/2015/11/12/redis-crackit-leak-testing/</url>
      <content type="html"><![CDATA[<p>目前redis crackit漏洞爆出可以通过系统shell登录。免密码的，所以这个是很严重的。</p>
<p>下面我自己测试了下，并有几条防范措施。</p>
<div>环境：</div><br><div>客户端：10.19.21.241</div><br><div>服务端：10.19.21.242（此服务器运行redis服务的用户是root，如果不是root不能测试。）</div><br><div></div>

<h3 id="1-首先客户端生成ssh-key"><a href="#1-首先客户端生成ssh-key" class="headerlink" title="1. 首先客户端生成ssh key"></a>1. 首先客户端生成ssh key</h3><div><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# ssh-keygen -t rsa -C “crackit@redis.io”<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>bb:16:6e:39:57:d4:b7:c0:dc:ed:05:80:a5:4e:7d:ae crackit@redis.io<br>The key’s randomart image is:<br>+–[ RSA 2048]—-+<br>|           oo.   |<br>|          .o  .  |<br>|          o +.o..|<br>|         o  .<em>..+|<br>|        S ..  ooo|<br>|        ..  .. ..|<br>|       ..o .E    |<br>|        </em>..      |<br>|       o.o       |<br>+—————–+</pre><br><br>### 2. 给公钥添加换行<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# (echo -e “\n\n”; cat /root/.ssh/id_rsa.pub; echo -e “\n\n”) &gt; redis.txt</pre><br><br>### 3. 清空服务器redis数据（慎重操作）<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# redis-cli -h 10.19.21.242 flushall<br>OK</pre><br><br>### 4. 将公钥写入到redis的key中<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# cat redis.txt |redis-cli -h 10.19.21.242 -x set redis<br>OK</pre><br><br>### 5. 连接redis服务器<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# redis-cli -h 10.19.21.242<br>redis 10.19.21.242:6379&gt; config set dir /root/.ssh #设置rdb存放路径<br>OK<br>redis 10.19.21.242:6379&gt; config set dbfilename “authorized_keys” #设置rdb文件的文件名<br>OK<br>redis 10.19.21.242:6379&gt; save<br>OK<br>redis 10.19.21.242:6379&gt; exit</pre><br><br>### 6. 尝试登录<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# ssh root@10.19.21.242<br>The authenticity of host ‘10.19.21.242 (10.19.21.242)’ can’t be established.<br>RSA key fingerprint is 12:79:d4:36:00:1d:de:48:13:bc:eb:e7:ca:83:84:c3.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘10.19.21.242’ (RSA) to the list of known hosts.<br>Last login: Wed Apr 15 19:16:22 2015 from 10.19.10.25<br>[root@VM-242 ~]#<br><br>查看公钥内容<br>[root@VM-242 ~]# cat /root/.ssh/authorized_keys<br>REDIS0002?redisA?<br><br>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwUkf3THelm1tARScEkGDZkHiixtBUiS7nW6ShdIcK0apiL+/7CYh/SrCX1k9X0+wFhhNbdQBdz+AIPpQA2UlhAogsj6YRR1vXYORumw2tRmAkxBifvsV/ZZs54u50O6NmMesZRfkzMqskoZCwNVKbzPWuXKmcrIyBnQzRp9NL7YjQXQnAqkD7btGjpdZZudqr/IUnkcS1i8dAbRnF0jQybrT8NnbiqOWVnuIhlXVgnASdI+Qq/p0w83HuuivXZLMMuIwfU9Tj30hV+haqatib1L0G+QyUBpgVmxuUZJrGlMsM+Nj15K8TIPeK4cQ419SbbJXrkqWX2fPok7+9iiD6w== crackit@redis.io<br><br>?[root@VM-242 ~]# exit</pre><br>这样表示这台服务器被外部控制<br><br>### 7. 如何防护<br><br>##### 7.1 在服务器端禁用flushall命令。<br><br><pre class="lang:sh decode:true">[root@VM-242 ~]# echo ‘rename-command flushall “”‘ &gt;&gt; /etc/redis.conf<br>[root@VM-242 ~]# /etc/init.d/redis restart</pre><br><br>##### 客户端测试<br><br><pre class="lang:sh decode:true ">[root@VM-241 ~]# redis-cli -h 10.19.21.242 flushall<br>(error) ERR unknown command ‘flushall’</pre><br><br>##### 7.2 服务器端设置redis的监听地址为127.0.0.1<br><br><div><br><pre class="lang:sh decode:true ">[root@VM-242 ~]# vim /etc/redis.conf<br>bind 127.0.0.1</pre><br><br>##### 7.3 建议不要用root用户运行。我是yum安装，默认启动用户是redis，为了测试，在服务里更改成root。大家测试也可以这么修改。<br><br><pre class="lang:sh decode:true ">[root@VM-242 ~]# vim /etc/init.d/redis<br>start() {<br>    [ -f $REDIS_CONFIG ] || exit 6<br>    [ -x $exec ] || exit 5<br>    echo -n $”Starting $name: “<br>    #daemon –user ${REDIS_USER-redis} “$exec $REDIS_CONFIG”<br>    daemon –user root  “$exec $REDIS_CONFIG”<br>    retval=$?<br>    echo<br>    [ $retval -eq 0 ] &amp;&amp; touch $lockfile<br>    return $retval<br>}</pre><br><br>##### 7.4 设置redis服务器密码<br><br><div><br><pre class="lang:sh decode:true ">[root@VM-242 ~]# echo “requirepass  xxoo” &gt;&gt; /etc/redis.conf</pre><br>&nbsp;<br><br></div><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ELK中展示用户位置]]></title>
      <url>http://yoursite.com/2015/10/29/elk-shown-in-the-users-location/</url>
      <content type="html"><![CDATA[<p>GeoIP 是最常见的免费 IP 地址归类查询库，同时也有收费版可以采购。GeoIP 库可以根据 IP 地址提供对应的地域信息，包括国别，省市，经纬度等，对于可视化地图和区域统计非常有用。</p>
<p>首先下载地图库</p>
<p><pre class="lang:sh decode:true ">[root@monitor src]# curl -O <a href="http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz" target="_blank" rel="external">http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz</a></pre><br>解压并移动到指定目录</p>
<p><pre class="lang:sh decode:true ">[root@monitor src]# gunzip GeoLiteCity.dat.gz<br>[root@monitor src]# mv GeoLiteCity.dat  /opt/logstash/vendor/geoip/</pre><br>编辑配置文件，filter里更改为如下内容：</p>
<p><pre class="lang:sh decode:true ">  if [type] == “nginx” {<br>    grok {<br>      match =&gt; { “message” =&gt; “%{NGINXACCESS}” }<br>    }<br>    geoip {<br>      source =&gt; “remote_addr”<br>      target =&gt; “geoip”<br>      database =&gt; “/opt/logstash/vendor/geoip/GeoLiteCity.dat”<br>      add_field =&gt; [ “[geoip][coordinates]”, “%{[geoip][longitude]}” ]<br>      add_field =&gt; [ “[geoip][coordinates]”, “%{[geoip][latitude]}”  ]<br>      remove_field =&gt; [ “[geoip][latitude]”, “[geoip][longitude]” ]<br>    }<br>    mutate {<br>      convert =&gt; [ “[geoip][coordinates]”, “float”]<br>    }<br>  }</pre><br>重启logstash服务</p>
<p><pre class="lang:sh decode:true ">[root@monitor geoip]# /etc/init.d/logstash restart<br>Killing logstash (pid 29959) with SIGTERM<br>Waiting logstash (pid 29959) to die…<br>Waiting logstash (pid 29959) to die…<br>logstash stopped.<br>logstash started.</pre><br>打开浏览器，查看日志新加入的field</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151029-0@2x.png" alt=""></p>
<p>创建可视化</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151029-1@2x.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建ELK(Logstash+Elasticsearch+Kibana)日志分析系统]]></title>
      <url>http://yoursite.com/2015/10/29/logstash-elasticsearch-kibana-analysis-system-build/</url>
      <content type="html"><![CDATA[<p>Logstash：负责日志的收集，处理和储存<br>Elasticsearch：负责日志检索和分析<br>Kibana：负责日志的可视化</p>
<h3 id="1-系统环境："><a href="#1-系统环境：" class="headerlink" title="1. 系统环境："></a>1. 系统环境：</h3><pre class="lang:sh decode:true ">[root@monitor ~]# cat /etc/redhat-release 
CentOS release 6.6 (Final)</pre>
检测主机名
<pre class="lang:sh decode:true ">[root@monitor ~]# hostname -f
monitor</pre>
安装java
<pre class="lang:sh decode:true ">[root@monitor ~]# yum install java-1.8.0-openjdk
查看java版本
[root@monitor ~]# java -version
openjdk version "1.8.0_65"
OpenJDK Runtime Environment (build 1.8.0_65-b17)
OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)</pre>

<h3 id="2-安装logstash"><a href="#2-安装logstash" class="headerlink" title="2. 安装logstash"></a>2. 安装logstash</h3><p>yum安装</p>
<pre class="lang:sh decode:true ">[root@monitor ~]# yum install https://download.elastic.co/logstash/logstash/packages/centos/logstash-1.5.4-1.noarch.rpm</pre>
创建证书
<pre class="lang:sh decode:true ">[root@monitor ~]# cd /etc/pki/tls
[root@monitor tls]# openssl req -subj '/CN=monitor/' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt
Generating a 2048 bit RSA private key
...................................................+++
...........................................................................................................+++
writing new private key to 'private/logstash-forwarder.key'
-----</pre>
同步证书到客户端
<pre class="lang:sh decode:true ">[root@monitor tls]# scp /etc/pki/tls/certs/logstash-forwarder.crt root@baicare:/etc/pki/tls/certs/</pre>
创建patterns目录，并编写nginx-grok
<pre class="lang:sh decode:true ">[root@monitor tls]# mkdir /opt/logstash/patterns
[root@monitor tls]# vim /opt/logstash/patterns/nginx
NGUSERNAME [a-zA-Z\.\@\-\+_%]+
NGUSER %{NGUSERNAME}
NGINXACCESS %{IPORHOST:slb_addr} - - \[%{HTTPDATE:time_local}\] "%{WORD:method} %{URIPATH:path}(?:%{URIPARAM:param})? HTTP/%{NUMBER:httpversion}" %{INT:status} %{INT:body_bytes_sent} %{QS:http_referer} %{QS:http_user_agent} "%{IPORHOST:remote_addr}"</pre>
编辑配置文件
<pre class="lang:sh decode:true">root@monitor tls]# vim /etc/logstash/conf.d/logstash.conf
input {
  lumberjack {
    port =&gt; 5000
    type =&gt; "logs"
    ssl_certificate =&gt; "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key =&gt; "/etc/pki/tls/private/logstash-forwarder.key"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match =&gt; { "message" =&gt; "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field =&gt; [ "received_at", "%{@timestamp}" ]
      add_field =&gt; [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match =&gt; [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  if [type] == "nginx" {
    grok {
       match =&gt; { "message" =&gt; "%{NGINXACCESS}" }
    }
  }
}

output {
  elasticsearch { host =&gt; localhost }
  stdout { codec =&gt; rubydebug }
</pre>
启动服务
<pre class="lang:sh decode:true ">[root@monitor ~]# /etc/init.d/logstash start
[root@monitor ~]# chkconfig logstash on</pre>

<h3 id="3-安装elasticsearch"><a href="#3-安装elasticsearch" class="headerlink" title="3. 安装elasticsearch"></a>3. 安装elasticsearch</h3><p>yum安装</p>
<pre class="lang:sh decode:true ">[root@monitor ~]# yum install https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.1.noarch.rpm</pre>
添加到开机启动，并启动服务
<pre class="lang:sh decode:true">[root@monitor ~]# chkconfig --add elasticsearch
[root@monitor ~]# service elasticsearch start
Starting elasticsearch:                                    [  OK  ]
[root@monitor ~]# netstat -lutnp |grep java
tcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      26898/java          
tcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      26898/java          
udp        0      0 0.0.0.0:54328               0.0.0.0:*                               26898/java          
</pre>
测试是否能正常访问
<pre class="lang:sh decode:true ">[root@monitor ~]# curl -X GET http://localhost:9200
{
  "status" : 200,
  "name" : "Conquistador",
  "cluster_name" : "elasticsearch",
  "version" : {
    "number" : "1.7.1",
    "build_hash" : "b88f43fc40b0bcd7f173a1f9ee2e97816de80b19",
    "build_timestamp" : "2015-07-29T09:54:16Z",
    "build_snapshot" : false,
    "lucene_version" : "4.10.4"
  },
  "tagline" : "You Know, for Search"
}</pre>

<h3 id="4-安装kibana"><a href="#4-安装kibana" class="headerlink" title="4.安装kibana"></a>4.安装kibana</h3><p>下载源码包</p>
<pre class="lang:sh decode:true ">[root@monitor ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.1-linux-x64.tar.gz</pre>
解压并重命名
<pre class="lang:sh decode:true ">[root@monitor ~]# tar xf kibana-4.1.1-linux-x64.tar.gz -C /usr/local/
[root@monitor ~]# mv /usr/local/kibana-4.1.1-linux-x64 /usr/local/kibana</pre>
编写启动脚本
<pre class="lang:sh decode:true">[root@monitor ~]# vim /etc/rc.d/init.d/kibana
#!/bin/bash
# BEGIN INIT INFO
# Provides:          kibana
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Runs kibana daemon
# Description: Runs the kibana daemon as a non-root user
### END INIT INFO

# Process name
NAME=kibana
DESC="Kibana4"
PROG="/etc/init.d/kibana"

# Configure location of Kibana bin
KIBANA_BIN=/usr/local/kibana/bin

# PID Info
PID_FOLDER=/var/run/kibana/
PID_FILE=/var/run/kibana/$NAME.pid
LOCK_FILE=/var/lock/subsys/$NAME
PATH=/bin:/usr/bin:/sbin:/usr/sbin:$KIBANA_BIN
DAEMON=$KIBANA_BIN/$NAME

# Configure User to run daemon process
DAEMON_USER=root
# Configure logging location
KIBANA_LOG=/var/log/kibana.log

# Begin Script
RETVAL=0

if [ `id -u` -ne 0 ]; then
        echo "You need root privileges to run this script"
        exit 1
fi

# Function library
. /etc/init.d/functions

start() {
        echo -n "Starting $DESC : "

pid=`pidofproc -p $PID_FILE kibana`
        if [ -n "$pid" ] ; then
                echo "Already running."
                exit 0
        else
        # Start Daemon
if [ ! -d "$PID_FOLDER" ] ; then
                        mkdir $PID_FOLDER
                fi
daemon --user=$DAEMON_USER --pidfile=$PID_FILE $DAEMON 1&gt;"$KIBANA_LOG" 2&gt;&amp;1 &amp;
                sleep 2
                pidofproc node &gt; $PID_FILE
                RETVAL=$?
                [[ $? -eq 0 ]] &amp;&amp; success || failure
echo
                [ $RETVAL = 0 ] &amp;&amp; touch $LOCK_FILE
                return $RETVAL
        fi
}

reload()
{
    echo "Reload command is not implemented for this service."
    return $RETVAL
}

stop() {
        echo -n "Stopping $DESC : "
        killproc -p $PID_FILE $DAEMON
        RETVAL=$?
echo
        [ $RETVAL = 0 ] &amp;&amp; rm -f $PID_FILE $LOCK_FILE
}

case "$1" in
  start)
        start
;;
  stop)
        stop
        ;;
  status)
        status -p $PID_FILE $DAEMON
        RETVAL=$?
        ;;
  restart)
        stop
        start
        ;;
  reload)
reload
;;
  *)
# Invalid Arguments, print the following message.
        echo "Usage: $0 {start|stop|status|restart}" &gt;&amp;2
exit 2
        ;;
esac</pre>
启动服务
<pre class="lang:sh decode:true ">[root@monitor local]# chmod +x /etc/rc.d/init.d/kibana
[root@monitor local]# /etc/init.d/kibana start
Starting Kibana4 :                                         [确定]
[root@monitor local]# chkconfig kibana on

[root@monitor local]# netstat -lutnp |grep java
tcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      26898/java          
tcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      26898/java          
udp        0      0 0.0.0.0:54328               0.0.0.0:*                               26898/java   
</pre>

<h3 id="5-配置nginx"><a href="#5-配置nginx" class="headerlink" title="5. 配置nginx"></a>5. 配置nginx</h3><p>编辑配置文件</p>
<pre class="lang:sh decode:true">[root@monitor vhost]# vim kibana.conf
server {
     listen 80;
     server_name kibana.baicare.com;

     location / {
         proxy_pass http://127.0.0.1:5601;
         root /usr/local/kibana/src;
         auth_basic "Restricted";
         auth_basic_user_file /usr/local/nginx/conf/kibana.htpasswd;
     }
}</pre>
创建登录账号密码
<pre class="lang:sh decode:true">[root@monitor geoip]# htpasswd -c /usr/local/nginx/conf/kibana.htpasswd charlie
New password: 
Re-type new password: 
Adding password for user charlie</pre>
启动服务
<pre class="lang:sh decode:true ">[root@monitor vhost]# nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@monitor vhost]# nginx -s reload</pre>

<h4 id="以上是服务器端配置，下面是客户端配置"><a href="#以上是服务器端配置，下面是客户端配置" class="headerlink" title="以上是服务器端配置，下面是客户端配置"></a><span style="color: #800000;">以上是服务器端配置，下面是客户端配置</span></h4><p>&nbsp;</p>
<h3 id="6-安装logstash-forwarder"><a href="#6-安装logstash-forwarder" class="headerlink" title="6. 安装logstash-forwarder"></a>6. 安装logstash-forwarder</h3><p>yum安装logstash-forwarder</p>
<p><pre class="lang:sh decode:true">[root@baicare ~]# yum install -y <a href="https://download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-0.4.0-1.x86_64.rpm" target="_blank" rel="external">https://download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-0.4.0-1.x86_64.rpm</a><br>[root@baicare ~]# cp /etc/logstash-forwarder.conf /etc/logstash-forwarder.conf.bak</pre><br>编辑配置</p>
<p><pre class="lang:sh decode:true ">{<br>  “network”: {<br>    “servers”: [ “monitor:5000” ],</pre></p>
<pre><code>&quot;ssl ca&quot;: &quot;/etc/pki/tls/certs/logstash-forwarder.crt&quot;,

&quot;timeout&quot;: 15
</code></pre><p>  },</p>
<p>  “files”: [<br>    {<br>      “paths”: [<br>        “/var/log/messages”,<br>        “/var/log/secure”<br>      ],<br>      “fields”: { “type”: “syslog” }<br>    }, {<br>      “paths”: [<br>        “/home/wwwlogs/access_nginx.log”<br>      ],<br>      “fields”: { “type”: “nginx” }<br>    }<br>  ]<br>}<br>启动服务</p>
<p><pre class="lang:sh decode:true ">[root@baicare src]# /etc/init.d/logstash-forwarder start<br>logstash-forwarder started</pre><br>然后打开浏览器，访问服务器（域名解析提前做好）</p>
<h3 id="7-配置索引模式"><a href="#7-配置索引模式" class="headerlink" title="7. 配置索引模式"></a>7. 配置索引模式</h3><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151029-2@2x.png" alt=""></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151029-3@2x.png" alt=""></p>
<p>&nbsp;</p>
<p>参考文章：</p>
<p>ELKstack 中文指南 - <a href="http://kibana.logstash.es/" target="_blank" rel="external">http://kibana.logstash.es/</a><br>三斗室 - <a href="http://chenlinux.com/" target="_blank" rel="external">http://chenlinux.com/</a><br>elastic - <a href="https://www.elastic.co/guide" target="_blank" rel="external">https://www.elastic.co/guide</a><br>LTMP索引 - <a href="http://wsgzao.github.io/index/#LTMP" target="_blank" rel="external">http://wsgzao.github.io/index/#LTMP</a></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[samba服务搭建]]></title>
      <url>http://yoursite.com/2015/10/23/samba-service-build/</url>
      <content type="html"><![CDATA[<div>好久没弄这个，今天朋友问我samba服务问题。又重新弄了一遍，加深下记忆。</div><br><div></div><br><div>系统：centos6.7</div><br><div></div>

<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# yum install -y samba samba-client</pre>

<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# vim /etc/samba/smb.conf
    [global]
    workgroup = MYGROUP
    server string = Samba Server Version %v
    #允许哪些网段访问共享服务
    hosts allow = 127\. 10.19.21\. 10.19.10.
    # logs split per machine
    log file = /var/log/samba/log.%m
    # max 50KB per log file, then rotate
    max log size = 50
    security = user
    passdb backend = tdbsam
    load printers = yes
    cups options = raw

    [homes]
    comment = Home Directories
    browseable = no
    writable = yes

    [printers]
    comment = All Printers
    path = /var/spool/samba
    browseable = no
    guest ok = no
    writable = no
    printable = yes

    [share] #共享名
    comment = Public Stuff #共享说明
    path = /home/share #共享路径
    public = no #不允许匿名登录
    writable = yes #可写
    printable = no #关闭打印服务
    write list = @user1 #可写用户组，多个可用空格分隔
    valid users = @user1 #有效的用户组，多个可用空格分隔
    browseable = yes #用户可浏览</pre>

<h3 id="3-测试配置文件语法"><a href="#3-测试配置文件语法" class="headerlink" title="3. 测试配置文件语法"></a>3. 测试配置文件语法</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# testparm
Load smb config files from /etc/samba/smb.conf
Processing section "[homes]"
Processing section "[printers]"
Processing section "[share]"
Loaded services file OK.
Server role: ROLE_STANDALONE
Press enter to see a dump of your service definitions

[global]
    workgroup = MYGROUP
    server string = Samba Server Version %v
    log file = /var/log/samba/log.%m
    max log size = 50
    idmap config * : backend = tdb
    hosts allow = 127., 10.19.21., 10.19.10.
    cups options = raw

[homes]
    comment = Home Directories
    read only = No
    browseable = No

[printers]
    comment = All Printers
    path = /var/spool/samba
    printable = Yes
    print ok = Yes
    browseable = No

[share]
    comment = Public Stuff
    path = /home/share
    write list = @user1
    read only = No</pre>

<h3 id="4-创建系统用户和smb密码"><a href="#4-创建系统用户和smb密码" class="headerlink" title="4. 创建系统用户和smb密码"></a>4. 创建系统用户和smb密码</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# useradd  user1
[root@VM-241 ~]# smbpasswd -a user1
New SMB password:
Retype new SMB password:</pre>

<h3 id="5-创建共享目录"><a href="#5-创建共享目录" class="headerlink" title="5. 创建共享目录"></a>5. 创建共享目录</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# mkdir /home/share
[root@VM-241 ~]# chmod 777 /home/share</pre>

<h3 id="6-现在本机测试"><a href="#6-现在本机测试" class="headerlink" title="6. 现在本机测试"></a>6. 现在本机测试</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# smbclient //localhost/share -U user1
Enter user1's password:
Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-20.el6]
smb: \&gt; put hello.py
putting file hello.py as \hello.py (22.4 kb/s) (average 22.4 kb/s)
smb: \&gt; ls
  .                                   D        0  Fri Oct 23 14:02:34 2015
  ..                                  D        0  Fri Oct 23 13:59:57 2015
  hello.py                            A      321  Fri Oct 23 14:02:34 2015

        35036 blocks of size 524288\. 20525 blocks available
smb: \&gt; exit</pre>

<h3 id="7-客户端连接"><a href="#7-客户端连接" class="headerlink" title="7. 客户端连接"></a>7. 客户端连接</h3><h5 id="7-1-测试客户端是mac，所以打开Finder-菜单里找到”前往”—-gt-”连接服务器”、或者运行command-k命令"><a href="#7-1-测试客户端是mac，所以打开Finder-菜单里找到”前往”—-gt-”连接服务器”、或者运行command-k命令" class="headerlink" title="7.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令"></a>7.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-0@2x.png" alt=""></p>
<h5 id="7-2-输入用户名和密码"><a href="#7-2-输入用户名和密码" class="headerlink" title="7.2 输入用户名和密码"></a>7.2 输入用户名和密码</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-1@2x.png" alt=""></p>
<h5 id="7-3-查看刚上传的共享文件"><a href="#7-3-查看刚上传的共享文件" class="headerlink" title="7.3 查看刚上传的共享文件"></a>7.3 查看刚上传的共享文件</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-2@2x.png" alt=""></p>
<h5 id="7-4-从客户端添加文件"><a href="#7-4-从客户端添加文件" class="headerlink" title="7.4 从客户端添加文件"></a>7.4 从客户端添加文件</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-3@2x.png" alt=""></p>
<h5 id="7-5-到服务器上查看"><a href="#7-5-到服务器上查看" class="headerlink" title="7.5 到服务器上查看"></a>7.5 到服务器上查看</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-4@2x.png" alt=""></p>
<h3 id="8-添加匿名用户访问"><a href="#8-添加匿名用户访问" class="headerlink" title="8.添加匿名用户访问"></a>8.添加匿名用户访问</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# vim /etc/samba/smb.conf
        [global]
        ...
        security = user
        passdb backend = tdbsam
        map to guest = bad user #允许匿名访问
        ...

        [public]
        comment = Public Stuff
        path = /home/public
        public = yes
        writable = yes
        printable = no
        guest ok = yes #允许匿名访问</pre>

<h3 id="9-创建共享目录和添加权限"><a href="#9-创建共享目录和添加权限" class="headerlink" title="9.创建共享目录和添加权限"></a>9.创建共享目录和添加权限</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# mkdir /home/public
[root@VM-241 ~]# chmod 777 /home/public</pre>

<h3 id="10-重启服务"><a href="#10-重启服务" class="headerlink" title="10.重启服务"></a>10.重启服务</h3><pre class="lang:sh decode:true">[root@VM-241 ~]# /etc/init.d/smb restart</pre>

<h3 id="11-服务器本地测试"><a href="#11-服务器本地测试" class="headerlink" title="11.服务器本地测试"></a>11.服务器本地测试</h3><pre class="lang:sh decode:true ">[root@VM-241 ~]# smbclient //localhost/public
Enter guest's password:
Anonymous login successful
Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-20.el6]
smb: \&gt; ls
  .                                   D        0  Fri Oct 23 15:16:05 2015
  ..                                  D        0  Fri Oct 23 15:16:05 2015

        35036 blocks of size 524288\. 20524 blocks available
            list.txt            .ssh/
smb: \&gt; put md5.txt
putting file md5.txt as \md5.txt (8.8 kb/s) (average 8.8 kb/s)
smb: \&gt; ls
  .                                   D        0  Fri Oct 23 15:17:00 2015
  ..                                  D        0  Fri Oct 23 15:16:05 2015
  md5.txt                             A      153  Fri Oct 23 15:17:00 2015

        35036 blocks of size 524288\. 20524 blocks available</pre>

<h3 id="12-客户端测试"><a href="#12-客户端测试" class="headerlink" title="12.客户端测试"></a>12.客户端测试</h3><h5 id="12-1-测试客户端是mac，所以打开Finder-菜单里找到”前往”—-gt-”连接服务器”、或者运行command-k命令"><a href="#12-1-测试客户端是mac，所以打开Finder-菜单里找到”前往”—-gt-”连接服务器”、或者运行command-k命令" class="headerlink" title="12.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令"></a>12.1 测试客户端是mac，所以打开Finder, 菜单里找到”前往”—&gt;”连接服务器”、或者运行command+k命令</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-5@2x.png" alt=""></p>
<h5 id="12-2-匿名访问，选择”客人”"><a href="#12-2-匿名访问，选择”客人”" class="headerlink" title="12.2 匿名访问，选择”客人”"></a>12.2 匿名访问，选择”客人”</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151026-0@2x.png" alt=""></p>
<h5 id="12-3-查看结果"><a href="#12-3-查看结果" class="headerlink" title="12.3 查看结果"></a>12.3 查看结果</h5><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151023-9@2x.png" alt=""></p>
<hr>
<p>&nbsp;</p>
<h3 id="13-samba参数详解"><a href="#13-samba参数详解" class="headerlink" title="13. samba参数详解"></a>13. samba参数详解</h3><p><pre class="lang:sh decode:true ">        [share] # 该共享的共享名<br>        comment = smb share test # 该共享的备注<br>        path = /home/share # 共享路径<br>        allow hosts = host(subnet) # 设置该Samba服务器允许的工作组或者域<br>        deny hosts = host(subnet) # 设置该Samba服务器拒绝的工作组或者域<br>        available = yes|no # 设置该共享目录是否可用<br>        browseable = yes|no # 设置该共享目录是否可显示<br>        writable = yes|no # 指定了这个目录缺省是否可写，也可以用readonly = no来设置可写<br>        public = yes|no # 指明该共享资源是否能给游客帐号访问，guest ok = yes其实和public = yes是一样的<br>        user = user, @group # user设置所有可能使用该共享资源的用户，也可以用@group代表group这个组的所有成员，不同的项目之间用空格或者逗号隔开<br>        valid users = user, @group # 指定能够使用该共享资源的用户和组<br>        invalid users = user, @group # 指定不能够使用该共享资源的用户和组<br>        read list = user, @group # 指定只能读取该共享资源的用户和组<br>        write list = user, @group # 指定能读取和写该共享资源的用户和组<br>        admin list = user, @group # 指定能管理该共享资源（包括读写和权限赋予等）的用户和组<br>        hide dot files = yes|no # 指明是否像UNIX那样隐藏以“.”号开头的文件<br>        create mode = 0755 # 指明新建立的文件的属性，一般是0755<br>        directory mode = 0755 # 指明新建立的目录的属性，一般是0755<br>        sync always = yes|no # 指明对该共享资源进行写操作后是否进行同步操作<br>        short preserve case = yes|no # 指明是否区分文件名大小写<br>        preserve case = yes|no # 指明是否保持大小写<br>        case sensitive = yes|no # 指明是否对大小写敏感，一般选no，不然可能引起错误<br>        mangle case = yes|no # 指明混合大小写<br>        default case = upper|lower # 指明缺省的文件名是全部大写还是小写<br>        force user = testuser # 强制把建立文件的属主是谁。如果我有一个目录，让guest可以写，那么guest就可以删除，如果我用force user= testuser强制建立文件的属主是testuser，同时限制create mask = 0755，这样guest就不能删除了<br>        wide links = yes|no # 指明是否允许共享外符号连接，比如共享资源里面有个连接指向非共享资源里面的文件或者目录，如果设置wide links = no将使该连接不可用<br>        max connections = 100 # 设定最大同时连接数<br>        delete readonly = yes|no # 指明能否删除共享资源里面已经被定义为只读的文件</pre><br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hero]]></title>
      <url>http://yoursite.com/2015/10/23/hero/</url>
      <content type="html"><![CDATA[<p>在网易云音乐里偶然听见这首歌，第一遍感觉还不错，多听几遍也许你会喜欢，旋律很美。</p>
<p>共享出来，给大家欣赏下</p>
<p>[embed]<a href="http://www.cenhq.com/wp-content/uploads/2015/10/Family-of-the-Year-Hero.mp3[/embed" target="_blank" rel="external">http://www.cenhq.com/wp-content/uploads/2015/10/Family-of-the-Year-Hero.mp3[/embed</a>]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress添加ClustrMaps]]></title>
      <url>http://yoursite.com/2015/10/16/wordpress-add-clustrmaps/</url>
      <content type="html"><![CDATA[<p>首先到<a href="http://www.clustrmaps.com/zh/index.htm" target="_blank" rel="external">http://www.clustrmaps.com/zh/index.htm</a>生成自己的地图</p>
<div>然后注册登录账号，获取地图代码</div><br><div></div><br><div>根据主题布局放置代码位置，这里我放在右侧。</div><br><div>编辑文件sidebar-right.php,添加以下内容：</div><br><div><br><pre class="lang:php decode:true ">&lt;!–ClusterMap–&gt;<br>&lt;aside class=”widget”&gt;&lt;h3 class=”widget-title”&gt;统计&lt;/h3&gt;&lt;div id=”clustrmaps-widget”&gt;&lt;/div&gt;&lt;script type=”text/javascript”&gt;var _clustrmaps = {‘url’ : ‘<a href="http://www.cenhq.com" target="_blank" rel="external">http://www.cenhq.com</a>‘, ‘user’ : 1181037, ‘server’ : ‘3’, ‘id’ : ‘clustrmaps-widget’, ‘version’ : 1, ‘date’ : ‘2015-10-16’, ‘lang’ : ‘zh’, ‘corners’ : ‘square’ };(function (){ var s = document.createElement(‘script’); s.type = ‘text/javascript’; s.async = true; s.src = ‘<a href="http://www3.clustrmaps.com/counter/map.js" target="_blank" rel="external">http://www3.clustrmaps.com/counter/map.js</a>‘; var x = document.getElementsByTagName(‘script’)[0]; x.parentNode.insertBefore(s, x);})();&lt;/script&gt;&lt;noscript&gt;&lt;a href=”<a href="http://www3.clustrmaps.com/user/f5e12056d&quot;&gt;&lt;img" target="_blank" rel="external">http://www3.clustrmaps.com/user/f5e12056d&quot;&gt;&lt;img</a> src=”<a href="http://www3.clustrmaps.com/stats/maps-no_clusters/www.cenhq.com-thumb.jpg" target="_blank" rel="external">http://www3.clustrmaps.com/stats/maps-no_clusters/www.cenhq.com-thumb.jpg</a>“ alt=”Locations of visitors to this page” /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/aside&gt;</pre><br><div>效果显示：</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151016-3@2x.png" alt=""></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress添加CNZZ统计]]></title>
      <url>http://yoursite.com/2015/10/16/wordpress-add-cnzz/</url>
      <content type="html"><![CDATA[<div>首先注册cnzz用户，并绑定网站域名</div><br><div></div><br><div>获取统计代码，复制代码到主题里的footer.php文件里</div><br><div></div><br><div>然后位置显示有问题</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151016-0@2x.png" alt=""></div><br><div></div><br><div><br><div>我想把图标移动到wordpress后面</div><br><div></div><br><div>首先注释footer.php里的CNZZ统计代码</div><br><div></div><br><div>然后编辑文件library/structure/footer-extensions.php</div><br><div></div><br><div>编辑后的内容如下：</div><br><div><br><pre class="lang:php decode:true ">function travelify_footer_info() {<br>     echo ‘&lt;div class=”copyright”&gt;’;<br>     echo <strong>( ‘Copyright &amp;copy;’, ‘travelify’ );<br>     echo ‘ ‘.date(‘Y’);<br>     echo ‘ ‘.travelify_site_link();<br>     echo ‘. ‘.</strong>( ‘Theme by’, ‘travelify’ );<br>     echo ‘ ‘.travelify_colorlib_link(    );<br>     echo ‘ ‘.__( ‘Powered by’, ‘travelify’ );<br>     echo ‘ ‘.travelify_wp_link();<br>     echo ‘&lt;div class=”cnzz_tj” style=”<br>    display: inline-block;<br>    vertical-align: middle;<br>    margin-left: 5px;<br>    line-height: 13px;<br>“&gt;统计使用：’;<br>     echo ‘&lt;script type=”text/javascript”&gt;var cnzz_protocol = ((“https:” == document.location.protocol) ? “ https://“ : “ <a href="http://&quot;);document.write(unescape(&quot;%3Cspan" target="_blank" rel="external">http://&quot;);document.write(unescape(&quot;%3Cspan</a> id=\’cnzz_stat_icon_1256550401\’%3E%3C/span%3E%3Cscript src=\’” + cnzz_protocol + “s4.cnzz.com/z_stat.php%3Fid%3D1256550401%26show%3Dpic\’ type=\’text/javascript\’%3E%3C/script%3E”));&lt;/script&gt;’;<br>     echo ‘&lt;/div&gt;’;<br>     echo ‘&lt;/div&gt;&lt;!– .copyright –&gt;’;<br>  }</pre><br>保存后刷新页面<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151016-2@2x.png" alt=""><br><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress添加悬浮文章索引]]></title>
      <url>http://yoursite.com/2015/10/15/wordpress-add-suspended-the-index/</url>
      <content type="html"><![CDATA[<p>文章索引相当于文章目录，点击目录自动跳转到相应位置，这就需要你的文章有小标题，像我经常用h3标签来做小标题，这样所有的h3标签就能形成一个索引目录。我们要做的就是把h3标签自动识别出来并组装成一个目录，好了，开始实现方法。</p>
<h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p>在文章里必须有h3标签，每一个三级标题都会成为索引中的一项。将下面的代码放到function.php中，就会在你的文章中自动生成一个索引。</p>
<p>修改functions.php文件，添加如下内容：</p>
<pre class="lang:php decode:true">function article_nav($content)
{
    $matches = array();
    $ul_li = '';
    $r = "/&lt;h3&gt;(.*?)&lt;\/h3&gt;/im";
    if (preg_match_all($r, $content, $matches)) {
        foreach ($matches[1] as $num =&gt; $title) {
            $content = str_replace($matches[0][$num], '&lt;h2 id="article_nav_' . $num . '"&gt;' . $title . '&lt;/h2&gt;', $content);
            $ul_li .= '&lt;li&gt;&lt;a href="#article_nav_' . $num . '" title="' . $title . '"&gt;' . $title . "&lt;/a&gt;&lt;/li&gt;";
        }
        if (is_singular()) {
            $content = '&lt;div id="fn_article_nav"&gt;&lt;div id="article_nav_title"&gt;[文章目录]&lt;/div&gt;&lt;ul&gt;'
                . $ul_li . '&lt;li&gt;&lt;a href="#respond"&gt;发表评论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;' . $content;
        }
    }
    return $content;
}
add_filter("the_content", "article_nav");</pre>

<h4 id="索引样式"><a href="#索引样式" class="headerlink" title="索引样式"></a>索引样式</h4><p>索引是生成了，但是只是在文章中的一个普通ul list，我们要做的是把他独立出来，所以只需要为它写一个css样式就好了。推荐用position:fixed把他固定到左边或者右边，下方提供了一个参考样式（见上图），可以根据自己的情况去修改。</p>
<p>修改style.css文件，添加以下内容：</p>
<pre class="lang:css decode:true">/* 文章目录 */
#article_nav_title{font-size:12px;text-align:center;line-height:15px;color:#cc0000;border-left:3px #cc0000 solid;border-bottom:1px #aaa dotted}
#fn_article_nav{position:fixed;left:5px;top:140px;background-color:rgba(255,255,255,.55);border-radius: 0 3px 3px 0;box-shadow:0 0 2px #aaa}
#fn_article_nav ul{padding:0!important;margin:0px!important}
#fn_article_nav li{list-style:none;padding:3px;width:100px;margin:0;background: url("images/li.png") no-repeat scroll 0 5px transparent!important;text-indent: 1.6em;font-size:12px}</pre>

<h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-14@2x.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix使用微信报警]]></title>
      <url>http://yoursite.com/2015/10/15/zabbix-add-webchat-alarm/</url>
      <content type="html"><![CDATA[<h3 id="1-注册微信公众号"><a href="#1-注册微信公众号" class="headerlink" title="1.注册微信公众号"></a>1.注册微信公众号</h3><div></div><br><div>首先到微信公众平台<a href="https://mp.weixin.qq.com" target="_blank" rel="external">https://mp.weixin.qq.com</a>申请</div><br><div></div><br><div>然后登录，手机客户端扫描二维码，并加关注就可以了</div><br><div></div><br><div>然后就可以看到用户数</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-7@2x.png" alt=""></div><br><div>点击用户数，并点击用户，可以看到用户的tofakeid，这个ID就是zabbix将发送报警信息到这个账号。</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-10@2x.png" alt=""></div><br><div><br><div>可以在URL里看到这个ID</div><br><div><a href="https://mp.weixin.qq.com/cgi-bin/singlesendpage?tofakeid=353131080&amp;t=message/send&amp;action=index&amp;token=1007714535&amp;lang=zh_CN" target="_blank" rel="external">https://mp.weixin.qq.com/cgi-bin/singlesendpage?tofakeid=<span style="color: #ff0000;">353131080</span>&amp;t=message/send&amp;action=index&amp;token=1007714535&amp;lang=zh_CN</a></div><br><div></div><br></div><br><div><br><br>### 2.下载微信公众平台私有接口<br><br><div></div>

<h4 id="2-1-进入zabbix报警目录，下载文件"><a href="#2-1-进入zabbix报警目录，下载文件" class="headerlink" title="2.1 进入zabbix报警目录，下载文件"></a>2.1 进入zabbix报警目录，下载文件</h4><pre class="lang:sh decode:true ">[root@monitor ~]# cd /usr/local/share/zabbix/alertscripts
[root@monitor alertscripts]# git clone https://github.com/lealife/WeiXin-Private-API
Initialized empty Git repository in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/.git/
remote: Counting objects: 172, done.
remote: Total 172 (delta 0), reused 0 (delta 0), pack-reused 172
Receiving objects: 100% (172/172), 36.94 KiB, done.
Resolving deltas: 100% (72/72), done.</pre>

<h4 id="2-2-修改配置文件"><a href="#2-2-修改配置文件" class="headerlink" title="2.2 修改配置文件"></a>2.2 修改配置文件</h4><pre class="lang:sh decode:true">[root@monitor alertscripts]# vim WeiXin-Private-API/config.php

&lt;?php

// 全局配置

$G_ROOT = dirname(__FILE__);

$G_CONFIG["weiXin"] = array(
        'account' =&gt; '微信公众登录账号',
        'password' =&gt; '微信公众登录密码',
        'cookiePath' =&gt; $G_ROOT. '/cache/cookie', // cookie缓存文件路径
        'webTokenPath' =&gt; $G_ROOT. '/cache/webToken', // webToken缓存文件路径
);

[root@monitor alertscripts]# vim WeiXin-Private-API/test.php

&lt;?php
require "config.php";
require "include/WeiXin.php";

$weiXin = new WeiXin($G_CONFIG['weiXin']);

$testFakeId = "$argv[1]";
$msg = "$argv[3]";
 print_r($weiXin-&gt;send($testFakeId, "$msg"));</pre>
<span style="color: #ff00ff;">注意</span>：这里$msg="$argv[3]"表示zabbix传入的第三个参数，因为在zabbix报警时会传入三个参数：一是微信好友ID，二是报警信息的主题，三是报警信息的具体内容，这里跳过了报警信息主题，直接发送报警信息内容

#### 2.3 创建报警脚本

<pre class="lang:sh decode:true ">[root@monitor alertscripts]# vim weixin
/usr/local/php/bin/php /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/test.php "$1" "$2" "$3"</pre>

<h4 id="2-4-修改权限"><a href="#2-4-修改权限" class="headerlink" title="2.4 修改权限"></a>2.4 修改权限</h4><pre class="lang:sh decode:true ">[root@monitor alertscripts]# chown www. weixin WeiXin-Private-API -R
[root@monitor alertscripts]# chmod +x weixin</pre>

<h4 id="2-5-测试脚本"><a href="#2-5-测试脚本" class="headerlink" title="2.5 测试脚本"></a>2.5 测试脚本</h4><pre class="lang:sh decode:true ">[root@monitor alertscripts]# ./weixin 353131080 "" "hello weixin"
PHP Notice:  curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32

Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32
PHP Notice:  Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33

Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33
PHP Notice:  curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32

Notice: curl_setopt(): CURLOPT_SSL_VERIFYHOST with value 1 is deprecated and will be removed as of libcurl 7.28.1\. It is recommended to use value 2 instead in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 32
PHP Notice:  Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33

Notice: Undefined index: HTTP_USER_AGENT in /usr/local/share/zabbix/alertscripts/WeiXin-Private-API/include/LeaWeiXinClient.php on line 33
stdClass Object
(
    [base_resp] =&gt; stdClass Object
        (
            [ret] =&gt; 0
            [err_msg] =&gt; ok
        )

)</pre>

<h4 id="2-6-查看结果"><a href="#2-6-查看结果" class="headerlink" title="2.6 查看结果"></a>2.6 查看结果</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-11@2x.png" alt=""></p>
<p></p></div><p></p>
<div></div><br><div><br><br>### 3.配置zabbix<br><br><div></div>

<h4 id="3-1-创建媒体类型"><a href="#3-1-创建媒体类型" class="headerlink" title="3.1 创建媒体类型"></a>3.1 创建媒体类型</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-0@2x.png" alt=""></p>
<h4 id="3-2-填写脚本名称"><a href="#3-2-填写脚本名称" class="headerlink" title="3.2 填写脚本名称"></a>3.2 填写脚本名称</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-1@2x.png" alt=""></p>
<h4 id="3-3-编辑用户"><a href="#3-3-编辑用户" class="headerlink" title="3.3 编辑用户"></a>3.3 编辑用户</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-2@2x.png" alt=""></p>
<h4 id="3-4-添加weixin脚本"><a href="#3-4-添加weixin脚本" class="headerlink" title="3.4 添加weixin脚本"></a>3.4 添加weixin脚本</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-3@2x.png" alt=""></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-4@2x.png" alt=""></p>
<h4 id="3-5-编辑动作"><a href="#3-5-编辑动作" class="headerlink" title="3.5 编辑动作"></a>3.5 编辑动作</h4><p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-5@2x.png" alt=""></p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-6@2x.png" alt=""></p>
<p></p></div><p></p>
<h3 id="4-测试报警"><a href="#4-测试报警" class="headerlink" title="4.测试报警"></a>4.测试报警</h3><div>停掉mongoldb服务</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151015-13@2x.png" alt=""></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WP-Postviews使用]]></title>
      <url>http://yoursite.com/2015/10/12/wp-postviews-method-of-use/</url>
      <content type="html"><![CDATA[<p>今天换了个主题，顺便把浏览次数在文章下显示效果弄出来。</p>
<p>首先到插件里下载</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151012-2@2x.jpg" alt=""></p>
<p>然后启用该插件</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151012-1@2x.jpg" alt=""></p>
<p>到设置里找到postviews</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151012-3@2x.jpg" alt=""></p>
<div>1）Count Views From: 设置统计数据来源，可选项：所有人、仅访客、仅注册用户，默认：仅访客。</div><br><div></div><br><div>2）Exclude Bot Views: 是否排除搜索机器人（搜索引擎蜘蛛程序）的浏览数量，可选项：是、否，默认：否。</div><br><div></div><br><div>3）Views Template: 浏览数统计的显示模板，默认是：%VIEW_COUNT% views ，%VIEW_COUNT%变量表示浏览次数，views是固定显示文本。比如，默认会显示为“3 views”，我们可以更改其显示样式，如果要显示为“热度：3度”，我们可以将其改为“热度：%VIEW_COUNT%度”。</div><br><div></div><br><div>4）Most viewed Template: 网站Widget（微件）显示热门文章列表的模板。默认HTML格式是：&lt;li&gt;&lt;a href=”%POST_URL%” title=”%POST_TITLE%”&gt;%POST_TITLE%&lt;/a&gt; - %VIEW_COUNT% views&lt;/li&gt;。其中，%POST_URL%是文章地址，%POST_TITLE%文章标题，%VIEW_COUNT%是浏览次数。我们可以更改成为自己想要的样式，比如个人博客的样式为：&lt;li&gt;&lt;a href=”%POST_URL%”&gt;%POST_TITLE%&lt;/a&gt;&lt;cite&gt;(%VIEW_COUNT%)&lt;/cite&gt;&lt;/li&gt;，完全根据自己需求来设置。</div><br><div></div><br><div>5）Display Options: 设置哪些页面可以显示浏览数统计，也可以指定给哪些人显示。其中，页面包括“Home page”主页、“single Posts”文章页、“Pages”页面、“Archive Pages”分类目录归档页、“Search Pages”搜索页、“Other Pages”其它页面，都可以独立配置。另个，每个配置下面都有三个选项可供选择：“Display to everyone”显示给所有人、“Display to registered users only”只显示给注册用户、“Don’t display on archive pages”不显示。</div><br><div></div><br><div>6）Uninstall WP-PostViews：WP-Postviews插件卸载。执行卸载后，WordPress Options/PostMetas数据表中的相关插件信息也将删除掉。</div><br><div></div><br><div><br><div><strong>WP-Postviews插件使用方法：调用日志浏览统计</strong></div><br><div></div><br><div>这是WP-Postviews插件的基本使用方法。如果想在你的主题上实现文章点击数，办法很简单，只需要在你的主题模板single.php或loop的相应位置加入以下代码即可：</div><br><div><br><pre class="lang:php decode:true ">&lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt;</pre><br>本人使用该方法：<br><pre class="lang:sh decode:true">cd /data/www/wwwroot/cenhq/wp-content/themes/travelify<br>vim library/structure/content-extensions.php<br>#修改一下内容，找到the_posts，在category后面添加代码，我列出的比较多。’…’为省略内容<br>function travelify_theloop_for_archive() {<br>    global $post;<br><br>    if( have_posts() ) {<br>        while( have_posts() ) {<br>            the_post();<br><br>            do_action( ‘travelify_before_post’ );<br>?&gt;<br>…<br>…<br>…<br>    &lt;div class=”entry-meta-bar clearfix”&gt;<br>                &lt;div class=”entry-meta”&gt;<br>                        &lt;?php travelify_posted_on(); ?&gt;<br>                        &lt;?php if( has_category() ) { ?&gt;<br>                        &lt;span class=”category”&gt;&lt;?php the_category(‘, ‘); ?&gt;&lt;/span&gt;<br>                    &lt;?php } ?&gt;<br>                        &lt;?php if ( comments_open() ) { ?&gt;<br>                        &lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt;<br>                        &lt;span class=”comments”&gt;&lt;?php comments_popup_link( <strong>( ‘No Comments’, ‘travelify’ ), </strong>( ‘1 Comment’, ‘travelify’ ), <strong>( ‘% Comments’, ‘travelify’ ), ‘’, </strong>( ‘Comments Off’, ‘travelify’ ) ); ?&gt;&lt;/span&gt;<br>                    &lt;?php } ?&gt;<br>                &lt;/div&gt;&lt;!– .entry-meta –&gt;<br>                &lt;?php<br>                echo ‘&lt;a class=”readmore” href=”‘ . get_permalink() . ‘“ title=”‘.the_title( ‘’, ‘’, false ).’”&gt;’.<strong>( ‘Read more’, ‘travelify’ ).’&lt;/a&gt;’;<br>                ?&gt;<br>            &lt;/div&gt;<br><br>function travelify_theloop_for_single() {<br>    global $post;<br><br>    if( have_posts() ) {<br>        while( have_posts() ) {<br>            the_post();<br><br>            do_action( ‘travelify_before_post’ );<br>?&gt;<br>…<br>…<br>…<br>    &lt;div class=”entry-meta-bar clearfix”&gt;<br>                &lt;div class=”entry-meta”&gt;<br>                        &lt;?php travelify_posted_on(); ?&gt;<br>                        &lt;?php if( has_category() ) { ?&gt;<br>                        &lt;span class=”category”&gt;&lt;?php the_category(‘, ‘); ?&gt;&lt;/span&gt;<br>                    &lt;?php } ?&gt;<br>                        &lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt;<br>                        &lt;?php if ( comments_open() ) { ?&gt;<br>                        &lt;span class=”comments”&gt;&lt;?php comments_popup_link( </strong>( ‘No Comments’, ‘travelify’ ), <strong>( ‘1 Comment’, ‘travelify’ ), </strong>( ‘% Comments’, ‘travelify’ ), ‘’, __( ‘Comments Off’, ‘travelify’ ) ); ?&gt;&lt;/span&gt;<br>                    &lt;?php } ?&gt;<br>                &lt;/div&gt;&lt;!– .entry-meta –&gt;<br>            &lt;/div&gt;</pre><br>第一个函数修改完效果：<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151012-6@2x.jpg" alt=""><br><br>第二个函数修改完效果：<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/10/QQ20151012-7@2x.jpg" alt=""><br><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python高阶函数]]></title>
      <url>http://yoursite.com/2015/10/10/python-higher-order-functions/</url>
      <content type="html"><![CDATA[<p>十一7天假期，在家休6天。上班来什么都不想做，好无聊。</p>
<p>到今天才想起来学点东西，还是把以前看过的知识再巩固下，顺便记录下来。</p>
<p>本人学python以来，一直断断续续，没人带，自己慢慢摸索。还没入门，好悲剧。</p>
<p>废话不多说，下面是记录的详细内容：</p>
<h4 id="1-把函数作为参数"><a href="#1-把函数作为参数" class="headerlink" title="1.把函数作为参数"></a>1.把函数作为参数</h4><p>下面简单编写一个高阶函数：</p>
<pre class="lang:python decode:true">def add(x, y, f):
    return f(x) + f(y)</pre>
如果传入abs作为参数f的值：
<pre class="lang:python decode:true ">add(10, -8, abs)</pre>
根据函数的定义，函数实际执行的代码是：
<pre class="lang:python decode:true ">abs(10) + abs(8)

结果：18</pre>
由于参数x，y和f都可以任意传入，如果f传入其它函数，可以得出不同的返回值

**任务**：利用add(x, y, f)函数，计算

<div>![](http://www.cenhq.com/wp-content/uploads/2015/10/1.png)</div>

**解答：**

<pre class="lang:python decode:true ">import math

def add(x, y, f):
    return f(x) + f(y)

print add(25, 9, math.sqrt)

结果：8.0</pre>

<hr>
<h4 id="2-map-函数"><a href="#2-map-函数" class="headerlink" title="2.map()函数"></a>2.map()函数</h4><div><strong>map()</strong>函数是python内置的高阶函数，它接收一个函数f和一个list，并通过把函数f依次作用在list的每个元素上，得出一个新的list并返回</div><br><div></div><br><div>例如：list [1, 2, 3, 4, 5, 6, 7, 8, 9]</div><br><div></div><br><div>如果希望把list的每个元素都平方，可以用map()函数</div><br><div></div><br><div>因此，我们只需要传入函数f(x)=x<em>x,就可以利用map()函数来完成这个计算</em></div><br><div></div><br><div><br><pre class="lang:python decode:true ">def f(x):<br>    return xx<br><br>print map(f,[1, 2, 3, 4, 5, 6, 7, 8, 9])<br><br>结果：[1, 4, 9, 16, 25, 36, 49, 64, 81]</pre><br><div><strong>注意：</strong>map()不是改变原有的list，而是返回一个新的list。</div><br><div></div><br><div>由于list包含的元素可以是任意类型，因此，map()不仅仅可以处理只包含数值的list，事实上它可以处理包含任意类型的list，只要传入的函数f可以处理这些数据类型。</div><br><div></div><br><div><strong>任务 ：</strong>假设用户输入的英文名不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：</div><br><div><br><div>输入：[‘adam’,’LISA’,’barT’]</div><br><div>输出：[‘Adam’,’Lisa’,’Bart’]</div><br></div><br></div><br><div></div><br><div><br><div><strong>解答：</strong></div><br><div><br><pre class="lang:python decode:true ">def s(x):<br>    return x[0].upper() + x[1:].lower()<br><br>print map(s, [‘adam’,’LISA’,’barT’])<br><br>结果：[‘Adam’,’Lisa’,’Bart’]</pre><br><br><em> </em> <em><br><br>#### 3.reduce() 函数<br><br></em></div><br></div><br><div><strong>reduce()</strong>函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，<strong>一个函数 f，一个list</strong>，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。</div><br><div></div><br><div>例如，编写一个f函数，接收x和y，返回x和y的和：</div><br><div><br><pre class="lang:python decode:true ">def f(x, y):<br>    return x + y</pre><br><div>调用 <strong>reduce(f, [1, 3, 5, 7, 9])</strong>时，reduce函数将做如下计算：</div><br><div></div><br><div>先计算头两个元素：f(1, 3)，结果为4；</div><br><div>再把结果和第3个元素计算：f(4, 5)，结果为9；</div><br><div>再把结果和第4个元素计算：f(9, 7)，结果为16；</div><br><div>再把结果和第5个元素计算：f(16, 9)，结果为25；</div><br><div>由于没有更多的元素了，计算结束，返回结果25。</div><br><div></div><br><div>上述计算实际上是对 list 的所有元素求和。虽然Python内置了求和函数sum()，但是，利用reduce()求和也很简单。</div><br><div></div><br><div><strong>reduce()还可以接收第3个可选参数，作为计算的初始值。</strong>如果把初始值设为100，计算：</div><br></div><br><pre class="lang:python decode:true ">reduce(f, [1, 3, 5, 7, 9], 100)</pre><br><div>结果将变为125，因为第一轮计算是：</div><br><div></div><br><div>计算初始值和第一个元素：<strong>f(100, 1)</strong>，结果为<strong>101</strong>。</div><br><div></div><br><div><br><br><strong>任务</strong>：<br><div>Python内置了求和函数sum()，但没有求积的函数，请利用recude()来求积：</div><br><div>输入：[2, 4, 5, 7, 12]</div><br><div>输出：24<em>5</em>7<em>12的结果</em></div><br></div><br><strong>解答</strong>：<br><pre class="lang:python decode:true ">def f(x, y):<br>    return x  y<br><br>print reduce(f, [2, 4, 5, 7, 12])<br><br>结果：3360</pre><br><br><em> </em> <em><br><br>#### 4.filter()函数<br><br><div><strong>filter()</strong>函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个<strong>函数 f </strong>和一个<strong>list</strong>，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，<strong>filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</strong></div><br><div></div><br><div>例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</div><br><div><br><pre class="lang:python decode:true ">def is_odd(x):<br>    return x % 2 == 1</pre><br>然后，利用filter()过滤掉偶数：<br><pre class="lang:python decode:true ">filter(is_odd, [1, 4, 6, 7, 9, 12, 17])<br><br>结果：[1, 7, 9, 17]</pre><br>利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：<br><pre class="lang:python decode:true ">def is_not_empty(s):<br><br>    return s and len(s.strip()) &gt; 0<br>filter(is_not_empty, [‘test’, None, ‘’, ‘str’, ‘  ‘, ‘END’])<br><br>结果：[‘test’, ‘str’, ‘END’]</pre><br><div><strong>注意:</strong> s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。</div><br><div></div><br><div>当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</div><br><div><br><pre class="lang:python decode:true ">a = ‘    123’<br>a.strip()<br><br>结果： ‘123’<br><br>a=’\t\t123\r\n’<br>a.strip()<br><br>结果：’123’</pre><br><strong>任务：</strong>请利用filter()过滤出1~100中平方根是整数的数，即结果应该是：<br><div>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</div><br></div><br></div><br><strong>解答：</strong><br><pre class="lang:python decode:true ">import math<br><br>def f(x):<br>    n = int(math.sqrt(x))<br>    return n</pre></em>n == x<br><br>print filter(f, range(1, 101))<br><br>结果：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<br><br><em> </em> <em><br><br>#### 5.自定义排序函数<br><br>Python内置的 <strong>sorted()</strong>函数可对list进行排序：<br><pre class="lang:python decode:true ">&gt;&gt;&gt;sorted([36, 5, 12, 9, 21])<br>[5, 9, 12, 21, 36]</pre><br>但 <strong>sorted()</strong>也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，<strong>如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</strong><br><br>因此，如果我们要实现倒序排序，只需要编写一个reversed_cmp函数：<br><pre class="lang:python decode:true ">def reversed_cmp(x, y):<br>    if x &gt; y:<br>        return -1<br>    if x &lt; y:<br>        return 1<br>    return 0</pre><br>这样，调用 sorted() 并传入 reversed_cmp 就可以实现倒序排序：<br><pre class="lang:python decode:true ">&gt;&gt;&gt; sorted([36, 5, 12, 9, 21], reversed_cmp)<br>[36, 21, 12, 9, 5]</pre><br>sorted()也可以对字符串进行排序，字符串默认按照ASCII大小来比较：<br><pre class="lang:python decode:true ">&gt;&gt;&gt; sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’])<br>[‘Credit’, ‘Zoo’, ‘about’, ‘bob’]</pre><br>‘Zoo’排在’about’之前是因为’Z’的ASCII码比’a’小。<br><br><strong>任务：</strong>对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。<br><div>输入：[‘bob’, ‘about’, ‘Zoo’, ‘Credit’]</div><br><div>输出：[‘about’, ‘bob’, ‘Credit’, ‘Zoo’]</div><br><strong>解答：</strong><br><pre class="lang:python decode:true ">def n(x,y):<br>    x = x.lower()<br>    y = y.lower()<br>    if x &gt; y:<br>        return 1<br>    if x &lt; y:<br>        return -1<br>    return 0<br><br>&gt;&gt;&gt; sorted([‘bob’,’about’,’Zoo’,’Credit’], n)<br>[‘about’, ‘bob’, ‘Credit’, ‘Zoo’]</pre>

</em> <em> </em><br><br>#### 6.返回函数<br><br><div>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！</div><br><div></div><br><div>例如，定义一个函数 f()，我们让它返回一个函数 g，可以这样写：</div><br><pre class="lang:python decode:true ">def f():<br>    print ‘call f()…’<br>    # 定义函数g:<br>    def g():<br>        print ‘call g()…’<br>    # 返回函数g:<br>    return g</pre><br><div>仔细观察上面的函数定义，我们在函数 f 内部又定义了一个函数 g。由于函数 g 也是一个对象，函数名 g 就是指向函数 g 的变量，所以，最外层函数 f 可以返回变量 g，也就是函数 g 本身。</div><br><div></div><br><div>调用函数 f，我们会得到 f 返回的一个函数：</div><br><pre class="lang:python decode:true ">&gt; x = f()  # 调用f()<br>call f()…<br>&gt;&gt;&gt; x  # 变量x是f()返回的函数：<br>&lt;function g at 0x1037bf320&gt;<br>&gt;&gt;&gt; x()  # x指向函数，因此可以调用<br>call g()…  # 调用x()就是执行g()函数定义的代码</pre><br>请注意区分返回函数和返回值：<br><pre class="lang:sh decode:true ">def myabs():<br>    return abs  # 返回函数<br><br>def myabs2(x):<br>    return abs(x)  # 返回函数调用的结果，返回值是一个数值</pre><br>返回函数可以把一些计算延迟执行。例如，如果定义一个普通的求和函数：<br><pre class="lang:python decode:true ">def calc_sum(lst):<br>    return sum(lst)</pre><br>调用calc_sum()函数时，将立刻计算并得到结果：<br><pre class="lang:python decode:true ">&gt;&gt;&gt; calc_sum([1, 2, 3, 4])<br>10</pre><br>但是，如果返回一个函数，就可以“延迟计算”：<br><pre class="lang:python decode:true ">def calc_sum(lst):<br>    def lazy_sum():<br>        return sum(lst)<br>    return lazy_sum</pre><br>调用calc_sum()并没有计算出结果，而是返回函数:<br><pre class="lang:python decode:true ">&gt;&gt;&gt; f = calc_sum([1, 2, 3, 4])<br>&gt;&gt;&gt; f<br>&lt;function lazy_sum at 0x1037bfaa0&gt;</pre><br>对返回的函数进行调用时，才计算出结果:<br><pre class="lang:python decode:true ">&gt;&gt;&gt; f()<br>10</pre><br>由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。<br><br><strong>任务：</strong>请编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积<strong>。</strong><br><pre class="lang:python decode:true ">def calc_prod(lst):<br>    def aa(x,y):<br>        return x<em>y<br>    def bb():<br>        return reduce(aa,lst)<br>    return bb<br><br>&gt;&gt;&gt; f = calc_prod([1,2,3,4])<br>&gt;&gt;&gt; f()<br>24</em></pre>

 <em> </em><br><br>#### 7.闭包<br><br>在函数内部定义的函数和外部定义的函数是一样的，只是他们无法被外部访问：<br><pre class="lang:python decode:true ">def g():<br>    print ‘g()…’<br><br>def f():<br>    print ‘f()…’<br>    return g</pre><br>将<strong> g</strong> 的定义移入函数 <strong>f</strong> 内部，防止其他代码调用 <strong>g</strong>：<br><pre class="lang:python decode:true ">def f():<br>    print ‘f()…’<br>    def g():<br>        print ‘g()…’<br>    return g</pre><br>但是，考察上一小节定义的 <strong>calc_sum </strong>函数：<br><pre class="lang:python decode:true ">def calc_sum(lst):<br>    def lazy_sum():<br>        return sum(lst)<br>    return lazy_sum</pre><br><div><strong>注意: </strong>发现没法把 <strong>lazy_sum</strong> 移到 <strong>calc_sum</strong> 的外部，因为它引用了<strong>calc_sum</strong> 的参数 <strong>lst</strong>。</div><br><div></div><br><div>像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为<strong>闭包（Closure）</strong>。</div><br><div></div><br><div><strong>闭包的特点</strong>是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。举例如下：</div><br><pre class="lang:python decode:true "># 希望一次返回3个函数，分别计算1x1,2x2,3x3:<br>def count():<br>    fs = []<br>    for i in range(1, 4):<br>        def f():<br>            return i<em>i<br>        fs.append(f)<br>    return fs<br><br>f1, f2, f3 = count()</em></pre><br><div>你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果全部都是 9（请自己动手验证）。</div><br><div></div><br><div>原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。由于f1、f2、f3并没有被调用，所以，此时他们并未计算 ii，当 f1 被调用时：</div><br><div><br><pre class="lang:python decode:true ">&gt;&gt;&gt; f1()<br>9    # 因为f1现在才计算i<em>i，但现在i的值已经变为3</em></pre><br>因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br><br><strong>任务：</strong>返回闭包不能引用循环变量，请改写<strong>count()</strong>函数，让它正确返回能计算1x1、2x2、3x3的函数。<br><br>考察下面的函数<strong> f</strong>:<br><pre class="lang:python decode:true ">def f(j):<br>    def g():<br>        return jj<br>    return g</pre><br><div>它可以正确地返回一个闭包g，g所引用的变量j不是循环变量，因此将正常执行。</div><br><div></div><br><div>在count函数的循环内部，如果借助f函数，就可以避免引用循环变量i。</div><br><div></div><br><div><strong>解答：</strong></div><br></div><br><pre class="lang:python decode:true ">def count():<br>    fs = []<br>    for i in range(1, 4):<br>        def f(j):<br>            def g():<br>                return j<em>j<br>            return g<br>        r = f(i)<br>        fs.append(r)<br>    return fs<br><br>&gt;&gt;&gt; f1,f2,f3 = count()<br>&gt;&gt;&gt; print f1(), f2(), f3()<br>1 4 9</em></pre>

 <em> </em><br><br>#### 8.匿名函数<del></del><br><br><div>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。</div><br><div></div><br><div>在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算 f(x)=x2 时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：</div><br><div><br><pre class="lang:python decode:true ">&gt;&gt;&gt; map(lambda x: x <em> x, [1, 2, 3, 4, 5, 6, 7, 8, 9])<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]</em></pre><br>通过对比可以看出，匿名函数 lambda x: x  x 实际上就是：<br><pre class="lang:python decode:true ">def f(x):<br>    return x <em> x</em></pre><br><div>关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。</div><br><div></div><br><div>匿名函数有个限制，就是<strong>只能有一个表达式</strong>，<strong>不写return</strong>，返回值就是该表达式的结果。</div><br><div></div><br><div>使用匿名函数，可以不必定义函数名，直接创建一个函数对象，很多时候可以简化代码：</div><br><div><br><pre class="lang:python decode:true ">&gt;&gt;&gt; sorted([1, 3, 9, 5, 0], lambda x,y: -cmp(x,y))<br>[9, 5, 3, 1, 0]</pre><br>返回函数的时候，也可以返回匿名函数：<br><pre class="lang:python decode:true ">&gt;&gt;&gt; myabs = lambda x: -x if x &lt; 0 else x<br>&gt;&gt;&gt; myabs(-1)<br>1<br>&gt;&gt;&gt; myabs(1)<br>1</pre><br><strong>任务：</strong>利用匿名函数简化以下代码：<br><pre class="lang:python decode:true ">def is_not_empty(s):<br>    return s and len(s.strip()) &gt; 0<br><br>filter(is_not_empty, [‘test’, None, ‘’, ‘str’, ‘  ‘, ‘END’])</pre><br><em>*解答：</em><br><pre class="lang:python decode:true ">print filter(lambda s:s and len(s.strip()) &gt; 0, [‘test’, None, ‘’, ‘str’, ‘  ‘, ‘END’])<br>[‘test’, ‘str’, ‘END’]</pre><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于nginx流媒体服务器搭建]]></title>
      <url>http://yoursite.com/2015/09/21/based-on-the-nginx-streaming-media-server/</url>
      <content type="html"><![CDATA[<div>七牛云存储的流媒体服务，我申请了个测试帐号，在内容管理上传你的视频文件，生成外链。</div><br><div>到自己博客里把外链添加到文章里。貌似不能播放。应该是视频格式或者编码问题，问过他们技术，需要转码。但是MPS服务还要认证。然后自己在本地搭建个流媒体服务器。</div><br><div></div><br><div></div><br><div><br><div>流媒体播放方式：</div><br><div>HTTP方式</div><br><div><br><div>这种方式要下载FLV视频文件到本地播放，一旦FLV视频文件下载完成，就不会消耗服务器的资源和带宽，但是拖动功能没有RTMP/RTMP流媒体方式强大，很多视频网站都是用HTTP方式实现的，如：YouTube，土豆，酷6等</div><br><div></div><br></div><br><div>RTMP/RTMP流媒体方式</div><br><div>这种方式不用下载FLV视频文件到本地，可以实时的播放flv文件，可以任意拖拽播放进度条，但是比较消耗服务器的资源。</div><br></div><br><div></div><br><div></div><br><div><br><div>系统：centos6.5</div><br><div>软件：nginx-1.8</div>

<h3 id="1-由于安装时很多依赖包，需要添加源"><a href="#1-由于安装时很多依赖包，需要添加源" class="headerlink" title="1.由于安装时很多依赖包，需要添加源"></a>1.由于安装时很多依赖包，需要添加源</h3><pre class="lang:sh decode:true ">[root@VM-242 src]# cd /usr/local/src
[root@VM-242 src]# wget -c http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
[root@VM-242 src]# rpm –import http://apt.sw.be/RPM-GPG-KEY.dag.txt
[root@VM-242 src]# rpm -i rpmforge-release-0.5.3-1.el6.rf.*.rpm</pre>

<h3 id="2-安装转码工具Mencoder和ffmpeg"><a href="#2-安装转码工具Mencoder和ffmpeg" class="headerlink" title="2.安装转码工具Mencoder和ffmpeg"></a>2.安装转码工具Mencoder和ffmpeg</h3><h4 id="2-1-安装依赖库"><a href="#2-1-安装依赖库" class="headerlink" title="2.1 安装依赖库"></a>2.1 安装依赖库</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# yum install gcc make automake bzip2 unzip patch subversion libjpeg-devel</pre>

<h4 id="2-2-安装yasm"><a href="#2-2-安装yasm" class="headerlink" title="2.2 安装yasm"></a>2.2 安装yasm</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz
[root@VM-242 src]# tar zxvf yasm-1.2.0.tar.gz
[root@VM-242 src]# cd yasm-1.2.0
[root@VM-242 yasm-1.2.0]# ./configure
[root@VM-242 yasm-1.2.0]# make &amp;&amp; make install
[root@VM-242 yasm-1.2.0]# cd ..</pre>

<h4 id="2-3-卸载系统原有的ffmpeg和x264"><a href="#2-3-卸载系统原有的ffmpeg和x264" class="headerlink" title="2.3 卸载系统原有的ffmpeg和x264"></a>2.3 卸载系统原有的ffmpeg和x264</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# yum remove ffmpeg x264</pre>

<h4 id="2-4-安装Mplayer编码库"><a href="#2-4-安装Mplayer编码库" class="headerlink" title="2.4 安装Mplayer编码库"></a>2.4 安装Mplayer编码库</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget -c http://www2.mplayerhq.hu/MPlayer/releases/codecs/essential-amd64-20071007.tar.bz2
[root@VM-242 src]# tar xf essential-amd64-20071007.tar.bz2
[root@VM-242 src]# mkdir /usr/local/lib/codecs
[root@VM-242 src]# cp -Rvp essential-amd64-20071007/* /usr/local/bin/codecs/

[root@VM-242 src]# vim /etc/ld.so.conf
/usr/lib
/usr/local/lib</pre>

<h4 id="2-5-加载动态库"><a href="#2-5-加载动态库" class="headerlink" title="2.5 加载动态库"></a>2.5 加载动态库</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# ldconfig</pre>

<h4 id="2-6-安装一些格式转换常用的编码库"><a href="#2-6-安装一些格式转换常用的编码库" class="headerlink" title="2.6 安装一些格式转换常用的编码库"></a>2.6 安装一些格式转换常用的编码库</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# yum install faac-devel  lame-devel amrnb-devel opencore-amr-devel amrwb-devel  libvorbis-devel libtheora-devel xvidcore-devel</pre>

<h4 id="2-7-安装x-264"><a href="#2-7-安装x-264" class="headerlink" title="2.7 安装x.264"></a>2.7 安装x.264</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget ftp://ftp.videolan.org/pub/videolan/x264/snapshots/last_stable_x264.tar.bz2
[root@VM-242 src]# tar xvjf last_stable_x264.tar.bz2
[root@VM-242 src]# cd x264-snapshot-20150920-2245-stable/
[root@VM-242 x264-snapshot-20150920-2245-stable]# ./configure –enable-shared –enable-pic
[root@VM-242 x264-snapshot-20150920-2245-stable]# make &amp;&amp; make install
[root@VM-242 x264-snapshot-20150920-2245-stable]# cd ..</pre>

<h4 id="2-8-安装libvpx"><a href="#2-8-安装libvpx" class="headerlink" title="2.8 安装libvpx"></a>2.8 安装libvpx</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://webm.googlecode.com/files/libvpx-v1.2.0.tar.bz2
[root@VM-242 src]# tar xf libvpx-v1.2.0.tar.bz2
[root@VM-242 src]# cd libvpx-v1.2.0
[root@VM-242 libvpx-v1.2.0]# ./configure --enable-shared --enable-pic
[root@VM-242 libvpx-v1.2.0]# make &amp;&amp; make install
[root@VM-242 libvpx-v1.2.0]# cd ..</pre>

<h4 id="2-9-安装ffmpeg"><a href="#2-9-安装ffmpeg" class="headerlink" title="2.9 安装ffmpeg"></a>2.9 安装ffmpeg</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://ffmpeg.org/releases/ffmpeg-2.0.1.tar.bz2
[root@VM-242 src]# tar xf ffmpeg-2.0.1.tar.bz2
[root@VM-242 src]# cd ffmpeg-2.0.1
[root@VM-242 ffmpeg-2.0.1]# ./configure --enable-gpl --enable-version3 --enable-shared --enable-nonfree --enable-postproc --enable-libfaac --enable-libmp3lame --enable-libopencore-amrnb --enable-libop --encore-amrwb --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libxvid
[root@VM-242 ffmpeg-2.0.1]# make &amp;&amp; make install
[root@VM-242 ffmpeg-2.0.1]# cd ..</pre>

<h4 id="2-10-安装mencoder"><a href="#2-10-安装mencoder" class="headerlink" title="2.10 安装mencoder"></a>2.10 安装mencoder</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# yum install mplayer mencoder flvtool2</pre>

<h4 id="2-11-查看已经安装好的视频和视频编码器"><a href="#2-11-查看已经安装好的视频和视频编码器" class="headerlink" title="2.11 查看已经安装好的视频和视频编码器"></a>2.11 查看已经安装好的视频和视频编码器</h4><pre class="lang:sh decode:true ">查看支持的音频编码
[root@VM-242 src]# mencoder -oac help
查看支持的视频编码
[root@VM-242 src]# mencoder -ovc help
可参考：http://www.mplayerhq.hu/DOCS/HTML/zh_CN/menc-feat-selecting-codec.html</pre>

<h3 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h3><h4 id="3-1首先安装依赖库pcre"><a href="#3-1首先安装依赖库pcre" class="headerlink" title="3.1首先安装依赖库pcre"></a>3.1首先安装依赖库pcre</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://sourceforge.net/projects/pcre/files/pcre/8.37/pcre-8.37.tar.gz
[root@VM-242 src]# tar xf pcre-8.37.tar.gz</pre>

<h4 id="3-2-安装yamdi用来为flv创建关键帧才能随意拖动"><a href="#3-2-安装yamdi用来为flv创建关键帧才能随意拖动" class="headerlink" title="3.2 安装yamdi用来为flv创建关键帧才能随意拖动"></a>3.2 安装yamdi用来为flv创建关键帧才能随意拖动</h4><pre class="lang:sh decode:true">[root@VM-242 src]# yum install gcc gcc-c++ openssl-devel zlib-devel yamdi</pre>

<h4 id="3-3-下载所需的nginx模块"><a href="#3-3-下载所需的nginx模块" class="headerlink" title="3.3 下载所需的nginx模块"></a>3.3 下载所需的nginx模块</h4><h5 id="3-3-1-第一个是nginx-mod-h264-streaming-让nginx支持flv-mp4流播放"><a href="#3-3-1-第一个是nginx-mod-h264-streaming-让nginx支持flv-mp4流播放" class="headerlink" title="3.3.1 第一个是nginx_mod_h264_streaming,让nginx支持flv/mp4流播放"></a>3.3.1 第一个是nginx_mod_h264_streaming,让nginx支持flv/mp4流播放</h5><p></p></div><p></p>
<pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://h264.code-shop.com/download/nginx_mod_h264_streaming-2.2.7.tar.gz
[root@VM-242 src]# tar xf nginx_mod_h264_streaming-2.2.7.tar.gz

注意：先要修改一下这家伙的源码，注释掉nginx_mod_h264_streaming-2.2.7/src/ngx_http_streaming_module.c的158到161行
     /* TODO: Win32 */
     //if (r-&gt;zero_in_uri)
     // {
     //   return NGX_DECLINED;
     // }</pre>

<h5 id="3-3-2-第二个是nginx-rtmp-module，让nginx支持rtmp-hls协议"><a href="#3-3-2-第二个是nginx-rtmp-module，让nginx支持rtmp-hls协议" class="headerlink" title="3.3.2 第二个是nginx-rtmp-module，让nginx支持rtmp/hls协议"></a>3.3.2 第二个是nginx-rtmp-module，让nginx支持rtmp/hls协议</h5><pre class="lang:sh decode:true ">[root@VM-242 src]# wget -O nginx-rtmp-module.zip  https://github.com/arut/nginx-rtmp-module/archive/master.zip
[root@VM-242 src]# unzip nginx-rtmp-module.zip</pre>

<h5 id="3-3-3-下载清缓存的模块"><a href="#3-3-3-下载清缓存的模块" class="headerlink" title="3.3.3 下载清缓存的模块"></a>3.3.3 下载清缓存的模块</h5><pre class="lang:sh decode:true ">[root@VM-242 src]# wget -O ngx_cache_purge.zip https://github.com/FRiCKLE/ngx_cache_purge/archive/master.zip
[root@VM-242 src]# unzip ngx_cache_purge.zip</pre>

<h4 id="3-4-下载nginx"><a href="#3-4-下载nginx" class="headerlink" title="3.4 下载nginx"></a>3.4 下载nginx</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# wget http://nginx.org/download/nginx-1.8.0.tar.gz
[root@VM-242 src]# tar xf nginx-1.8.0.tar.gz
[root@VM-242 src]# cd nginx-1.8.0
[root@VM-242 nginx-1.8.0]# ./configure --user=daemon --group=daemon --prefix=/usr/local/nginx/ --add-module=../nginx-rtmp-module-master --add-module=../ngx_cache_purge-master --add-module=../nginx_mod_h264_streaming-2.2.7 --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-http_gzip_static_module --with-http_flv_module --with-pcre=../pcre-8.37
[root@VM-242 nginx-1.8.0]# make &amp;&amp; make install
[root@VM-242 nginx-1.8.0]# cd ..</pre>

<h4 id="3-5-运行nginx"><a href="#3-5-运行nginx" class="headerlink" title="3.5 运行nginx"></a>3.5 运行nginx</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# /urs/local/nginx/sbin/nginx</pre>

<h4 id="3-6-nginx添加到环境变量"><a href="#3-6-nginx添加到环境变量" class="headerlink" title="3.6 nginx添加到环境变量"></a>3.6 nginx添加到环境变量</h4><pre class="lang:sh decode:true ">[root@VM-242 src]# vim /root/.bash_profile
PATH=$PATH:$HOME/bin:/usr/local/nginx/sbin

[root@VM-242 src]# source /root/.bash_profile</pre>

<h4 id="3-7-编辑配置文件"><a href="#3-7-编辑配置文件" class="headerlink" title="3.7 编辑配置文件"></a>3.7 编辑配置文件</h4><pre class="lang:sh decode:true">[root@VM-242 src]# egrep -v '^$|^#|#' /usr/local/nginx/conf/nginx.conf
user daemon daemon;
worker_processes  1;
events {
    worker_connections  1024;
}
rtmp {
    server {
    listen 1935;
    chunk_size 4000;
    application vod {
        play /mnt/media/vod;
    }
    application hls {
            hls on;
            hls_path /mnt/media/app;
            hls_fragment 10s;
    }
    }
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    server {
        listen       8080;
        server_name  localhost;
        location / {
        root /mnt/soft/nginx-rtmp-module-master/test/rtmp-publisher;
        }
    location /stat {
        rtmp_stat all;
        rtmp_stat_stylesheet stat.xsl;
    }
    location /stat.xsl {
        root /mnt/soft/nginx-rtmp-module-master;
    }
    location /control {
        rtmp_control all;

    }
}
    server {
    listen        80;
    server_name     localhost;
    location / {
        root /mnt/wwwroot;
        index index.html;
    }
    location ~ \.flv$ {
        root /mnt/media/vod;
        flv;
        limit_conn addr 20;
        limit_rate 200k;
    }
    location ~ \.mp4$ {
        root /mnt/media/vod;
        mp4;
        limit_conn addr 20;
        limit_rate 200k;
    }
    location /hls {
        alias /mnt/media/app;
    }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

重新加载配置文件
[root@VM-242 src]# nginx -t
[root@VM-242 src]# nginx -s reload</pre>

<h4 id="3-8-测试"><a href="#3-8-测试" class="headerlink" title="3.8 测试"></a>3.8 测试</h4><p>#### </p>
<div>上传个mp4文件到/mnt/media/vod</div><br><div>打开浏览器播放</div><br><div><a href="http://10.19.21.241/love.mp4" target="_blank" rel="external">http://10.19.21.241/love.mp4</a></div><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150921-3@2x.jpg" alt=""><br><div>/mnt/media/video -&gt; 存放原始视频</div><br><div>/mnt/media/app  -&gt; 存放转成m3u8的视频,供http访问(HLS)</div><br><div>/mnt/media/vod  -&gt; 存放转换后的flv和mp4视频,供http或rtmp访问</div><br><div></div>

<h4 id="3-9-网上下载了个avi格式的视频，需要转换成mp4格式才能播放"><a href="#3-9-网上下载了个avi格式的视频，需要转换成mp4格式才能播放" class="headerlink" title="3.9 网上下载了个avi格式的视频，需要转换成mp4格式才能播放"></a>3.9 网上下载了个avi格式的视频，需要转换成mp4格式才能播放</h4><p>使用ffmpeg工具来转换</p>
<p><pre class="lang:sh decode:true ">[root@VM-242 src]# cd /mnt/media/video<br>[root@VM-242 video]# ffmpeg -i test.avi -f mp4 -acodec libfaac -vcodec libx264 -b 512k -ab 320k ../vod/test1.mp4<br>ffmpeg version 2.0.1 Copyright (c) 2000-2013 the FFmpeg developers<br>  built on Sep 21 2015 14:01:20 with gcc 4.4.7 (GCC) 20120313 (Red Hat 4.4.7-16)<br>  configuration: –enable-gpl –enable-version3 –enable-shared –enable-nonfree –enable-postproc –enable-libfaac –enable-libmp3lame –enable-libopencore-amrnb –enable-libopencore-amrwb –enable-libtheora –enable-libvorbis –enable-libvpx –enable-libx264 –enable-libxvid<br>  libavutil      52. 38.100 / 52. 38.100<br>  libavcodec     55. 18.102 / 55. 18.102<br>  libavformat    55. 12.100 / 55. 12.100<br>  libavdevice    55.  3.100 / 55.  3.100<br>  libavfilter     3. 79.101 /  3. 79.101<br>  libswscale      2.  3.100 /  2.  3.100<br>  libswresample   0. 17.102 /  0. 17.102<br>  libpostproc    52.  3.100 / 52.  3.100<br>Input #0, avi, from ‘test.avi’:<br>  Metadata:<br>    encoder         : MEncoder SVN-r33883(20110719-gcc4.5.2)<br>  Duration: 00:03:49.54, start: 0.000000, bitrate: 1676 kb/s<br>    Stream #0:0: Video: mpeg4 (Advanced Simple Profile) (XVID / 0x44495658), yuv420p, 640x360 [SAR 1:1 DAR 16:9], 24 tbr, 24 tbn, 24 tbc<br>    Stream #0:1: Audio: mp3 (U[0][0][0] / 0x0055), 44100 Hz, stereo, s16p, 224 kb/s<br>Please use -b:a or -b:v, -b is ambiguous<br>[libx264 @ 0xb6bf00] using SAR=1/1<br>[libx264 @ 0xb6bf00] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2<br>[libx264 @ 0xb6bf00] profile High, level 3.0<br>[libx264 @ 0xb6bf00] 264 - core 146 - H.264/MPEG-4 AVC codec - Copyleft 2003-2015 - <a href="http://www.videolan.org/x264.html" target="_blank" rel="external">http://www.videolan.org/x264.html</a> - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=3 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=24 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=abr mbtree=1 bitrate=512 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00<br>Output #0, mp4, to ‘../vod/test1.mp4’:<br>  Metadata:<br>    encoder         : Lavf55.12.100<br>    Stream #0:0: Video: h264 (libx264) ([33][0][0][0] / 0x0021), yuv420p, 640x360 [SAR 1:1 DAR 16:9], q=-1–1, 512 kb/s, 12288 tbn, 24 tbc<br>    Stream #0:1: Audio: aac (libfaac) ([64][0][0][0] / 0x0040), 44100 Hz, stereo, s16, 320 kb/s<br>Stream mapping:<br>  Stream #0:0 -&gt; #0:0 (mpeg4 -&gt; libx264)<br>  Stream #0:1 -&gt; #0:1 (mp3 -&gt; libfaac)<br>Press [q] to stop, [?] for help<br>frame= 5510 fps= 67 q=-1.0 Lsize=   18091kB time=00:03:49.59 bitrate= 645.5kbits/s dup=1 drop=0<br>video:13693kB audio:4226kB subtitle:0 global headers:0kB muxing overhead 0.963257%<br>[libx264 @ 0xb6bf00] frame I:30    Avg QP:20.08  size: 23465<br>[libx264 @ 0xb6bf00] frame P:2541  Avg QP:24.65  size:  4498<br>[libx264 @ 0xb6bf00] frame B:2939  Avg QP:31.54  size:   642<br>[libx264 @ 0xb6bf00] consecutive B-frames: 10.5% 45.3% 29.5% 14.7%<br>[libx264 @ 0xb6bf00] mb I  I16..4: 16.0% 60.6% 23.4%<br>[libx264 @ 0xb6bf00] mb P  I16..4:  1.3%  5.0%  0.9%  P16..4: 31.9% 12.6%  7.8%  0.0%  0.0%    skip:40.5%<br>[libx264 @ 0xb6bf00] mb B  I16..4:  0.1%  0.3%  0.0%  B16..8: 25.7%  2.2%  0.5%  direct: 1.0%  skip:70.2%  L0:34.1% L1:54.8% BI:11.2%<br>[libx264 @ 0xb6bf00] final ratefactor: 23.57<br>[libx264 @ 0xb6bf00] 8x8 transform intra:68.0% inter:67.4%<br>[libx264 @ 0xb6bf00] coded y,uvDC,uvAC intra: 55.4% 42.0% 7.5% inter: 10.8% 5.6% 0.3%<br>[libx264 @ 0xb6bf00] i16 v,h,dc,p: 25% 44% 10% 21%<br>[libx264 @ 0xb6bf00] i8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 27% 26% 24%  3%  4%  5%  3%  4%  5%<br>[libx264 @ 0xb6bf00] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 25% 27% 12%  5%  7%  8%  6%  6%  5%<br>[libx264 @ 0xb6bf00] i8c dc,h,v,p: 54% 24% 19%  3%<br>[libx264 @ 0xb6bf00] Weighted P-Frames: Y:4.3% UV:1.7%<br>[libx264 @ 0xb6bf00] ref P L0: 66.0% 16.3% 13.5%  4.1%  0.0%<br>[libx264 @ 0xb6bf00] ref B L0: 86.7% 12.4%  0.9%<br>[libx264 @ 0xb6bf00] ref B L1: 95.3%  4.7%<br>[libx264 @ 0xb6bf00] kb/s:488.57</pre></p>
<p><div>参数详解</div></p>
<p><div>-i 指定输入文件</div></p>
<p><div>-f 输出格式</div></p>
<p><div>-acodec 指定声音编码器</div></p>
<p><div>-vcodec 指定视频编码器</div></p>
<p><div>-b 指定视频流量</div></p>
<p><div>-ab 指定声音流量</div></p>
<p><div></div></p>
<p><div></div></p>
<div>

<p>FFmpeg可使用众多参数，参数内容会根据ffmpeg版本而有差异，使用前建议先参考参数及编解码器的叙述。此外，参数明细可用 ffmpeg -h 显示；编解码器名称等明细可用 ffmpeg -formats 显示。</p>
<p></p></div><p></p>
<p><div></div></p>
<p><div></div></p>
<p><div>下列为较常使用的参数。</div></p>
<p><div><strong>主要参数</strong></div><br><br></p>
<div>

<p>-i 设定输入档名。<br>-f 设定输出格式。<br>-y 若输出档案已存在时则覆盖档案。<br>-fs 超过指定的档案大小时则结束转换。<br>-ss 从指定时间开始转换。<br>-title 设定标题。<br>-timestamp 设定时间戳。<br>-vsync 增减Frame使影音同步。</p>
<p></p></div><p></p>
<p><div><strong>影像参数</strong></div></p>
<p><div></div></p>
<p><div></div></p>
<p><div>-b 设定影像流量，默认为200Kbit/秒。（ 单位请参照下方注意事项 ）<br>-r 设定FrameRate值，默认为25。<br>-s 设定画面的宽与高。<br>-aspect 设定画面的比例。<br>-vn 不处理影像，于仅针对声音做处理时使用。</div></p>
<p><div>-vcodec 设定影像影像编解码器，未设定时则使用与输入档案相同之编解码器。</div><br><br></p>
<p><div><strong> </strong></div></p>
<p><div><strong>声音参数</strong></div></p>
<div>

<p>-ab 设定每Channel （最近的SVN 版为所有Channel的总合）的流量。（ 单位 请参照下方注意事项 ）<br>-ar 设定采样率。<br>-ac 设定声音的Channel数。<br>-acodec 设定声音编解码器，未设定时与影像相同，使用与输入档案相同之编解码器。<br>-an 不处理声音，于仅针对影像做处理时使用。<br>-vol 设定音量大小，256为标准音量。(要设定成两倍音量时则输入512，依此类推。)</p>
<p></p></div><p></p>
<p><div></div></p>
<p><div><strong>注意事项</strong></div></p>
<div>

<p>以-b及ab参数设定流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。）</p>
<p></p></div><p></p>
<p><div></div></p>
<p><div></div></p>
<p><div></div></p>
<p><div>例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入‘ -ab 64k ’；单位为kbits/sec的情况时则需输入‘ -ab 64 ’。</div></p>
<p><div></div><br><br></p>
<p><div></div></p>
<p><div></div></p>
<p><div>以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac 与 libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats 确 认输入的编解码器是否能运作。</div><br></p>
<p><div></div><br><br></p>
<p><div>转换后视频播放</div></p>
<p><div><a href="http://10.19.21.241/test1.mp4" target="_blank" rel="external">http://10.19.21.241/test1.mp4</a></div><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150921-4@2x.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脚本发布代码第二版]]></title>
      <url>http://yoursite.com/2015/09/17/the-second-edition-release-script-code/</url>
      <content type="html"><![CDATA[<p>之前写的脚本发布代码，每次发布都会checkout所有的代码，数据太多。</p>
<p>今天这个脚本会比上次那个要好很多，只上传指定范围内的版本号。</p>
<p>脚本有很多注释，相信大家都能看懂。我大略写下流程。</p>
<p>流程：</p>
<p>1.先获取最新代码版本号。</p>
<p>2.输入指定版本号。</p>
<p>3.列出指定版本号之间的代码文件，并写入到文件中。</p>
<p>4.发布之前备份远程服务器代码。</p>
<p>5.最后上传代码。</p>
<p>下面我贴下脚本和执行后的结果，如果各位有啥问题，可以留言给我。</p>
<p><pre class="lang:sh decode:true  ">#!/bin/bash</pre></p>
<p>#Author: Charlie.cen</p>
<p>#Email: cenhuqing@gmail.com</p>
<p>#Date: 2015/09/17</p>
<h1 id="Check-if-user-is-root"><a href="#Check-if-user-is-root" class="headerlink" title="Check if user is root"></a>Check if user is root</h1><p>[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1</p>
<p>export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>clear</p>
<p>dat=<code>date +%Y%m%d-%H%M</code><br>release_path=”/home/deploy/version”<br>svn_workdir=”/app/server”<br>Server_pre=”10.19.21.241”<br>Server_online=”10.19.21.242 10.19.21.243”</p>
<p>cd $svn_workdir &amp;&amp; last_version=$(svn update | grep -E “版本|version|Version|At revision” | sed ‘s/[^0-9]//g’)<br>echo -e “\t\033[32m当前最新的版本号是:\033[0m \033[31m$last_version\033[0m, \033[32m请输入的数字不要超过此版本号!!!\033[0m”</p>
<p>#指定起始和结束版本号<br>while :<br>do<br>    read -p “请输入起始版本号:” start_version</p>
<pre><code>    #read -p &quot;请输入结束版本号:&quot; end_version
while :
do
        if (( $start_version &amp;gt;= $last_version ));then
        echo -e  &quot;\t\033[31m你输入的起始版本号超过限制，请重新输入\033[0m&quot;
        read -p &quot;请输入起始版本号:&quot; start_version
        continue
    else
        read -p &quot;请输入结束版本号:&quot; end_version
        while :
        do
            if (( $end_version &amp;gt;= $last_version ));then
                echo -e &quot;\t\033[31m你输入的结束版本号超过限制，请重新输入\033[0m&quot;
                read -p &quot;请输入结束版本号:&quot; end_version
                continue
            else
                while :
                do
                    if (( $start_version &amp;gt;= $end_version ));then
                        echo -e &quot;\t\033[31m你输入的起始版本号大于或等于结束版本号，请重新输入\033[0m&quot;
                        read -p &quot;请输入起始版本号:&quot; start_version
                            read -p &quot;请输入结束版本号:&quot; end_version
                        continue
                    else
                        if [[ $start_version =~ ^[0-9]+$ ]] &amp;amp;&amp;amp; [[ $end_version =~ ^[0-9]+$ ]];then
                                                echo -e &quot;\t\033[32m你的起始版本号为:$start_version,你的结束版本号为:$end_version\033[0m&quot;
                                                break
                                            else
                                                    echo -e &quot;\t\033[31m你输入的类型错误，请重新输入。例如：123 23 890\033[0m&quot;
                                        fi
                    fi
                    break
                done
            fi
            break
        done
    fi
    break
done
break
</code></pre><p>done</p>
<p>#进入工作目录，指定版本范围的文件列表写入到文件中<br>cd $svn_workdir &amp;&amp;  svn log -r $start_version:$end_version -v |egrep ‘^   M|^   A’|sort |uniq -c |sort -nr|awk ‘{print $3}’ &gt; $release_path/$start<em>version\</em>$end_version.txt<br>if [ $? -eq 0 ];then<br>    echo -e “\t\033[32m导出指定版本成功\033[0m”<br>else<br>    echo -e “\t\033[31m导出指定版本失败\033[0m”<br>    exit 1<br>fi</p>
<p>#删除以txt为后缀的文件<br>sed -i ‘/.txt/d’ $release_path/$start<em>version\</em>$end_version.txt</p>
<p>#上传到服务器<br>while :<br>do<br>    echo “请选择要发布的到哪台服务器:”<br>        echo -e “\t\033[32m1\033[0m. 预发布”<br>        echo -e “\t\033[32m2\033[0m. 线上”<br>        read -p “请输入发布到服务器的编号:” Remote_server<br>        if [ $Remote_server != 1 -a $Remote_server != 2 ];then<br>                echo -e “\033[31m 输入错误,只能输入数字: 1,2 \033[0m”<br>    else<br>        if [ $Remote_server = 1 ];then<br>            echo -e “\t\033[32m正在备份$Server_pre数据。。。\033[0m”<br>            ssh root@$Server_pre “cp -r $svn_workdir /app/bak/server-$dat” &amp;&amp; echo -e “\t\033[32m数据备份完成\033[0m” || exit 1<br>            echo<br>            echo -e “\t\033[32m正在同步数据到$Server_pre。。。\033[0m”<br>            while read line;do<br>                scp -r $svn_workdir$line root@$Server_pre:$svn_workdir$line &gt; /dev/null || exit 2<br>            done &lt; $release_path/$start<em>version\</em>$end_version.txt<br>            echo -e “\t\033[32m数据同步完成\033[0m”<br>            break<br>        else<br>            for i in ${Server_online[@]};do<br>                echo -e “\t\033[32m正在备份$i数据。。。\033[0m”<br>                ssh root@$i “cp -r $svn_workdir /app/bak/server-$dat” &amp;&amp; echo -e “\t\033[32m数据备份完成\033[0m” || exit 3<br>                echo<br>                echo -e “\t\033[32m正在同步数据到$i。。。\033[0m”<br>                while read line;do<br>                    scp -r $svn_workdir$line root@$i:$svn_workdir$line &gt; /dev/null || exit 4<br>                done &lt; $release_path/$start<em>version\</em>$end_version.txt<br>                echo -e “\t\033[32m数据同步完成\033[0m”<br>                echo<br>            done<br>            break<br>        fi<br>    fi<br>done<br>下面是执行后显示信息，都是中文，俺E文太烂，写出来大家估计也看不懂。</p>
<p><pre class="lang:sh decode:true">    当前最新的版本号是: 2442, 请输入的数字不要超过此版本号!!!<br>请输入起始版本号:24300<br>    你输入的起始版本号超过限制，请重新输入<br>请输入起始版本号:2430<br>请输入结束版本号:2410<br>    你输入的起始版本号大于或等于结束版本号，请重新输入<br>请输入起始版本号:2440<br>请输入结束版本号:2441<br>    你的起始版本号为:2440,你的结束版本号为:2441<br>    导出指定版本成功<br>请选择要发布的到哪台服务器:<br>    1. 预发布<br>    2. 线上<br>请输入发布到服务器的编号:2<br>    正在备份10.19.21.242数据。。。<br>    数据备份完成</pre></p>
<pre><code>正在同步数据到10.19.21.242。。。
数据同步完成

正在备份10.19.21.243数据。。。
数据备份完成

正在同步数据到10.19.21.243。。。
数据同步完成&lt;/pre&gt;
</code></pre><p>可以查看远程服务器里是否备份过文件</p>
<p><pre class="lang:sh decode:true ">[root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/bak/“<br>10.19.21.243 | success | rc=0 &gt;&gt;<br>total 4<br>drwxr-xr-x 9 root root 4096 Sep 17 17:44 server-20150917-1745</pre></p>
<p>10.19.21.242 | success | rc=0 &gt;&gt;<br>total 4<br>drwxr-xr-x 9 root root 4096 Sep 17 17:44 server-20150917-1745<br>检查是否发布最新版本到远程服务器，可以打开刚列出的指定版本号文件(2440_2441.txt)</p>
<p><pre class="lang:sh decode:true">[root@VM-249 scripts]# cat /home/deploy/version/2440_2441.txt<br>/admin/apps/api/controllers/CommunityController.php<br>/admin/apps/admin/controllers/SchoolController.php<br>/admin/apps/api/controllers/CommunityController.php<br></pre><br>检查其中一个文件</p>
<p><pre class="lang:sh decode:true ">[root@VM-249 scripts]# md5sum /app/server/admin/apps/api/controllers/CommunityController.php<br>a420fa01054605aba3122cda01d8da1f  /app/server/admin/apps/api/controllers/CommunityController.php<br>[root@VM-249 scripts]# ansible online -m shell -a “md5sum /app/server/admin/apps/api/controllers/CommunityController.php”<br>10.19.21.243 | success | rc=0 &gt;&gt;<br>a420fa01054605aba3122cda01d8da1f  /app/server/admin/apps/api/controllers/CommunityController.php</pre></p>
<p>10.19.21.242 | success | rc=0 &gt;&gt;<br>a420fa01054605aba3122cda01d8da1f  /app/server/admin/apps/api/controllers/CommunityController.php<br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[codis集群搭建]]></title>
      <url>http://yoursite.com/2015/09/15/codis-cluster-structures/</url>
      <content type="html"><![CDATA[<div>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.</div><br><div></div><br><div>Codis 由四部分组成:</div>

<ul>
<li>Codis Proxy (codis-proxy)</li>
<li>Codis Manager (codis-config)</li>
<li>Codis Redis (codis-server)</li>
<li>ZooKeeper<div>codis-proxy 是客户端连接的 Redis 代理服务, codis-proxy 本身实现了 Redis 协议, 表现得和一个原生的 Redis 没什么区别 (就像 Twemproxy), 对于一个业务来说, 可以部署多个 codis-proxy, codis-proxy 本身是无状态的.</div><br><div></div><br><div>codis-config 是 Codis 的管理工具, 支持包括, 添加/删除 Redis 节点, 添加/删除 Proxy 节点, 发起数据迁移等操作. codis-config 本身还自带了一个 http server, 会启动一个 dashboard, 用户可以直接在浏览器上观察 Codis 集群的运行状态.</div><br><div></div><br><div>codis-server 是 Codis 项目维护的一个 Redis 分支, 基于 2.8.21 开发, 加入了 slot 的支持和原子的数据迁移指令. Codis 上层的 codis-proxy 和 codis-config 只能和这个版本的 Redis 交互才能正常运行.</div><br><div></div><br><div>Codis 依赖 ZooKeeper 来存放数据路由表和 codis-proxy 节点的元信息, codis-config 发起的命令都会通过 ZooKeeper 同步到各个存活的 codis-proxy.</div><br><div></div><br><div>Codis 支持按照 Namespace 区分不同的产品, 拥有不同的 product name 的产品, 各项配置都不会冲突.</div><br><div></div>

</li>
</ul>
<h3 id="1-安装go环境"><a href="#1-安装go环境" class="headerlink" title="1.安装go环境"></a>1.安装go环境</h3><div>Go语言是<a href="http://baike.baidu.com/view/1931.htm" target="_blank" rel="external">谷歌</a>2009发布的第二款开源编程语言。</div><br><div>Go语言专门针对<a href="http://baike.baidu.com/view/4694429.htm" target="_blank" rel="external">多处理器系统</a>应用程序的编程进行了优化，使用Go编译的程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。</div><br><div><br><pre class="lang:sh decode:true">下载地址：<a href="https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz" target="_blank" rel="external">https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz</a><br>[root@VM-241 ~]# tar xf go1.5.1.linux-amd64.tar.gz -C /usr/local/<br>[root@VM-241 ~]# vim /etc/profile<br>export GOROOT=/usr/local/go<br>export GOPATH=/usr/local/codis<br>export PATH=$PATH:$GOROOT/bin<br><br>[root@VM-241 ~]# source /etc/profile</pre><br><br>### 2.安装zookeeper<br><br>ZooKeeper是一个<a href="http://baike.baidu.com/view/402382.htm" target="_blank" rel="external">分布式</a>的，开放源码的<a href="http://baike.baidu.com/view/553502.htm" target="_blank" rel="external">分布式应用程序</a>协调服务，是<a href="http://baike.baidu.com/view/105.htm" target="_blank" rel="external">Google</a>的Chubby一个<a href="http://baike.baidu.com/view/9664.htm" target="_blank" rel="external">开源</a>的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。<br><br>zookeeper依赖java环境，所以还要先安装java<br><pre class="lang:sh decode:true">[root@VM-241 ~]# yum install -y java-1.8.0-openjdk</pre><br><pre class="lang:sh decode:true">zookeeper下载地址：<br>[root@VM-241 ~]# wget <a href="http://apache.stu.edu.tw/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="external">http://apache.stu.edu.tw/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</a><br><br>[root@VM-241 ~]# tar xf zookeeper-3.4.6.tar.gz<br>[root@VM-241 ~]# mv zookeeper-3.4.6 /usr/local/zookeeper<br><br>[root@VM-241 ~]# chown root. /usr/local/zookeeper -R<br>[root@VM-241 ~]# cp /usr/local/zookepper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg<br><br>启动服务<br>[root@VM-241 ~]# /usr/local/zookeeper/bin/zkServer.sh start<br><br>[root@VM-241 ~]# netstat -lutnp |grep java<br>tcp        0      0 0.0.0.0:2181                0.0.0.0:<em>                   LISTEN      1126/java<br>tcp        0      0 0.0.0.0:52774               0.0.0.0:</em>                   LISTEN      1126/java</pre><br><br>### 3.安装codis<br><br>建议只通过go get命令来下载codis，除非你非常熟悉go语言的目录引用形式从而不会导致代码放错地方。该命令会下载master分支的最新版，我们会确保master分支的稳定。<br><pre class="lang:sh decode:true">[root@VM-241 ~]# go get -u -d github.com/wandoulabs/codis<br><br>[root@VM-241 ~]# cd $GOPATH/src/github.com/wandoulabs/codis<br><br>[root@VM-241 codis]# ./bootstrap.sh<br><br>Hint: It’s a good idea to run ‘make test’ ;)<br><br>make[2]: Leaving directory <code>/usr/local/codis/src/github.com/wandoulabs/codis/extern/redis-2.8.21/src&#39;
make[1]: Leaving directory</code>/usr/local/codis/src/github.com/wandoulabs/codis/extern/redis-2.8.21’<br>go test ./pkg/… ./cmd/… -race<br>ok      github.com/wandoulabs/codis/pkg/models    20.779s<br>ok      github.com/wandoulabs/codis/pkg/proxy    10.525s<br>ok      github.com/wandoulabs/codis/pkg/proxy/redis    10.255s<br>ok      github.com/wandoulabs/codis/pkg/proxy/router    2.170s<br>?       github.com/wandoulabs/codis/pkg/utils    [no test files]<br>?       github.com/wandoulabs/codis/pkg/utils/assert    [no test files]<br>?       github.com/wandoulabs/codis/pkg/utils/atomic2    [no test files]<br>ok      github.com/wandoulabs/codis/pkg/utils/bytesize    0.016s<br>?       github.com/wandoulabs/codis/pkg/utils/errors    [no test files]<br>?       github.com/wandoulabs/codis/pkg/utils/log    [no test files]<br>?       github.com/wandoulabs/codis/pkg/utils/trace    [no test files]<br>?       github.com/wandoulabs/codis/cmd/cconfig    [no test files]<br>?       github.com/wandoulabs/codis/cmd/proxy    [no test files]</pre><br>执行全部指令后，会在 bin 文件夹生成 codis-config, codis-proxy 两个可执行文件, (另外, bin/assets 文件夹是 codis-config 的 dashboard http 服务需要的前端资源, 需要和 codis-config 放置在同一文件夹下)<br><br>### 4.部署<br><br><div>配置文件,codis-config 和 codis-proxy 在不加 -c 参数的时候, 默认会读取当前目录下的 config.ini 文件</div><br><div><br><pre class="lang:sh decode:true">[root@VM-241 codis]# egrep -v ‘^#|^$’ config.ini<br>coordinator=zookeeper<br>zk=127.0.0.1:2181<br>product=test<br>dashboard_addr=10.19.21.241:18087<br>password=<br>backend_ping_period=5<br>session_max_timeout=1800<br>session_max_bufsize=131072<br>session_max_pipeline=1024<br>zk_session_timeout=30<br>proxy_id=proxy_1</pre><br><br>##### 4.1 启动dashboard<br><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config dashboard</pre><br>打开浏览器<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-5@2x.jpg" alt=""><br><br></div><br></div>

<h5 id="4-2-初始化slots"><a href="#4-2-初始化slots" class="headerlink" title="4.2 初始化slots"></a>4.2 初始化slots</h5><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config slot init
{
  "msg": "OK",
  "ret": 0
}
该命令会在zookeeper上创建slot相关信息</pre>

<h5 id="4-3-启动codis-redis"><a href="#4-3-启动codis-redis" class="headerlink" title="4.3 启动codis redis"></a>4.3 启动codis redis</h5><pre class="lang:sh decode:true">[root@VM-241 codis]# bin/codis-server --port 6379 &amp;
[root@VM-241 codis]# bin/codis-server --port 6380 &amp;
[root@VM-241 codis]# bin/codis-server --port 6479 &amp;
[root@VM-241 codis]# bin/codis-server --port 6480 &amp;</pre>

<h5 id="4-4-添加redis-server-group"><a href="#4-4-添加redis-server-group" class="headerlink" title="4.4 添加redis server group"></a>4.4 添加redis server group</h5><div>每个server group作为一个reds服务器组存在，只允许有一个master，可以有多个slave，group id仅支持大于等于1的整数</div><br><div>例如：添加两个server group，每个group有两个reds实例，group id分别为1和2，reds实例为一主一从。</div><br><div>添加一个group， group的id为1，并添加一个reds master到该group</div><br><div><br><pre class="lang:sh decode:true">[root@VM-241 codis]# bin/codis-config server add 1 localhost:6379 master<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>添加一个redis slave到该group<br>[root@VM-241 codis]# bin/codis-config server add 1 localhost:6380 slave<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>类似再添加group，group的id为2<br>[root@VM-241 codis]# bin/codis-config server add 2 localhost:6479 master<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config server add 2 localhost:6480 slave<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}</pre><br><br>#### <img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-7@2x.jpg" alt=""><br><br>### 5. <strong>设置 server group 服务的 slot 范围</strong><br><br><div>Codis 采用 Pre-sharding 的技术来实现数据的分片, 默认分成 1024 个 slots (0-1023), 对于每个key来说, 通过以下公式确定所属的 Slot Id : SlotId = crc32(key) % 1024 每一个 slot 都会有一个且必须有一个特定的 server group id 来表示这个 slot 的数据由哪个 server group 来提供.</div><br><div>例如：设置编号为[0, 511]的 slot 由 server group 1 提供服务, 编号 [512, 1023] 的 slot 由 server group 2 提供服务</div><br><div><br><pre class="lang:sh decode:true">[root@VM-241 codis]# bin/codis-config slot range-set 0 511 1 online<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config slot range-set 512 1023 2 online<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}</pre><br><br>###  6. 启动codis-proxy<br><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-proxy -c config.ini -L proxy.log –cpu=2 –addr=0.0.0.0:19000 –http-addr=0.0.0.0:11000 &amp;<br>[1] 27716<br>[root@VM-241 codis]#<br>  <strong>_</strong>  <strong><strong>    </strong></strong>/ /  (<em>)  <em>__</em></em><br> / <strong>_/ / </strong> \  / <strong>  /  / /  / _</strong>/<br>/ /<strong>  / /<em>/ / / /</em>/ /  / /  (</strong>  )<br>_<strong>/  __</strong>/  _<em>,</em>/  /_/  /<em>__</em>/</pre><br>刚启动的 codis-proxy 默认是处于 offline状态的, 然后设置 proxy 为 online 状态, 只有处于 online 状态的 proxy 才会对外提供服务<br><pre class="lang:sh decode:true ">[root@VM-241 codis]#  bin/codis-config -c config.ini proxy online proxy_1<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}</pre><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-3@2x.jpg" alt=""><br><br>### 7.测试分片<br><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# redis-cli -h 127.0.0.1 -p 19000<br>redis 127.0.0.1:19000&gt; set a 1<br>OK<br>redis 127.0.0.1:19000&gt; set b 2<br>OK<br>redis 127.0.0.1:19000&gt; set c 3<br>OK</pre><br>只有在group_2有数据。应该是数据量少<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-8@2x.jpg" alt=""><br><br>脚本批量插入数据<br><pre class="lang:sh decode:true ">#!/bin/bash<br><br>number=2000<br>let i=0<br>while  [ $i -le $number ];do<br>    redis-cli -h 10.19.21.241 -p 19000 set name{$i} ${i}<br>    ((i++))<br>done</pre><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-9@2x.jpg" alt=""><br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-10@2x.jpg" alt=""><br><br>### 8.在线添加slave<br><br>首先再启动两个server<br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-server –port 6381 &amp;<br>[root@VM-241 codis]# bin/codis-server –port 6481 &amp;</pre><br>然后将两个server分别添加到group中<br><br>&nbsp;<br><br>#### <img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-11@2x.jpg" alt=""><br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-12@2x.jpg" alt=""><br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-13@2x.jpg" alt=""><br><br>### 9. 移除节点<br><br>##### 9.1 设置proxy为offline<br><br><pre class="lang:sh decode:true">[root@VM-241 codis]# bin/codis-config proxy offline proxy_1<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[5]   Exit 1                  bin/codis-proxy -c config.ini -L proxy.log –cpu=2 –addr=0.0.0.0:19000 –http-addr=0.0.0.0:11000</pre><br><br>##### 9.2 重新初始化slot<br><br><pre class="lang:sh decode:true">[root@VM-241 codis]# bin/codis-config slot init -f<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}</pre><br><br>##### 9.3 移除节点<br><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config server remove-group 1<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config server remove-group 2<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config server remove-group 3<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}</pre><br>查看页面<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150915-14@2x.jpg" alt=""><br><br>###### ##############################################<br><br>错误1：<br><br>启动dashboard报错，提示已经存在pid文件<br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config -c config.ini dashboard &amp;<br>[1] 441<br>[root@VM-241 codis]# 2015/09/15 10:23:05 dashboard.go:160: [INFO] dashboard listening on addr: :18087<br>2015/09/15 10:23:05 dashboard.go:234: [PANIC] create zk node failed<br>[error]: dashboard already exists: {“addr”: “10.19.21.241:18087”, “pid”: 12687}<br>[stack]:<br>    3   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:234<br>            main.runDashboard<br>    2   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/dashboard.go:54<br>            main.cmdDashboard<br>    1   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:84<br>            main.runCommand<br>    0   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151<br>            main.main<br>        … …<br><br>[1]+  Exit 1                  bin/codis-config -c config.ini dashboard</pre><br>解决办法：<br><br>到zk里删除dashboard<br><pre class="lang:sh decode:true ">[root@VM-241 codis]# /usr/local/zookeeper/bin/zkCli.sh<br>Connecting to localhost:2181<br>2015-09-15 10:25:16,154 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT<br>2015-09-15 10:25:16,162 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=VM-241<br>2015-09-15 10:25:16,162 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_51<br>2015-09-15 10:25:16,167 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation<br>2015-09-15 10:25:16,168 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.51-1.b16.el6_7.x86_64/jre<br>2015-09-15 10:25:16,168 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper/bin/../build/classes:/usr/local/zookeeper/bin/../build/lib/<em>.jar:/usr/local/zookeeper/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper/bin/../lib/netty-3.7.0.Final.jar:/usr/local/zookeeper/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper/bin/../zookeeper-3.4.6.jar:/usr/local/zookeeper/bin/../src/java/lib/</em>.jar:/usr/local/zookeeper/bin/../conf:<br>2015-09-15 10:25:16,168 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib<br>2015-09-15 10:25:16,168 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp<br>2015-09-15 10:25:16,169 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;<br>2015-09-15 10:25:16,169 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux<br>2015-09-15 10:25:16,169 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64<br>2015-09-15 10:25:16,169 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=2.6.32-573.1.1.el6.x86_64<br>2015-09-15 10:25:16,170 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root<br>2015-09-15 10:25:16,170 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root<br>2015-09-15 10:25:16,170 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/usr/local/codis/src/github.com/wandoulabs/codis<br>2015-09-15 10:25:16,173 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@7aec35a<br>Welcome to ZooKeeper!<br>2015-09-15 10:25:16,296 [myid:] - INFO  [main-SendThread(VM-241:2181):ClientCnxn$SendThread@975] - Opening socket connection to server VM-241/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)<br>JLine support is enabled<br>2015-09-15 10:25:16,542 [myid:] - INFO  [main-SendThread(VM-241:2181):ClientCnxn$SendThread@852] - Socket connection established to VM-241/127.0.0.1:2181, initiating session<br>2015-09-15 10:25:16,583 [myid:] - INFO  [main-SendThread(VM-241:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server VM-241/127.0.0.1:2181, sessionid = 0x14fcb1992f9000a, negotiated timeout = 30000<br><br>WATCHER::<br><br>WatchedEvent state:SyncConnected type:None path:null<br>[zk: localhost:2181(CONNECTED) 0] help<br>ZooKeeper -server host:port cmd args<br>    stat path [watch]<br>    set path data [version]<br>    ls path [watch]<br>    delquota [-n|-b] path<br>    ls2 path [watch]<br>    setAcl path acl<br>    setquota -n|-b val path<br>    history<br>    redo cmdno<br>    printwatches on|off<br>    delete path [version]<br>    sync path<br>    listquota path<br>    rmr path<br>    get path [watch]<br>    create [-s] [-e] path data acl<br>    addauth scheme auth<br>    quit<br>    getAcl path<br>    close<br>    connect host:port<br><br>[zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_test/dashboard<br>[zk: localhost:2181(CONNECTED) 7] quit<br>Quitting…<br>2015-09-15 10:26:07,248 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@512] - EventThread shut down<br>2015-09-15 10:26:07,249 [myid:] - INFO  [main:ZooKeeper@684] - Session: 0x14fcb1992f9000a closed</pre><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config -c config.ini dashboard &amp;<br>[1] 623<br>[root@VM-241 codis]# 2015/09/15 10:26:11 dashboard.go:160: [INFO] dashboard listening on addr: :18087<br>2015/09/15 10:26:11 dashboard.go:143: [INFO] dashboard node created: /zk/codis/db_test/dashboard, {“addr”: “10.19.21.241:18087”, “pid”: 623}<br>2015/09/15 10:26:11 dashboard.go:144: [WARN] <strong><strong>**</strong></strong> Attention <strong><strong>**</strong></strong><br>2015/09/15 10:26:11 dashboard.go:145: [WARN] You should use <code>kill {pid}</code> rather than <code>kill -9 {pid}</code> to stop me,<br>2015/09/15 10:26:11 dashboard.go:146: [WARN] or the node resisted on zk will not be cleaned when I’m quiting and you must remove it manually<br>2015/09/15 10:26:11 dashboard.go:147: [WARN] <strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></pre><br>错误2:<br><br>删除group 下的节点被锁<br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config server remove 2 10.19.21.241:6380<br>2015/09/15 10:29:41 main.go:153: [PANIC] run sub-command failed<br>[error]: http status code 500, zkutil: obtaining lock timed out<br>    4   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/utils.go:66<br>            main.callApi<br>    3   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:124<br>            main.runRemoveServerFromGroup<br>    2   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/server_group.go:57<br>            main.cmdServer<br>    1   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:86<br>            main.runCommand<br>    0   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:151<br>            main.main<br>        … …<br>[stack]:<br>    0   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:153<br>            main.main<br>        … …<br></pre><br>同样到zk里删除整个db_test<br><pre class="lang:sh decode:true ">[zk: localhost:2181(CONNECTED) 5] ls /zk/codis/db_test<br>[proxy, slots, servers, LOCK, migrate_tasks, actions, fence, ActionResponse, dashboard]<br>[zk: localhost:2181(CONNECTED) 6] delete /zk/codis/db_test<br>Node not empty: /zk/codis/db_test<br></pre><br>停止服务<br><pre class="lang:sh decode:true ">[root@VM-241 codis]# ps -ef |grep codis<br>root       623 32515  0 10:26 pts/3    00:00:01 bin/codis-config -c config.ini dashboard<br>root      1663 32515  0 10:35 pts/3    00:00:00 grep codis<br>root     13115     1  0 Sep14 ?        00:00:42 bin/codis-server <em>:6379<br>root     13134     1  0 Sep14 ?        00:00:42 bin/codis-server </em>:6380<br>root     13210     1  0 Sep14 ?        00:00:41 bin/codis-server <em>:6480<br>root     13229     1  0 Sep14 ?        00:00:41 bin/codis-server </em>:6479<br>[root@VM-241 codis]# pkill codis<br>2015/09/15 10:35:29 dashboard.go:154: [INFO] removing dashboard node<br>2015/09/15 10:35:29 main.go:104: [PANIC] ctrl-c or SIGTERM found, exit<br>[stack]:<br>    0   /usr/local/codis/src/github.com/wandoulabs/codis/cmd/cconfig/main.go:104<br>            main.func·010<br>        … …<br>[1]+  Exit 1                  bin/codis-config -c config.ini dashboard<br>[root@VM-241 codis]# ps -ef |grep codis<br>root      1694 32515  0 10:35 pts/3    00:00:00 grep codis</pre><br><pre class="lang:sh decode:true ">[root@VM-241 codis]# bin/codis-config action remove-lock<br>2015/09/15 10:50:29 action.go:331: [INFO] deleting../zk/codis/db_test/LOCK/lock-0000000038<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config server list<br>[<br>  {<br>    “id”: 1,<br>    “product_name”: “test”,<br>    “servers”: [<br>      {<br>        “addr”: “localhost:6380”,<br>        “group_id”: 1,<br>        “type”: “slave”<br>      },<br>      {<br>        “addr”: “localhost:6379”,<br>        “group_id”: 1,<br>        “type”: “master”<br>      }<br>    ]<br>  },<br>  {<br>    “id”: 2,<br>    “product_name”: “test”,<br>    “servers”: [<br>      {<br>        “addr”: “10.19.21.241:6380”,<br>        “group_id”: 2,<br>        “type”: “offline”<br>      },<br>      {<br>        “addr”: “localhost:6480”,<br>        “group_id”: 2,<br>        “type”: “master”<br>      }<br>    ]<br>  }<br>]<br>[root@VM-241 codis]# bin/codis-config server remove 2 10.19.21.241:6380<br>2015/09/15 10:52:24 server_group.go:182: [INFO] {offline 2 10.19.21.241:6380}<br>{<br>  “msg”: “OK”,<br>  “ret”: 0<br>}<br>[root@VM-241 codis]# bin/codis-config server list<br>[<br>  {<br>    “id”: 1,<br>    “product_name”: “test”,<br>    “servers”: [<br>      {<br>        “addr”: “localhost:6380”,<br>        “group_id”: 1,<br>        “type”: “slave”<br>      },<br>      {<br>        “addr”: “localhost:6379”,<br>        “group_id”: 1,<br>        “type”: “master”<br>      }<br>    ]<br>  },<br>  {<br>    “id”: 2,<br>    “product_name”: “test”,<br>    “servers”: [<br>      {<br>        “addr”: “localhost:6480”,<br>        “group_id”: 2,<br>        “type”: “master”<br>      }<br>    ]<br>  }<br>]<br></pre><br>&nbsp;<br><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix使用sendEmail脚本发送邮件]]></title>
      <url>http://yoursite.com/2015/09/09/zabbix-uses-sendemail-script-to-send-mail/</url>
      <content type="html"><![CDATA[<p>zabbix版本：2.5.0</p>
<p>今天上午来上班，打开邮箱没有备份通知邮件，难道是被拒了。马上登陆服务器查看，果然是。</p>
<p><pre class="lang:sh decode:true"># less /var/mail/root<br>reason: 550 Ip frequency limited. <a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000725" target="_blank" rel="external">http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000725</a></pre><br>&nbsp;</p>
<div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-1@2x.jpg" alt=""></div><br><div>下面我将选择sendEmail来作为邮件客户端，sendEmail是一个轻量级的，命令行的SMTP邮件客户端</div><br><div></div><br><div>下载地址：</div><br><div><br><pre class="lang:sh decode:true"># wget <a href="http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz" target="_blank" rel="external">http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</a></pre><br>解压：<br><pre class="lang:sh decode:true"># tar xf sendEmail-v1.56.tar.gz</pre><br><div><br><br>拷贝命令<br><pre class="lang:sh decode:true"># cp sendEmail-v1.56/sendEmail /usr/local/bin/<br># chmod +x /usr/local/bin/sendEmail</pre><br>编写邮件脚本<br><pre class="lang:sh decode:true"># vim sendEmail.sh<br>#!/bin/bash<br>to_mail=$1<br>subject=$2<br>body=$3<br>from_mail=”admin@example.com”<br>smtp=”smtp.exmail.qq.com”<br>passwd=”admin”<br><br>/usr/local/bin/sendEmail  -f $from_mail -t $to_mail -s $smtp -u “$subject” -m “$body”  -xu $from_mail -xp $passwd -o message-content-type=text -o message-charset=utf8 -o tls=auto &gt;&gt; /var/log/zabbix/sendEmail.log</pre><br><pre class="lang:sh decode:true">命令说明：<br>/usr/local/bin/sendEmail      命令主程序<br>-f admin@example.com          发件人邮箱<br>-s smtp.exmail.qq.com         发件人邮箱的smtp服务器<br>-u “邮件测试标题”               邮件的标题<br>-o message-content-type=text  邮件内容的格式,text表示它是text格式<br>-o message-charset=utf8       邮件内容编码<br>-o tls=auto                   加密类型自动<br>-xu admin@example.com         发件人邮箱的用户名<br>-xp admin                     发件人邮箱密码<br>-m “邮件测试内容”               邮件的具体内容<br>如果有不明白的可以查看帮助信息<br>sendEmail -h</pre><br>测试邮件发送<br><pre class="lang:sh decode:true "># chmod +x sendEmail.sh<br># ./sendEmail.sh monitor@baicare.com “邮件测试标题” “邮件测试内容”</pre><br>&nbsp;<br><br></div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-2@2x.jpg" alt=""></div><br><div>下面把此脚本应用到zabbix里</div><br><div>  <img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-3@2x.jpg" alt=""></div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-4@2x.jpg" alt=""></div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-5@2x.jpg" alt=""></div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-6@2x.jpg" alt=""></div><br><div>到服务器里停止svn服务，测试是否收到邮件</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150909-7@2x.jpg" alt=""></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix2.4.4升级到2.5.0]]></title>
      <url>http://yoursite.com/2015/09/08/zabbix-2-4-4-upgrade-to-zabbix-2-5-0/</url>
      <content type="html"><![CDATA[<div>zabbix2.5发布于2015年8月19日，只发布了源码，需要更新的同学需要自己编译</div><br><div>更新安装时会有3.0的提示。请不要惊慌。2.5应该属于过渡版。</div><br><div>如果你是2.0版本可以升级，如果是低于2.0请升级到2.x然后再升级到2.5</div><br><div></div><br><div>下面是升级步骤：</div><br><div>1.关闭zabbix server服务</div><br><div><br><pre class="lang:sh decode:true"># /etc/init.d/zabbix_server stop</pre><br>关闭服务防止新数据提交到数据导致数据不一致<br><br>2.备份数据库<br><pre class="lang:sh decode:true"># mysqldump -uzabbix -pzabbix zabbix &gt; zabbix_bak.sql</pre><br><div>3.备份文件</div><br><div><br><pre class="lang:sh decode:true"># 7za a /usr/local/etc/zabbix<em> /app/zabbix /usr/local/bin/zabbix</em></pre><br></div><br><div>备份配置文件，网站文件，二进制文件</div><br><div></div><br><div><br><div>4.安装新版zabbix</div><br><div></div><br><div>下载地址：<a href="http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Development/2.5.0/zabbix-2.5.0.tar.gz/download" target="_blank" rel="external">http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Development/2.5.0/zabbix-2.5.0.tar.gz/download</a></div><br></div><br><div><br><pre class="lang:sh decode:true"># tar xf zabbix-2.5.0.tar.gz<br># cd zabbix-2.5.0<br># ./configure –enable-server –enable-agent –with-mysql –enable-ipv6 –with-net-snmp –with-libcurl –with-libxml2<br># make install<br><br>拷贝网站文件<br># cp -R frontends/php/* /app/zabbix</pre><br>5.启动zabbix server服务<br><pre class="lang:sh decode:true"># /etc/init.d/zabbix_server start</pre><br>6.安装zabbix<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-1@2x.jpg" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-2@2x.jpg" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-3@2x.jpg" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-4@2x.jpg" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-5@2x.jpg" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-6@2x.jpg" alt=""><br><br>&nbsp;<br><div>这个地方报错了，权限问题</div><br><div>chown www. /app/zabbix -R</div><br><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-7@2x.jpg" alt=""></div><br><div><br><div>完成安装后没有中文选项,需要修改配置文件</div><br><div><br><pre class="lang:sh decode:true"># vim /app/zabbix/include/locales.inc.php<br>‘zh<em>CN’ =&gt; array(‘name’ =&gt; </em>(‘Chinese (zh_CN)’),        ‘display’ =&gt; true),</pre><br>修改中文乱码<br><pre class="lang:sh decode:true "># cp simhei.ttf /app/zabbix/fonts/<br># sed -i ‘s/DejaVuSans/simhei/g’ /home/wwwroot/zabbix/include/defines.inc.php</pre><br>升级后界面<br><br><img src="http://www.cenhq.com/wp-content/uploads/2015/09/QQ20150908-8@2x.jpg" alt=""><br><br></div><br></div><br></div><br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix监控tcp连接数]]></title>
      <url>http://yoursite.com/2015/09/06/zabbix-monitor-tcp-connection-number/</url>
      <content type="html"><![CDATA[<p><div>系统：centos6.5</div></p>
<p><div>zabbix：2.4.4</div></p>
<p><div></div></p>
<p><div>首先创建脚本</div></p>
<p><div></div></p>
<p><pre class="lang:sh decode:true ">[root@monitor scripts]# vim /usr/local/scripts/tcp_connections.sh</pre></p>
<p>#!/bin/bash</p>
<p>stat() {<br>        netstat -an | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’<br>        }</p>
<p>case $1 in<br>        TIME_WAIT)<br>        stat |grep ‘TIME_WAIT’ |awk ‘{print $2}’<br>        ;;<br>        CLOSE_WAIT)<br>        stat | grep ‘CLOSE_WAIT’ |awk ‘{print $2}’<br>        ;;<br>        FIN_WAIT1)<br>        stat | grep ‘FIN_WAIT1’ |awk ‘{print $2}’<br>        ;;<br>        ESTABLISHED)<br>        stat | grep ‘ESTABLISHED’ |awk ‘{print $2}’<br>        ;;<br>        SYN_RECV)<br>        stat |grep ‘SYN_RECV’ |awk ‘{print $2}’<br>        ;;<br>        LAST_ACK)<br>        stat |grep ‘LAST_ACK’ |awk ‘{print $2}’<br>        ;;<br>        LISTEN)<br>        stat |grep ‘LISTEN’ |awk ‘{print $2}’<br>        ;;<br>        *)<br>        echo “Usage: TIME_WAIT CLOSE_WAIT FIN_WAIT1 ESTABLISHED SYN_RECV LAST_ACK LISTEN”<br>        ;;<br>esac<br>测试脚本是否可用</p>
<p><pre class="lang:sh decode:true ">[root@monitor scripts]# chmod +x tcp_connections.sh<br>[root@monitor scripts]# ./tcp_connections.sh ESTABLISHED<br>125</pre><br>编辑zabbix_agentd配置</p>
<p><pre class="lang:sh decode:true">[root@monitor scripts]# vim /usr/local/etc/zabbix_agentd.conf.d/monitor_tcp_connections.conf<br>UserParameter=tcp.time_wait,/usr/local/scripts/tcp_connections.sh TIME_WAIT<br>UserParameter=tcp.close_wait,/usr/local/scripts/tcp_connections.sh CLOSE_WAIT<br>UserParameter=tcp.fin_wait1,/usr/local/scripts/tcp_connections.sh FIN_WAIT1<br>UserParameter=tcp.established,/usr/local/scripts/tcp_connections.sh ESTABLISHED<br>UserParameter=tcp.syn_recv,/usr/local/scripts/tcp_connections.sh SYN_RECV<br>UserParameter=tcp.last_ack,/usr/local/scripts/tcp_connections.sh LAST_ACK<br>UserParameter=tcp.listen,/usr/local/scripts/tcp_connections.sh LISTEN</pre><br>重启服务</p>
<p><pre class="lang:sh decode:true">[root@monitor scripts]# /etc/init.d/zabbix_agentd restart<br>Shutting down zabbix_agentd:                               [确定]<br>Starting zabbix_agentd:                                    [确定]</pre><br>测试监控是否有数据</p>
<p><pre class="lang:sh decode:true ">[root@monitor scripts]# zabbix_get -s localhost -k tcp.established<br>126</pre><br>然后在web里创建模版，方便以后多台添加</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/09/1.png" alt=""></p>
<p><br>填写模版名称</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/09/2.png" alt=""></p>
<p>&nbsp;</p>
<p>创建监控项</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/09/3.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/4.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/5.png" alt=""></p>
<p>&nbsp;</p>
<p>创建图形</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/09/6.png" alt=""><img src="http://www.cenhq.com/wp-content/uploads/2015/09/7.png" alt=""></p>
<p>&nbsp;</p>
<p><div>模版创建完成后，要关联到监控主机</div></p>
<p><div>点击主机，选择模版</div></p>
<p><div><img src="http://www.cenhq.com/wp-content/uploads/2015/09/9.png" alt=""></div></p>
<p><div></div><br>等一会儿数据图形就会出现</p>
<p><img src="http://www.cenhq.com/wp-content/uploads/2015/09/8.png" alt=""></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脚本回滚代码]]></title>
      <url>http://yoursite.com/2015/09/06/rollback-script-code/</url>
      <content type="html"><![CDATA[<p>上一篇写了发布代码脚本，下面是一篇回滚代码脚本，虽然不是很完善，至少可以方便使用。</p>
<p>有发布就有回滚，防止代码问题能够快速回滚。</p>
<p>下面贴代码：</p>
<p><pre class="lang:sh decode:true">#!/bin/bash</pre></p>
<p>#Author: Charlie.cen</p>
<p>#Email: cenhuqing@gmail.com</p>
<p>#Date: 2015/08/27</p>
<h1 id="Check-if-user-is-root"><a href="#Check-if-user-is-root" class="headerlink" title="Check if user is root"></a>Check if user is root</h1><p>[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1</p>
<p>export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>clear</p>
<h1 id="Define-Var"><a href="#Define-Var" class="headerlink" title="Define Var"></a>Define Var</h1><p>Server_pre=”10.19.21.241”<br>Server_online=”10.19.21.242 10.19.21.243”<br>release_path=”/data/deploy”<br>Web_dir=”/app/server”</p>
<p>while :<br>do<br>echo “请选择回滚服务器:”<br>echo -e “t�33[32m1�33[0m. 预发布”<br>echo -e “t�33[32m2�33[0m. 线上”<br>read -p “请输入你服务器的编号: “ Remote_server<br>if [ $Remote_server != 1 -a $Remote_server != 2 ];then<br>echo -e “�33[31m 输入错误,只能输入数字: 1 , 2�33[0m”<br>else<br>if [ $Remote_server == 1 ];then<br>echo  “请选择回滚时间:”<br>ssh root@$Server_pre “ls -l $release_path” |awk ‘{print $9}’<br>read -p “请输入回滚时间目录: “ Time_dir<br>echo -e “t�33[32m 预发布241,你将回滚到$Time_dir……�33[0m”<br>ssh root@10.19.21.241 “rm -rf $Web_dir;ln -s $release_path/$Time_dir/server $Web_dir” &amp;&amp; echo  -e “t�33[32m 预发布241,你已经回滚到$Time_dir�33[0m” || echo -e “t�33[31m 预发布241,回滚失败,请查看原因�33[0m”<br>break<br>else<br>echo -e “请选择回滚时间:”<br>for i in ${Server_online[@]};do<br>if [ $i == “10.19.21.242” ];then<br>ssh root@$i “ls -l $release_path” |awk ‘{print $9}’<br>read -p “请输入线上242回滚时间目录: “ Time_dir_242<br>echo -e “t�33[32m 线上242,你将回滚到$Time_dir_242……�33[0m”<br>ssh root@$i “rm -rf $Web_dir;ln -s $release_path/$Time_dir_242/server $Web_dir” &amp;&amp; echo -e “t�33[32m 线上242,你已经回滚到$Time_dir_242�33[0m” || echo -e “t�33[31m 线上242回滚失败,请查看原因�33[0m”<br>echo<br>else<br>ssh root@$i “ls -l $release_path” |awk ‘{print $9}’<br>read -p “请输入线上243回滚时间目录: “ Time_dir_243<br>echo -e “t�33[32m 线上243,你将回滚到$Time_dir_243……�33[0m”<br>ssh root@$i “rm -rf $Web_dir;ln -s $release_path/$Time_dir_243/server $Web_dir” &amp;&amp; echo -e “t�33[32m 线上243,你已经回滚到$Time_dir_242�33[0m” || echo -e “t�33[31m 线上243回滚失败,请查看原因�33[0m”<br>echo<br>fi<br>done<br>break<br>fi<br>fi<br>done<br><br>首先看原来的软链接</p>
<p><pre class="lang:sh decode:true ">[root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/“<br>10.19.21.243 | success | rc=0 &gt;&gt;<br>total 0<br>lrwxrwxrwx 1 root root 35 Aug 27 15:06 server -&gt; /data/deploy/20150826_181338/server</pre></p>
<p>10.19.21.242 | success | rc=0 &gt;&gt;<br>total 0<br>lrwxrwxrwx 1 root root 35 Aug 27 15:06 server -&gt; /data/deploy/20150826_181341/server<br>执行操作</p>
<p><pre class="lang:sh decode:true ">[root@VM-249 scripts]# ./roll_back.sh<br>请选择回滚服务器:<br>1. 预发布<br>2. 线上<br>请输入你服务器的编号: 2<br>请选择回滚时间:</pre></p>
<p>20150825_183223<br>20150826_163608<br>20150826_164120<br>20150826_164640<br>20150826_171159<br>20150826_173401<br>20150826_175930<br>20150826_181146<br>20150826_181341<br>请输入线上242回滚时间目录: 20150826_181146<br>线上242,你将回滚到20150826_181146……<br>线上242,你已经回滚到20150826_181146</p>
<p>20150825_183221<br>20150826_163605<br>20150826_164118<br>20150826_164638<br>20150826_171156<br>20150826_173359<br>20150826_175928<br>20150826_181143<br>20150826_181338<br>请输入线上243回滚时间目录: 20150826_181143<br>线上243,你将回滚到20150826_181143……<br>线上243,你已经回滚到20150826_181146<br>再次查看软链接</p>
<p><pre class="lang:sh decode:true ">[root@VM-249 scripts]# ansible online -m shell -a “ls -l /app/“<br>10.19.21.243 | success | rc=0 &gt;&gt;<br>total 0<br>lrwxrwxrwx 1 root root 35 Aug 27 15:29 server -&gt; /data/deploy/20150826_181143/server</pre></p>
<p>10.19.21.242 | success | rc=0 &gt;&gt;<br>total 0<br>lrwxrwxrwx 1 root root 35 Aug 27 15:29 server -&gt; /data/deploy/20150826_181146/server<br>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脚本发布代码]]></title>
      <url>http://yoursite.com/2015/09/06/release-script-code/</url>
      <content type="html"><![CDATA[<div><br><br>环境：centos6.5<br><br>代码服务器：10.19.21.249<br><br>预发布服务器：10.19.21.241<br><br>线上服务器：10.19.21.242 10.19.21.243<br><br>&nbsp;<br><br>发布流程：<br><br>1. 在代码服务器上导出你要发布的项目<br><br>2. 然后选择你将要发布到哪台服务器（预发布｜线上）<br><br>3. 使用rsync同步到你选择的服务器<br><br>4. 根据你同步的目录创建软链接到网站家目录<br><br></div><br><div></div><br><div><br><div>大概就4个步骤，下面我贴上脚本，有问题可以给我留言。写的不好请多指教。</div><br><div><br><pre class="lang:sh decode:true ">#!/bin/bash<br>#Author: Charlie.cen<br>#Email: cenhuqing@gmail.com<br>#Date: 2015/08/25<br><br># Check if user is root<br>[ $(id -u) != “0” ] &amp;&amp; echo “Error: You must be root to run this script” &amp;&amp; exit 1<br><br>export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>clear<br><br>svn_user=”charlie”<br>svn_pass=”charlie_pwd”<br>checkout_path=”/home/deploy/checkout”<br>release_path=”/app/deploy”<br>svn_url=”svn://localhost/server”<br>log=”/var/log/apr_v1.log”<br>time<em>dir=`date +%Y%m%d</em>%H%M%S`<br><br>#Define checkout directory<br>if [ ! -d $checkout_path/$time_dir ];then<br>    mkdir -p $checkout_path/$time_dir<br>fi<br><br>#Chiose your svn project<br>while :<br>do<br>    echo<br>    echo “请选择你要打包的项目:”<br>    #echo “Please select your zip project:”<br>    echo -e “\t\033[32m1\033[0m.  admin”<br>    echo -e “\t\033[32m2\033[0m.  baiaimama”<br>    echo -e “\t\033[32m3\033[0m.  bi”<br>    echo -e “\t\033[32m4\033[0m.  html5”<br>    echo -e “\t\033[32m5\033[0m.  integration”<br>    echo -e “\t\033[32m6\033[0m.  school”<br>    echo -e “\t\033[32m7\033[0m.  site”<br>    echo -e “\t\033[32m8\033[0m.  server(全部)”<br>    #read -p “Please enter a number:” Num<br>    read -p “请输入你要打包的编号:” Num<br>    if [ $Num != 1 -a $Num != 2 -a $Num != 3 -a $Num != 4 -a $Num != 5 -a $Num != 6 -a $Num != 7 -a $Num != 8 ];then<br>        echo -e “\033[31m 输入错误,只能输入数字: 1,2,3,4,5,6,7,8\033[0m”<br>        #echo -e “\033[31minput error! Please only input number 1,2,3,4,5,6,7,8\033[0m”<br>    else<br>        if [ $Num == 1 ];then<br>            project=admin<br>            echo<br>            echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>            echo<br>            svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>            echo<br>            break<br>        elif [ $Num == 2 ];then<br>            project=baiaimama<br>            echo<br>            echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>            echo<br>            svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project  &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 3 ];then<br>            project=bi<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>            svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project  &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 4 ];then<br>            project=html5<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>                        svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 5 ];then<br>            project=integration<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>                        svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 6 ];then<br>            project=school<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>                        svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 7 ];then<br>            project=site<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>                        svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url/$project $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        elif [ $Num == 8 ];then<br>            project=server<br>            echo<br>                        echo -e “\t\033[32m 正在打包 $project …… \033[0m”<br>                        echo<br>                        svn export –non-interactive –trust-server-cert  –username $svn_user –password $svn_pass $svn_url $checkout_path/$time_dir/$project &gt; /dev/null &amp;&amp; echo -e “\t\033[32m $project 打包成功 \033[0m” || echo “\t\033[31m $project 打包失败 \033[0m”<br>                        echo<br>            break<br>        else<br>            echo -e “\t\033[31m $project 打包失败 \033[0m”<br>            break<br>        fi<br>    fi<br>done<br><br>IP_249=”10.19.21.249”<br>#Server_pre=”10.19.21.241”<br>Server_pre=”115.29.199.174”<br>Server_online=”10.19.21.242 10.19.21.243”<br>Web_dir=”/app/server”<br><br>#Choise Remote Server<br>while :<br>do<br>    #echo “Please select rsync to server”<br>    echo “请选择要发布的到哪台服务器:”<br>    echo -e “\t\033[32m1\033[0m. 预发布”<br>        echo -e “\t\033[32m2\033[0m. 线上”<br>    #read -p “Please enter a number:” Remote_server<br>    read -p “请输入发布到服务器的编号:” Remote_server<br>    if [ $Remote_server != 1 -a $Remote_server != 2 ];then<br>        echo -e “\033[31m 输入错误,只能输入数字: 1,2 \033[0m”<br>        #echo -e “\033[31minput error! Please only input number 1,2 \033[0m”<br>    else<br>        if [ $Remote_server == 1 ];then<br>            echo<br>            echo -e “\t\033[32m 正在同步文件到预发布…… \033[0m”<br>            echo<br>            ansible pre -m copy -a “src=mk_dir_v1.sh dest=/usr/local/scripts/ mode=755”  &gt;&gt; $log || exit 1<br>            ansible pre -m shell -a “source /usr/local/scripts/mk_dir_v1.sh” &gt;&gt; $log  || exit 1<br>            last_dir=$(ssh root@$Server_pre “ls -ltr $release_path |tail -n 1” |awk ‘{print $9}’)<br>            rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$Server_pre:$release_path/$last_dir/server &amp;&amp; echo -e  “\t\033[32m 同步到预发布成功\033[0m” || echo -e “\t\033[31m 同步到预发布失败. \033[0m”<br>            echo<br>            ssh root@$Server_pre “rm -f $Web_dir;ln -s $release_path/$last_dir/server $Web_dir” &amp;&amp; echo -e “\t\033[32m 预发布发布成功 \033[0m” || echo -e “\t\033[31m 预发布发布失败\033[0m”<br>            break<br>        else<br>            echo<br>            echo -e “\t\033[32m 正在同步到线上…… \033[0m”<br>                        echo<br>            ansible online -m copy -a “src=mk_dir_v1.sh dest=/usr/local/scripts/ mode=755”  &gt;&gt; $log || exit 1<br>            ansible online -m shell -a “source /usr/local/scripts/mk_dir_v1.sh” &gt;&gt; $log || exit 1<br>            for i in ${Server_online[@]};do<br>                if [ $i == “10.19.21.242” ];then<br>                    last_dir_242=$(ssh root@$i “ls -ltr $release_path |tail -n 1” |awk ‘{print $9}’)<br>                    rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$i:$release_path/$last_dir_242/server &amp;&amp; echo -e “\t\033[32m 同步到线上242成功 \033[0m” || echo -e “\t\033[31m 同步到线上242失败  \033[0m”<br>                    echo<br>                    ssh root@$i “rm -f $Web_dir;ln -s $release_path/$last_dir_242/server $Web_dir” &amp;&amp; echo -e “\t\033[32m 线上242发布成功 \033[0m” || echo -e “\t\033[31m 线上242发布失败  \033[0m”<br>                    echo<br>                else<br>                    last_dir_243=$(ssh root@$i “ls -ltr /data/deploy |tail -n 1” |awk ‘{print $9}’)<br>                    rsync -rlpgoDut –exclude-from=/opt/exclude.txt $checkout_path/$time_dir/$project root@$i:$release_path/$last_dir_243/server &amp;&amp; echo -e “\t\033[32m 同步到线上243成功 \033[0m” || echo -e “\t\033[31m 同步到线上243失败 \033[0m”<br>                    echo<br>                    ssh root@$i “rm -f $Web_dir;ln -s $release_path/$last_dir_242/server $Web_dir” &amp;&amp;  echo -e “\t\033[32m 线上243发布成功 \033[0m” || echo -e “\t\033[31m 线上243发布失败  \033[0m”<br>                    echo<br>                fi<br>                echo<br>            done<br>            break<br>        fi<br>    fi<br>done</pre><br>脚本中用到了ansible，主机定义如下：<br><pre class="lang:sh decode:true ">[pre]<br>10.19.21.241 ansible_ssh_user=root ansible_ssh_pass=ooxx<br><br>[online]<br>10.19.21.242 ansible_ssh_user=root ansible_ssh_pass=ooxx<br>10.19.21.243 ansible_ssh_user=root ansible_ssh_pass=ooxx</pre><br>还有个问题就是要在被发布端的定义根据时间生成的目录，这个脚本是上面的ansible调用。下面贴脚本<br><pre class="lang:sh decode:true ">#!/bin/bash<br><br>dir<em>time=$(date +%Y%m%d</em>%H%M%S)<br>release_path=”/app/deploy”<br>log=”/var/log/copy.log”<br><br>if [ ! -d $release_path/$dir_time ];then<br>    mkdir -p $release_path/$dir_time<br>fi<br><br>second_last_dir=$(ls -ltc $release_path |egrep ‘^d’|awk ‘NR==2{print $9}’)<br>cp -rf $release_path/$second_last_dir/* $release_path/$dir_time/ &amp;&amp; echo “Copy $release_path/$second_last_dir/server to $release_path/$dir_time/ successful.” &gt;&gt; $log || echo “Copy $release_path/$second_last_dir/server to $release_path/$dir_time/ failed.” &gt;&gt; $log</pre><br>最终执行结果<br><pre class="lang:sh decode:true ">请选择你要打包的项目:<br>1.  admin<br>2.  baiaimama<br>3.  bi<br>4.  html5<br>5.  integration<br>6.  school<br>7.  site<br>8.  server(全部)<br>请输入你要打包的编号:4<br><br>正在打包 html5 ……<br><br>html5 打包成功<br><br>请选择要发布的到哪台服务器:<br>1. 预发布<br>2. 线上<br>请输入发布到服务器的编号:2<br><br>正在同步到线上……<br><br>同步到线上242成功<br><br>线上242发布成功<br><br>同步到线上243成功<br><br>线上243发布成功</pre><br>查看代码是否发布<br><pre class="lang:sh decode:true ">#  ansible online -m shell -a ‘ls -l /app/server’<br>10.19.21.243 | success | rc=0 &gt;&gt;<br>lrwxrwxrwx 1 root root 35 Aug 26 18:14 /app/server -&gt; /data/deploy/20150826_181341/server<br><br>10.19.21.242 | success | rc=0 &gt;&gt;<br>lrwxrwxrwx 1 root root 35 Aug 26 18:14 /app/server -&gt; /data/deploy/20150826_181341/server</pre><br>&nbsp;<br><br></div><br></div>]]></content>
    </entry>
    
  
  
</search>
