<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charlie Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cenhq.com/"/>
  <updated>2017-05-10T09:40:41.000Z</updated>
  <id>http://www.cenhq.com/</id>
  
  <author>
    <name>Charlie Cen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel log 无法写入问题</title>
    <link href="http://www.cenhq.com/2017/05/10/laravel-can-not-write-log/"/>
    <id>http://www.cenhq.com/2017/05/10/laravel-can-not-write-log/</id>
    <published>2017-05-10T09:38:04.000Z</published>
    <updated>2017-05-10T09:40:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>账号登录报500错误，也没有返回错误信息，没办法只能使用原始方法，到现在一行一行打印。到 <code>Log::info()</code> 后面就无法正常显示了，那么问题就找到了。</p>
<p>导致无法写入日志的问题，是由于代码更新时添加了文件是<code>root</code>用户，所以创建日志文件也是<code>root</code>权限，导致其它用户的<code>www</code>权限无法写入日志文件中。<br><a id="more"></a><br>所以修改<code>storage/logs/</code>的用户权限为<code>www</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown www:www storage/logs -R</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果用户使用supervisord服务运行队列的话，如果队列里有日志记录，那么运行的用户也需要改成<code>www</code>用户。</p>
</blockquote>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>同样是日志无法记录问题，这里是本地环境使用<code>php artisan queue:work --sleep=3 --tries=3</code>运行。</p>
<p>同样在<code>job</code>中写日志，权限也是正确，就是无法记录日志，任务也正常执行。</p>
<p>最后想到重启队列解决此问题，不知道是什么原因导致。如果有知道的同学请告知一声。</p>
<p>重启队列命令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:restart</div></pre></td></tr></table></figure>
<h3 id="其它与日志无关的问题"><a href="#其它与日志无关的问题" class="headerlink" title="其它与日志无关的问题"></a>其它与日志无关的问题</h3><h4 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h4><p>最近在使用 Zizaco\Entrust 这个权限包…</p>
<p>再添加角色的时候… 报了一个错..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BadMethodCallException in Repository.php line 391:</div><div class="line">This cache store does not support tagging.</div></pre></td></tr></table></figure>
<p>应该是这个包里 有个地方用了 laravel 的cache,默认的cache是file</p>
<p>把.env 里的 CACHE_DRIVER 改成</p>
<p>CACHE_DRIVER=array</p>
<h4 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h4><p>页面出现此错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View [.] not found.</div></pre></td></tr></table></figure>
<p>解决办法，优化，清除配置缓存，路由缓存</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">php artisan optimize --force</div><div class="line">php artisan config:cache</div><div class="line">php artisan route:cache</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题1&quot;&gt;&lt;a href=&quot;#问题1&quot; class=&quot;headerlink&quot; title=&quot;问题1&quot;&gt;&lt;/a&gt;问题1&lt;/h3&gt;&lt;p&gt;账号登录报500错误，也没有返回错误信息，没办法只能使用原始方法，到现在一行一行打印。到 &lt;code&gt;Log::info()&lt;/code&gt; 后面就无法正常显示了，那么问题就找到了。&lt;/p&gt;
&lt;p&gt;导致无法写入日志的问题，是由于代码更新时添加了文件是&lt;code&gt;root&lt;/code&gt;用户，所以创建日志文件也是&lt;code&gt;root&lt;/code&gt;权限，导致其它用户的&lt;code&gt;www&lt;/code&gt;权限无法写入日志文件中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="logs" scheme="http://www.cenhq.com/tags/logs/"/>
    
      <category term="queue" scheme="http://www.cenhq.com/tags/queue/"/>
    
      <category term="日志无法写入" scheme="http://www.cenhq.com/tags/%E6%97%A5%E5%BF%97%E6%97%A0%E6%B3%95%E5%86%99%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 数组分页（带搜索功能）</title>
    <link href="http://www.cenhq.com/2017/04/24/laravel-array-use-paginate/"/>
    <id>http://www.cenhq.com/2017/04/24/laravel-array-use-paginate/</id>
    <published>2017-04-24T03:27:32.000Z</published>
    <updated>2017-04-24T03:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>由于数据是从mysql和mongodb里的两个表中取数据，并且根据两个表中的字段关联来获取数据，所有没有直接的sql获取。只有通过循环获取。然而获取的数据是数组，无法使用<code>laravel</code>自带的<code>paginate</code>分页方法。下面是解决办法：</p>
<a id="more"></a>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $name</div><div class="line">     * <span class="doctag">@param</span> $user</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     * 获取所有被拒绝的子任务</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getRejectSubTasks</span><span class="params">($name,$user)</span></span></div><div class="line">    &#123;</div><div class="line">        $data = [];</div><div class="line">        <span class="comment">//未提交的子任务</span></div><div class="line">        $subTask = SubTask::where(<span class="string">'status'</span>,<span class="number">-1</span>)-&gt;get();</div><div class="line">        <span class="comment">//获取所有拒绝的子任务并且去除重复</span></div><div class="line">        $reject = RejectReason::select(<span class="string">'subTaskId'</span>)-&gt;distinct()-&gt;get();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!$name &amp;&amp; !$user)&#123;</div><div class="line">            <span class="keyword">foreach</span>($subTask <span class="keyword">as</span> $item)&#123;</div><div class="line">                <span class="keyword">foreach</span>($reject <span class="keyword">as</span> $value)&#123;</div><div class="line">                    <span class="keyword">if</span>($item-&gt;_id == $value-&gt;subTaskId)&#123;</div><div class="line">                        $data[] = Task::where(<span class="string">'taskId'</span>,$item-&gt;taskId)-&gt;first();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($name)&#123;</div><div class="line">            <span class="keyword">foreach</span>($subTask <span class="keyword">as</span> $item)&#123;</div><div class="line">                <span class="keyword">foreach</span>($reject <span class="keyword">as</span> $value)&#123;</div><div class="line">                    <span class="keyword">if</span>($item-&gt;_id == $value-&gt;subTaskId)&#123;</div><div class="line">                        $data[] = Task::where(<span class="string">'taskId'</span>,$item-&gt;taskId)-&gt;where(<span class="string">'name'</span>,<span class="string">'like'</span>,<span class="string">"%$name%"</span>)-&gt;first();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($user)&#123;</div><div class="line">            <span class="keyword">foreach</span>($subTask <span class="keyword">as</span> $item)&#123;</div><div class="line">                <span class="keyword">foreach</span>($reject <span class="keyword">as</span> $value)&#123;</div><div class="line">                    <span class="keyword">if</span>($item-&gt;_id == $value-&gt;subTaskId)&#123;</div><div class="line">                        $data[] = Task::where(<span class="string">'taskId'</span>,$item-&gt;taskId)-&gt;where(<span class="string">'user'</span>,<span class="string">'like'</span>,<span class="string">"%$user%"</span>)-&gt;first();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($name &amp;&amp; $user)&#123;</div><div class="line">            <span class="keyword">foreach</span>($subTask <span class="keyword">as</span> $item)&#123;</div><div class="line">                <span class="keyword">foreach</span>($reject <span class="keyword">as</span> $value)&#123;</div><div class="line">                    <span class="keyword">if</span>($item-&gt;_id == $value-&gt;subTaskId)&#123;</div><div class="line">                        $data[] = Task::where(<span class="string">'taskId'</span>,$item-&gt;taskId)</div><div class="line">                            -&gt;where(<span class="string">'name'</span>,<span class="string">'like'</span>,<span class="string">"%$name%"</span>)</div><div class="line">                            -&gt;where(<span class="string">'user'</span>,<span class="string">'like'</span>,<span class="string">"%$user%"</span>)</div><div class="line">                            -&gt;first();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  $data;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="数组分页"><a href="#数组分页" class="headerlink" title="数组分页"></a>数组分页</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> $searchResults 数组</div><div class="line"> * <span class="doctag">@return</span> LengthAwarePaginator</div><div class="line"> * 给数组分页</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayPage</span><span class="params">($searchResults)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取当前的分页数，就是第6这样的</span></div><div class="line">    $currentPage = LengthAwarePaginator::resolveCurrentPage();</div><div class="line"></div><div class="line">    <span class="comment">//实例化collect方法</span></div><div class="line">    $collection = <span class="keyword">new</span> Collection($searchResults);</div><div class="line"></div><div class="line">    <span class="comment">//定义一下每页显示多少个数据</span></div><div class="line"><span class="comment">//        $perPage = 5;</span></div><div class="line"></div><div class="line">    <span class="comment">//获取当前需要显示的数据列表$currentPage * $this-&gt;prePage</span></div><div class="line">    $currentPageSearchResults = $collection-&gt;slice(($currentPage - <span class="number">1</span>) * <span class="keyword">$this</span>-&gt;prePage, <span class="keyword">$this</span>-&gt;prePage)-&gt;all();</div><div class="line"></div><div class="line">    <span class="comment">//创建一个新的分页方法</span></div><div class="line">    $paginatedSearchResults= <span class="keyword">new</span> LengthAwarePaginator($currentPageSearchResults, count($collection), <span class="keyword">$this</span>-&gt;prePage);</div><div class="line"></div><div class="line">    <span class="comment">//给分页加自定义url</span></div><div class="line">    $paginatedSearchResults = $paginatedSearchResults-&gt;setPath(env(<span class="string">"APP_HOST"</span>) . <span class="string">'/home'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $paginatedSearchResults;</div><div class="line"><span class="comment">//        return view('search', ['results' =&gt; $paginatedSearchResults]);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前台页面显示"><a href="#前台页面显示" class="headerlink" title="前台页面显示"></a>前台页面显示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2 col-md-offset-10"</span>&gt;</span></div><div class="line">        @if(empty($_GET['task_name']) &amp;&amp; empty($_GET['create_user']) &amp;&amp; empty($_GET['task_status']))</div><div class="line">            &#123;&#123; $task-&gt;links() &#125;&#125;</div><div class="line">        @endif</div><div class="line">        @if(isset($_GET['task_name']) &amp;&amp; isset($_GET['create_user']) &amp;&amp; isset($_GET['task_status']) &amp;&amp; $_GET['task_status'] != 0 )</div><div class="line">            &#123;&#123; $task-&gt;appends([</div><div class="line">                'task_name' =&gt; $_GET['task_name'],</div><div class="line">                'create_user' =&gt; $_GET['create_user'],</div><div class="line">                'task_status' =&gt; $_GET['task_status']</div><div class="line">                ])-&gt;links() &#125;&#125;</div><div class="line">        @endif</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h3><p><img src="/2017/04/24/laravel-array-use-paginate/QQ20170424-105225.jpg" alt=""><br><img src="/2017/04/24/laravel-array-use-paginate/QQ20170424-105313.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;由于数据是从mysql和mongodb里的两个表中取数据，并且根据两个表中的字段关联来获取数据，所有没有直接的sql获取。只有通过循环获取。然而获取的数据是数组，无法使用&lt;code&gt;laravel&lt;/code&gt;自带的&lt;code&gt;paginate&lt;/code&gt;分页方法。下面是解决办法：&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="http://www.cenhq.com/categories/Laravel/"/>
    
    
      <category term="paginate" scheme="http://www.cenhq.com/tags/paginate/"/>
    
      <category term="LengthAwarePaginator" scheme="http://www.cenhq.com/tags/LengthAwarePaginator/"/>
    
      <category term="Collection" scheme="http://www.cenhq.com/tags/Collection/"/>
    
      <category term="links" scheme="http://www.cenhq.com/tags/links/"/>
    
      <category term="分页" scheme="http://www.cenhq.com/tags/%E5%88%86%E9%A1%B5/"/>
    
      <category term="数组分页" scheme="http://www.cenhq.com/tags/%E6%95%B0%E7%BB%84%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装配置Supervisor</title>
    <link href="http://www.cenhq.com/2017/04/14/centos7-install-config-supervisor/"/>
    <id>http://www.cenhq.com/2017/04/14/centos7-install-config-supervisor/</id>
    <published>2017-04-14T06:17:54.000Z</published>
    <updated>2017-04-14T06:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 是用<code>Python</code>开发的一个<code>client/server</code>服务，是<code>Linux/Unix</code>系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用<code>Supervisor</code>管理的进程，当一个进程意外被杀死，<code>supervisort</code>监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写<code>shell</code>脚本来控制。</p>
<p>因为<code>Supervisor</code>是Python开发的，安装前先检查一下系统否安装了<code>Python2.4</code>以上版本。下面以<code>CentOS7</code>，<code>Python2.7</code>版本环境下，介绍<code>Supervisor</code>的安装与配置步聚：<br><a id="more"></a></p>
<h3 id="安装Python包管理工具（easy-install）"><a href="#安装Python包管理工具（easy-install）" class="headerlink" title="安装Python包管理工具（easy_install）"></a>安装Python包管理工具（easy_install）</h3><p><code>easy_install</code>是<code>setuptools</code>包里带的一个命令，使用<code>easy_install</code>实际上是在调用<code>setuptools</code>来完成安装模块的工作,所以安装<code>setuptools</code>即可。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | sudo python</div></pre></td></tr></table></figure>
<h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ easy_install supervisor</div></pre></td></tr></table></figure>
<p>supervisor安装完成后会生成三个执行程序：<code>supervisortd</code>、<code>supervisorctl</code>、<code>echo_supervisord_conf</code>，分别是supervisor的守护进程服务（用于接收进程管理命令）、客户端（用于和守护进程通信，发送管理进程的指令）、生成初始配置文件程序。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>运行supervisord服务的时候，需要指定supervisor配置文件，如果没有显示指定，默认在以下目录查找：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$CWD</span>/supervisord.conf</div><div class="line"><span class="variable">$CWD</span>/etc/supervisord.conf</div><div class="line">/etc/supervisord.conf</div><div class="line">/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)</div><div class="line">../etc/supervisord.conf (Relative to the executable)</div><div class="line">../supervisord.conf (Relative to the executable)</div><div class="line"><span class="variable">$CWD</span>表示运行supervisord程序的目录。</div></pre></td></tr></table></figure>
<p>可以通过运行<code>echo_supervisord_conf</code>程序生成supervisor的初始化配置文件，如下所示：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/supervisor</div><div class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
<h3 id="配置文件参数说明"><a href="#配置文件参数说明" class="headerlink" title="配置文件参数说明"></a>配置文件参数说明</h3><p>supervisor的配置参数较多，下面介绍一下常用的参数配置，详细的配置及说明，请参考官方文档介绍。<br>注：分号（;）开头的配置表示注释</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</div><div class="line">;chmod=0700                 ;socket文件的mode，默认是0700</div><div class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</div><div class="line"></div><div class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</div><div class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</div><div class="line">;username=user              ;登录管理后台的用户名</div><div class="line">;password=123               ;登录管理后台的密码</div><div class="line"></div><div class="line">[supervisord]</div><div class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</div><div class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</div><div class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</div><div class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</div><div class="line">pidfile=/tmp/supervisord.pid ;pid 文件</div><div class="line">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</div><div class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</div><div class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200</div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</div><div class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</div><div class="line"></div><div class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</div><div class="line">[program:xx]</div><div class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</div><div class="line">autostart=true       ; 在supervisord启动的时候也自动启动</div><div class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</div><div class="line">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</div><div class="line">startretries=3       ; 启动失败自动重试次数，默认是3</div><div class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</div><div class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</div><div class="line">redirect_stderr=true ; 把stderr重定向到stdout，默认false</div><div class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</div><div class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</div><div class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</div><div class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</div><div class="line">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</div><div class="line">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</div><div class="line"></div><div class="line">;包含其它配置文件</div><div class="line">[include]</div><div class="line">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</div><div class="line">include示例：</div><div class="line"></div><div class="line">[include]</div><div class="line">files = /opt/absolute/filename.ini /opt/absolute/*.ini foo.conf config??.ini</div></pre></td></tr></table></figure>
<h3 id="配置管理进程"><a href="#配置管理进程" class="headerlink" title="配置管理进程"></a>配置管理进程</h3><p>进程管理配置参数，不建议全都写在supervisord.conf文件中，应该每个进程写一个配置文件放在include指定的目录下包含进supervisord.conf文件中。<br>1&gt; 创建<code>/etc/supervisor/config.d</code>目录，用于存放进程管理的配置文件<br>2&gt; 修改<code>/etc/supervisor/supervisord.conf</code>中的include参数，将/etc/supervisor/conf.d目录添加到include中</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[include]</span></div><div class="line"><span class="attr">files</span> = /etc/supervisor/config.d/*.ini</div></pre></td></tr></table></figure>
<p>supervisor配置文件目录结构</p>
<p>下面是配置Tomcat进程的一个例子：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">[program:tomcat]</span></div><div class="line"><span class="attr">command</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/bin/catalina.sh run</div><div class="line"><span class="attr">stdout_logfile</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/logs/catalina.out</div><div class="line"><span class="attr">autostart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">startsecs</span>=<span class="number">5</span></div><div class="line"><span class="attr">priority</span>=<span class="number">1</span></div><div class="line"><span class="attr">stopasgroup</span>=<span class="literal">true</span></div><div class="line"><span class="attr">killasgroup</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="启动Supervisor服务"><a href="#启动Supervisor服务" class="headerlink" title="启动Supervisor服务"></a>启动Supervisor服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/supervisord -c /etc/supervisor/supervisrod.conf</div></pre></td></tr></table></figure>
<h3 id="控制进程"><a href="#控制进程" class="headerlink" title="控制进程"></a>控制进程</h3><h4 id="交互终端"><a href="#交互终端" class="headerlink" title="交互终端"></a>交互终端</h4><p>supervisord启动成功后，可以通过supervisorctl客户端控制进程，启动、停止、重启。运行supervisorctl命令，不加参数，会进入supervisor客户端的交互终端，并会列出当前所管理的所有进程。<br>supervisorctl</p>
<p>上图中的tomcat就是我们在配置文件中[program:tomcat]指定的名字。<br>输入help可以查看可以执行的命令列表，如果想看某个命令的作用，运行help 命令名称，如：help stop</p>
<p><code>stop tomcat</code>  // 表示停止tomcat进程</p>
<p><code>stop all</code>     // 表示停止所有进程</p>
<h4 id="bash终端"><a href="#bash终端" class="headerlink" title="bash终端"></a>bash终端</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">supervisorctl status</div><div class="line">supervisorctl stop tomcat</div><div class="line">supervisorctl start tomcat</div><div class="line">supervisorctl restart tomcat</div><div class="line">supervisorctl reread</div><div class="line">supervisorctl update</div></pre></td></tr></table></figure>
<h4 id="Web管理界面"><a href="#Web管理界面" class="headerlink" title="Web管理界面"></a>Web管理界面</h4><p>Supervisor Web管理界面<br>出于安全考虑，默认配置是没有开启web管理界面，需要修改supervisord.conf配置文件打开http访权限，将下面的配置：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;[inet_http_server]         ; inet (TCP) server disabled by default</span></div><div class="line"><span class="comment">;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span></div><div class="line"><span class="comment">;username=user              ; (default is no username (open server))</span></div><div class="line"><span class="comment">;password=123               ; (default is no password (open server))</span></div></pre></td></tr></table></figure>
<p>修改成：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">[inet_http_server]</span>         <span class="comment">; inet (TCP) server disabled by default</span></div><div class="line"><span class="attr">port</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9001</span>          ; (ip_address:port specifier, *:port for all iface)</div><div class="line"><span class="attr">username</span>=user              ; (default is <span class="literal">no</span> username (open server))</div><div class="line"><span class="attr">password</span>=<span class="number">123</span>               ; (default is <span class="literal">no</span> password (open server))</div></pre></td></tr></table></figure>
<p><code>port</code>：绑定访问IP和端口，这里是绑定的是本地IP和9001端口 </p>
<p><code>username</code>：登录管理后台的用户名 </p>
<p><code>password</code>：登录管理后台的密码</p>
<h3 id="开机启动Supervisor服务"><a href="#开机启动Supervisor服务" class="headerlink" title="开机启动Supervisor服务"></a>开机启动Supervisor服务</h3><h4 id="配置systemctl服务"><a href="#配置systemctl服务" class="headerlink" title="配置systemctl服务"></a>配置systemctl服务</h4><ol>
<li>进入<code>/lib/systemd/system</code>目录，并创建<code>supervisor.service</code>文件</li>
</ol>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="section">[Unit]</span></div><div class="line"><span class="attr">Description</span>=supervisor</div><div class="line"><span class="attr">After</span>=network.target</div><div class="line"><span class="section"></span></div><div class="line">[Service]</div><div class="line"><span class="attr">Type</span>=forking</div><div class="line"><span class="attr">ExecStart</span>=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line"><span class="attr">ExecStop</span>=/usr/bin/supervisorctl <span class="variable">$OPTIONS</span> shutdown</div><div class="line"><span class="attr">ExecReload</span>=/usr/bin/supervisorctl <span class="variable">$OPTIONS</span> reload</div><div class="line"><span class="attr">KillMode</span>=process</div><div class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</div><div class="line"><span class="attr">RestartSec</span>=<span class="number">42</span>s</div><div class="line"><span class="section"></span></div><div class="line">[Install]</div><div class="line"><span class="attr">WantedBy</span>=multi-user.target</div></pre></td></tr></table></figure>
<ol>
<li>设置开机启动</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> supervisor.service</div><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure>
<ol>
<li>修改文件权限为766</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 766 supervisor.service</div></pre></td></tr></table></figure>
<h4 id="配置service类型服务"><a href="#配置service类型服务" class="headerlink" title="配置service类型服务"></a>配置service类型服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># supervisord   This scripts turns supervisord on</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Author:       Mike McGrath &lt;mmcgrath@RedHat.com&gt; (based off yumupdatesd)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># chkconfig:    - 95 04</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># description:  supervisor is a process control utility.  It has a web based</span></div><div class="line"><span class="comment">#               xmlrpc interface as well as a few other nifty features.</span></div><div class="line"><span class="comment"># processname:  supervisord</span></div><div class="line"><span class="comment"># config: /etc/supervisor/supervisord.conf</span></div><div class="line"><span class="comment"># pidfile: /var/run/supervisord.pid</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># source function library</span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></div><div class="line"></div><div class="line">RETVAL=0</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting supervisord: "</span></div><div class="line">    daemon <span class="string">"supervisord -c /etc/supervisor/supervisord.conf "</span></div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 0 ] &amp;&amp; touch /var/lock/subsys/supervisord</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping supervisord: "</span></div><div class="line">    killproc supervisord</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 0 ] &amp;&amp; rm <span class="_">-f</span> /var/lock/subsys/supervisord</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">restart</span></span>() &#123;</div><div class="line">    stop</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">  start)</div><div class="line">    start</div><div class="line">    ;;</div><div class="line">  stop) </div><div class="line">    stop</div><div class="line">    ;;</div><div class="line">  restart|force-reload|reload)</div><div class="line">    restart</div><div class="line">    ;;</div><div class="line">  condrestart)</div><div class="line">    [ <span class="_">-f</span> /var/lock/subsys/supervisord ] &amp;&amp; restart</div><div class="line">    ;;</div><div class="line">  status)</div><div class="line">    status supervisord</div><div class="line">    RETVAL=$?</div><div class="line">    ;;</div><div class="line">  *)</div><div class="line">    <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|reload|force-reload|condrestart&#125;"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure>
<p>将上述脚本内容保存到<code>/etc/rc.d/init.d/supervisor</code>文件中，修改文件权限为755，并设置开机启动</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 755 /etc/rc.d/init.d/supervisor</div><div class="line">chkconfig supervisor on</div></pre></td></tr></table></figure>
<p>注意：修改脚本中supervisor配置文件路径为你的supervisor的配置文件路径</p>
<p>其它Linux发行版开机启动脚本：<a href="https://github.com/Supervisor/initscripts" target="_blank" rel="external">https://github.com/Supervisor/initscripts</a></p>
<p>supervisor安装配置与使用  <a href="http://www.linuxidc.com/Linux/2015-04/116701.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-04/116701.htm</a></p>
<blockquote>
<p>注意：<br>Supervisor只能管理非daemon的进程，也就是说Supervisor不能管理守护进程。否则提示Exited too quickly (process log may have details)异常。例子中的Tomcat默认是以守护进程启动的，所以我们改成了catalina.sh run，以前台进程的方式运行。</p>
</blockquote>
<p><code>yum</code>方式安装</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">yum install -y supervisor</div></pre></td></tr></table></figure>
<p>supervisor没有发布在标准的CentOS源在，需要安装epel源。这种方式安装的可能不是最新版本，但比较方便，安装完成之后，配置文件会自动帮你生成。 </p>
<p>默认配置文件：<code>/etc/supervisord.conf</code></p>
<p>进程管理配置文件放到：<code>/etc/supervisord.d/</code>目录下即可</p>
<p>默认日志文件：<code>/tmp/supervisord.log</code>，可以查看进程的启动信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; 是用&lt;code&gt;Python&lt;/code&gt;开发的一个&lt;code&gt;client/server&lt;/code&gt;服务，是&lt;code&gt;Linux/Unix&lt;/code&gt;系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用&lt;code&gt;Supervisor&lt;/code&gt;管理的进程，当一个进程意外被杀死，&lt;code&gt;supervisort&lt;/code&gt;监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写&lt;code&gt;shell&lt;/code&gt;脚本来控制。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;Supervisor&lt;/code&gt;是Python开发的，安装前先检查一下系统否安装了&lt;code&gt;Python2.4&lt;/code&gt;以上版本。下面以&lt;code&gt;CentOS7&lt;/code&gt;，&lt;code&gt;Python2.7&lt;/code&gt;版本环境下，介绍&lt;code&gt;Supervisor&lt;/code&gt;的安装与配置步聚：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.cenhq.com/categories/Linux/"/>
    
    
      <category term="supervisor" scheme="http://www.cenhq.com/tags/supervisor/"/>
    
      <category term="supervisord" scheme="http://www.cenhq.com/tags/supervisord/"/>
    
      <category term="supervisorctl" scheme="http://www.cenhq.com/tags/supervisorctl/"/>
    
      <category term="easy_install" scheme="http://www.cenhq.com/tags/easy-install/"/>
    
  </entry>
  
  <entry>
    <title>lumen 部署到线上遇到的问题</title>
    <link href="http://www.cenhq.com/2017/04/14/lumen-deploy-problems-to-online/"/>
    <id>http://www.cenhq.com/2017/04/14/lumen-deploy-problems-to-online/</id>
    <published>2017-04-14T06:14:56.000Z</published>
    <updated>2017-04-14T06:20:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lumen-默认的日志保存模式是single"><a href="#lumen-默认的日志保存模式是single" class="headerlink" title="lumen 默认的日志保存模式是single"></a>lumen 默认的日志保存模式是single</h3><p>也就是单文件模式</p>
<p>要想改成每日的daily模式可以在bootstrap/app.php下添加：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 配置日志文件为每日</div><div class="line"> */</div><div class="line">$app-&gt;configureMonologUsing(<span class="function"><span class="keyword">function</span><span class="params">(Monolog\Logger $monoLog)</span> <span class="title">use</span> <span class="params">($app)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> $monoLog-&gt;pushHandler(</div><div class="line">        <span class="keyword">new</span> \Monolog\Handler\RotatingFileHandler($app-&gt;storagePath().<span class="string">'/logs/lumen.log'</span>,<span class="number">5</span>)</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="lumen-nginx-允许自定义header"><a href="#lumen-nginx-允许自定义header" class="headerlink" title="lumen nginx 允许自定义header"></a>lumen nginx 允许自定义header</h3><p>nginx是支持读取非nginx标准的用户自定义header的，但是需要在http或者server下开启header的下划线支持:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">underscores_in_headers on;</div></pre></td></tr></table></figure>
<h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Symfony\Component\Process\<span class="keyword">Exception</span>\RuntimeException]                                   </div><div class="line">  The Process <span class="class"><span class="keyword">class</span> <span class="title">relies</span> <span class="title">on</span> <span class="title">proc_open</span>, <span class="title">which</span> <span class="title">is</span> <span class="title">not</span> <span class="title">available</span> <span class="title">on</span> <span class="title">your</span> <span class="title">PHP</span> <span class="title">installation</span>.</span></div></pre></td></tr></table></figure>
<p>解决办法：<br>打开<code>php.ini</code>，并搜索<code>disable_functions</code>指令，找到类似如下内容：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disable_functions</span> = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server</div></pre></td></tr></table></figure>
<p>找到<code>proc_open</code>并删除即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lumen-默认的日志保存模式是single&quot;&gt;&lt;a href=&quot;#lumen-默认的日志保存模式是single&quot; class=&quot;headerlink&quot; title=&quot;lumen 默认的日志保存模式是single&quot;&gt;&lt;/a&gt;lumen 默认的日志保存模式是single&lt;/h3&gt;&lt;p&gt;也就是单文件模式&lt;/p&gt;
&lt;p&gt;要想改成每日的daily模式可以在bootstrap/app.php下添加：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 配置日志文件为每日&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$app-&amp;gt;configureMonologUsing(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Monolog\Logger $monoLog)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($app)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $monoLog-&amp;gt;pushHandler(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; \Monolog\Handler\RotatingFileHandler($app-&amp;gt;storagePath().&lt;span class=&quot;string&quot;&gt;&#39;/logs/lumen.log&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="signle" scheme="http://www.cenhq.com/tags/signle/"/>
    
      <category term="lumen.log" scheme="http://www.cenhq.com/tags/lumen-log/"/>
    
      <category term="daily" scheme="http://www.cenhq.com/tags/daily/"/>
    
      <category term="header" scheme="http://www.cenhq.com/tags/header/"/>
    
      <category term="proc_open" scheme="http://www.cenhq.com/tags/proc-open/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 安装第三方包 Mongodb报错</title>
    <link href="http://www.cenhq.com/2017/03/28/laravel-use-mongodb-error-info/"/>
    <id>http://www.cenhq.com/2017/03/28/laravel-use-mongodb-error-info/</id>
    <published>2017-03-28T10:03:19.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目使用mongodb数据库来存储数据，所以需要第三方包mongodb来配合；这里使用<code>composer</code>来安装。</p>
<h4 id="安装jenssegers-mongodb报错"><a href="#安装jenssegers-mongodb报错" class="headerlink" title="安装jenssegers/mongodb报错"></a>安装<code>jenssegers/mongodb</code>报错</h4><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"> $ composer require jenssegers/mongodb:3.2.*</div><div class="line">./composer.json has been updated</div><div class="line">Loading composer repositories with package information</div><div class="line">Updating dependencies (including require-dev)</div><div class="line">Your requirements could not be resolved to an installable set of packages.</div><div class="line"></div><div class="line">  Problem 1</div><div class="line">    - jenssegers/mongodb v3.2.0 requires mongodb/mongodb ^1.0.0 -&gt; satisfiable by mongodb/mongodb[1.0.0, 1.0.0-alpha1, 1.0.0-beta1, 1.0.0-beta2, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.1.0, 1.1.0-alpha1, 1.1.1, 1.1.2, 1.2.0-alpha1, 1.2.x-dev, v1.0.x-dev, v1.1.x-dev].</div><div class="line">    - jenssegers/mongodb v3.2.1 requires mongodb/mongodb ^1.0.0 -&gt; satisfiable by mongodb/mongodb[1.0.0, 1.0.0-alpha1, 1.0.0-beta1, 1.0.0-beta2, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.1.0, 1.1.0-alpha1, 1.1.1, 1.1.2, 1.2.0-alpha1, 1.2.x-dev, v1.0.x-dev, v1.1.x-dev].</div><div class="line">    - jenssegers/mongodb v3.2.2 requires mongodb/mongodb ^1.0.0 -&gt; satisfiable by mongodb/mongodb[1.0.0, 1.0.0-alpha1, 1.0.0-beta1, 1.0.0-beta2, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.1.0, 1.1.0-alpha1, 1.1.1, 1.1.2, 1.2.0-alpha1, 1.2.x-dev, v1.0.x-dev, v1.1.x-dev].</div><div class="line">    - mongodb/mongodb v1.1.x-dev requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb v1.0.x-dev requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.2.x-dev requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.2.0-alpha1 requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.1.2 requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.1.1 requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.1.0-alpha1 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.1.0 requires ext-mongodb ^1.2.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.5 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.4 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.3 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.2 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.1 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.0-beta2 requires ext-mongodb ^1.1.1 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.0-beta1 requires ext-mongodb ^1.0.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.0-alpha1 requires ext-mongodb ^1.0.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - mongodb/mongodb 1.0.0 requires ext-mongodb ^1.1.0 -&gt; the requested PHP extension mongodb is missing from your system.</div><div class="line">    - Installation request for jenssegers/mongodb 3.2.* -&gt; satisfiable by jenssegers/mongodb[v3.2.0, v3.2.1, v3.2.2].</div><div class="line"></div><div class="line">  To enable extensions, verify that they are enabled in your .ini files:</div><div class="line">    - /usr/local/etc/php/5.6/php.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-igbinary.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-memcached.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-mongo.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-redis.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-ssh2.ini</div><div class="line">    - /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini</div><div class="line">  You can also run `php --ini` inside terminal to see which files are used by PHP in CLI mode.</div><div class="line"></div><div class="line">Installation failed, reverting ./composer.json to its original content.</div></pre></td></tr></table></figure>
<h5 id="报错解析"><a href="#报错解析" class="headerlink" title="报错解析"></a>报错解析</h5><p>第三方包需要<code>php56-mongodb</code>扩展，本机只有<code>php56-mongo</code>扩展，所以需要继续安装 <code>php56-mongodb</code>。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install php56-mongodb                                                                                                                                 </div><div class="line">Error: /usr/<span class="built_in">local</span>/opt/php56-mongodb is not a valid keg</div></pre></td></tr></table></figure>
<p>这个错误说明<code>php56-mongodb</code>目录不是有效的桶， 所以删除这个目录继续安装就可以</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo rm -rf /usr/<span class="built_in">local</span>/opt/php56-mongodb</div><div class="line">$ brew install php56-mongodb</div><div class="line">$ php -i <span class="string">"(command-line 'phpinfo()')"</span> |grep mongodb</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-mongodb.ini,</div><div class="line">mongodb</div><div class="line">mongodb.debug =&gt; no value =&gt; no value</div></pre></td></tr></table></figure>
<p>再次安装第三方包</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ composer require jenssegers/mongodb</div><div class="line">cUsing version ^3.2 <span class="keyword">for</span> jenssegers/mongodb</div><div class="line">./composer.json has been updated</div><div class="line">Loading composer repositories with package information</div><div class="line">Updating dependencies (including require-dev)</div><div class="line">Package operations: 2 installs, 0 updates, 0 removals</div><div class="line">  - Installing mongodb/mongodb (1.1.2): Downloading (100%)         </div><div class="line">  - Installing jenssegers/mongodb (v3.2.2): Downloading (100%)         </div><div class="line">jenssegers/mongodb suggests installing jenssegers/mongodb-session (Add MongoDB session support to Laravel-MongoDB)</div><div class="line">jenssegers/mongodb suggests installing jenssegers/mongodb-sentry (Add Sentry support to Laravel-MongoDB)</div><div class="line">Writing lock file</div><div class="line">Generating <span class="built_in">autoload</span> files</div></pre></td></tr></table></figure>
<h4 id="php调用mongodb挂掉"><a href="#php调用mongodb挂掉" class="headerlink" title="php调用mongodb挂掉"></a>php调用mongodb挂掉</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dyld: lazy symbol binding failed: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /usr/<span class="built_in">local</span>/opt/php56-mongodb/mongodb.so</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">dyld: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /usr/<span class="built_in">local</span>/opt/php56-mongodb/mongodb.so</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">[1]    29551 trace <span class="built_in">trap</span>  php -S 192.168.82.195:8989</div></pre></td></tr></table></figure>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p><a href="https://github.com/Homebrew/homebrew-php/issues/3737" target="_blank" rel="external">https://github.com/Homebrew/homebrew-php/issues/3737</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">make sure you have the latest version of xcode-select,mine is 2343 xcode-select -v,if not update then restart your mac</div><div class="line"></div><div class="line"> brew edit &#123;formula&#125; #formula likes php71-mongodb</div><div class="line"></div><div class="line"> edit it，add lines after “install”, may like this</div><div class="line">def install</div><div class="line">Dir.chdir &quot;mongodb-#&#123;version&#125;&quot; unless build.head?</div><div class="line">if MacOS.version == &quot;10.11&quot; &amp;&amp; MacOS::Xcode.installed? &amp;&amp; MacOS::Xcode.version &gt;= &quot;8.0&quot;</div><div class="line">inreplace %w[src/libbson/src/bson/bson-clock.c], &quot;HAVE_CLOCK_GETTIME&quot;, &quot;UNDEFINED_GIBBERISH&quot;`</div><div class="line">end</div><div class="line"></div><div class="line"> reinstall php71-mongodb from source brew reinstall -s php71-mongodb</div></pre></td></tr></table></figure>
<p>上面的英文解释下：</p>
<ul>
<li><code>xcode-select</code> 最新的版本为：2343，如果不是需要升级</li>
<li>编辑<code>php56-mongodb</code>,修改位置大概在20行下面，添加此内容 <code>if MacOS.version == &quot;10.11&quot; &amp;&amp; MacOS::Xcode.installed? &amp;&amp; MacOS::Xcode.version &gt;= &quot;8.0&quot;
inreplace %w[src/libbson/src/bson/bson-clock.c], &quot;HAVE_CLOCK_GETTIME&quot;, &quot;UNDEFINED_GIBBERISH&quot;
end</code></li>
<li>然后重新安装 <code>php56-mongodb</code></li>
</ul>
<blockquote>
<p>但是重装会无法执行，报错timeout超时。而且下载的是版本为<code>mongodb-1.2.5</code>，所以我们需要最新版本<code>mongodb-1.2.8</code>需要手动下载。</p>
</blockquote>
<p><a href="https://github.com/mongodb/mongo-php-driver/releases/download/1.2.8/mongodb-1.2.8.tgz" target="_blank" rel="external">下载地址</a></p>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ tar xf mongodb-1.2.8.tgz</div><div class="line">$ <span class="built_in">cd</span> mongodb-1.2.8</div><div class="line">$ phpize</div><div class="line">$ ./configure</div><div class="line">$ make</div></pre></td></tr></table></figure>
<h6 id="报如下错误"><a href="#报如下错误" class="headerlink" title="报如下错误"></a>报如下错误</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/Users/zt-2203315/Downloads/资源包/mongodb-1.2.8/src/libmongoc/src/mongoc/mongoc-crypto-openssl.c:24:10: fatal error: <span class="string">'openssl/sha.h'</span> file not found</div><div class="line"><span class="comment">#include &lt;openssl/sha.h&gt;</span></div></pre></td></tr></table></figure>
<h6 id="需要升级openssl-并且执行软连接"><a href="#需要升级openssl-并且执行软连接" class="headerlink" title="需要升级openssl,并且执行软连接"></a>需要升级openssl,并且执行软连接</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ brew install openssl --force</div><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/include </div><div class="line">$ ln <span class="_">-s</span> ../opt/openssl/include/openssl .</div></pre></td></tr></table></figure>
<h6 id="继续安装"><a href="#继续安装" class="headerlink" title="继续安装"></a>继续安装</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ make clean</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">Installing shared extensions:     /usr/<span class="built_in">local</span>/Cellar/php56/5.6.30_6/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line"></div><div class="line">$ php --ini</div><div class="line">Configuration File (php.ini) Path: /usr/<span class="built_in">local</span>/etc/php/5.6</div><div class="line">Loaded Configuration File:         /usr/<span class="built_in">local</span>/etc/php/5.6/php.ini</div><div class="line">Scan <span class="keyword">for</span> additional .ini files <span class="keyword">in</span>: /usr/<span class="built_in">local</span>/etc/php/5.6/conf.d</div><div class="line">Additional .ini files parsed:      /usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-igbinary.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-memcached.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-mongo.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-mongodb.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-redis.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-ssh2.ini,</div><div class="line">/usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-xdebug.ini</div></pre></td></tr></table></figure>
<h6 id="修改扩展配置"><a href="#修改扩展配置" class="headerlink" title="修改扩展配置"></a>修改扩展配置</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/<span class="built_in">local</span>/etc/php/5.6/conf.d/ext-mongodb.ini</div><div class="line">extension=<span class="string">"/usr/local/Cellar/php56/5.6.30_6/lib/php/extensions/no-debug-non-zts-20131226/mongodb.so"</span></div></pre></td></tr></table></figure>
<h6 id="保存后重启服务"><a href="#保存后重启服务" class="headerlink" title="保存后重启服务"></a>保存后重启服务</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ killall php-fpm</div><div class="line">$ php-pfm -D</div></pre></td></tr></table></figure>
<h6 id="数据库配置config-database-php"><a href="#数据库配置config-database-php" class="headerlink" title="数据库配置config/database.php"></a>数据库配置<code>config/database.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [</div><div class="line"></div><div class="line">    <span class="string">'default'</span> =&gt; env(<span class="string">'DB_CONNECTION'</span>, <span class="string">'mysql'</span>),</div><div class="line"></div><div class="line">    <span class="string">'connections'</span> =&gt; [</div><div class="line">        <span class="string">'mysql'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span>    =&gt; <span class="string">'mysql'</span>,</div><div class="line">            <span class="string">'host'</span>      =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>),</div><div class="line">            <span class="string">'database'</span>  =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'lumen'</span>),</div><div class="line">            <span class="string">'username'</span>  =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'root'</span>),</div><div class="line">            <span class="string">'password'</span>  =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">'charlie'</span>),</div><div class="line">            <span class="string">'charset'</span>   =&gt; <span class="string">'utf8'</span>,</div><div class="line">            <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</div><div class="line">            <span class="string">'prefix'</span>    =&gt; <span class="string">''</span>,</div><div class="line">            <span class="string">'strict'</span>    =&gt; <span class="keyword">false</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">        <span class="string">'mongodb'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span>   =&gt; <span class="string">'mongodb'</span>,</div><div class="line">            <span class="string">'host'</span>     =&gt; <span class="string">'localhost'</span>,</div><div class="line">            <span class="string">'port'</span>     =&gt; <span class="number">27017</span>,</div><div class="line">            <span class="string">'database'</span> =&gt; <span class="string">'test'</span>,</div><div class="line">            <span class="string">'username'</span> =&gt; env(<span class="string">''</span>),</div><div class="line">            <span class="string">'password'</span> =&gt; env(<span class="string">''</span>),</div><div class="line">            <span class="string">'options'</span>  =&gt; [</div><div class="line">                <span class="string">'database'</span> =&gt; <span class="string">'admin'</span> <span class="comment">// sets the authentication database required by mongo 3</span></div><div class="line">            ]</div><div class="line">        ],</div><div class="line"></div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure>
<h6 id="注册服务bootstrap-app-php"><a href="#注册服务bootstrap-app-php" class="headerlink" title="注册服务bootstrap/app.php"></a>注册服务<code>bootstrap/app.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$app-&gt;configure(<span class="string">'database'</span>);</div><div class="line"></div><div class="line">$app-&gt;register(\Jenssegers\Mongodb\MongodbServiceProvider::class);</div><div class="line"></div><div class="line">$app-&gt;withEloquent();</div></pre></td></tr></table></figure>
<h6 id="创建测试模型app-Model-Test-php"><a href="#创建测试模型app-Model-Test-php" class="headerlink" title="创建测试模型app/Model/Test.php"></a>创建测试模型<code>app/Model/Test.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Jenssegers</span>\<span class="title">Mongodb</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Model</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $connection = <span class="string">'mongodb'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $collection = <span class="string">'c2'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="创建测试控制器app-Http-Controllers-TestController-php"><a href="#创建测试控制器app-Http-Controllers-TestController-php" class="headerlink" title="创建测试控制器app/Http/Controllers/TestController.php"></a>创建测试控制器<code>app/Http/Controllers/TestController.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Test</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line"><span class="comment">//        $test = DB::connection('mongodb')-&gt;collection('c2')-&gt;get();</span></div><div class="line">        $test = Test::all()-&gt;toArray();</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</div><div class="line">        print_r($test);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="创建路由routes-web-php"><a href="#创建路由routes-web-php" class="headerlink" title="创建路由routes/web.php"></a>创建路由<code>routes/web.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$app-&gt;get(<span class="string">'aa'</span>, <span class="string">'TestController@index'</span>);</div></pre></td></tr></table></figure>
<h6 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">Array</span></div><div class="line">        (</div><div class="line">            [_id] =&gt; <span class="number">5837</span>d39d05045864010041bd</div><div class="line">            [ym] =&gt; <span class="number">2016</span>年/<span class="number">11</span>月</div><div class="line">            [date] =&gt; <span class="number">2016</span>/<span class="number">11</span>/<span class="number">25</span></div><div class="line">            [key_time] =&gt; tmp_look_1480047736</div><div class="line">            [title] =&gt; test18</div><div class="line">            [status] =&gt; 已发布</div><div class="line">        )</div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目使用mongodb数据库来存储数据，所以需要第三方包mongodb来配合；这里使用&lt;code&gt;composer&lt;/code&gt;来安装。&lt;/p&gt;
&lt;h4 id=&quot;安装jenssegers-mongodb报错&quot;&gt;&lt;a href=&quot;#安装jenssegers-mongodb报错&quot; class=&quot;headerlink&quot; title=&quot;安装jenssegers/mongodb报错&quot;&gt;&lt;/a&gt;安装&lt;code&gt;jenssegers/mongodb&lt;/code&gt;报错&lt;/h4&gt;
    
    </summary>
    
      <category term="Laravel" scheme="http://www.cenhq.com/categories/Laravel/"/>
    
    
      <category term="mongodb" scheme="http://www.cenhq.com/tags/mongodb/"/>
    
      <category term="php56-mongodb" scheme="http://www.cenhq.com/tags/php56-mongodb/"/>
    
      <category term="php56-mongo" scheme="http://www.cenhq.com/tags/php56-mongo/"/>
    
      <category term="_clock_gettime" scheme="http://www.cenhq.com/tags/clock-gettime/"/>
    
      <category term="mongodb-1.2.8" scheme="http://www.cenhq.com/tags/mongodb-1-2-8/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.4 事件操作</title>
    <link href="http://www.cenhq.com/2017/03/22/laravel-event/"/>
    <id>http://www.cenhq.com/2017/03/22/laravel-event/</id>
    <published>2017-03-22T05:18:14.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Laravel 事件机制实现了一个简单的观察者模式，让我们可以订阅和监听应用中出现的各种事件。事件类 (Event) 类通常保存在 <code>app/Events</code> 目录下，而它们的监听类 (Listener) 类被保存在 <code>app/Listeners</code> 目录下。如果你在应用中看不到这些文件夹也不要担心，因为当你使用 Artisan 命令来生成事件和监听器时他们会被自动创建。</p>
<p>事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，这里我们基于之前基于模型+缓存对文章增删改查这篇文件对文章保存后缓存的处理做进一步优化。我们将文章保存（新建/修改）视为一个事件，将保存文章内容到缓存放到监听器中实现：<br><a id="more"></a></p>
<h3 id="注册事件与监听器"><a href="#注册事件与监听器" class="headerlink" title="注册事件与监听器"></a>注册事件与监听器</h3><p>Laravel 应用中的 <code>EventServiceProvider</code> 提供了一个很方便的地方来注册所有的事件监听器。它的 <code>listen</code> 属性是一个数组，包含所有的事件（键）以及事件对应的监听器（值）。你也可以根据应用需求来增加事件到这个数组中。例如，增加一个 PostSaved 事件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 应用程序的事件监听器映射。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@var</span> array</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> $listen = [</div><div class="line">    <span class="string">'App\Events\PostSaved'</span>  =&gt;  [</div><div class="line">        <span class="string">'App\Listeners\PostSavedToCache'</span>,</div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure>
<h4 id="生成事件和监听器"><a href="#生成事件和监听器" class="headerlink" title="生成事件和监听器"></a>生成事件和监听器</h4><p>当然，手动创建每个事件和监听器是很麻烦的。简单的方式是，在 <code>EventServiceProvider</code> 类中添加好事件和监听器，然后使用 <code>event:generate</code> 命令。这个命令会自动生成 <code>EventServiceProvider</code> 类中列出的所有事件和监听器。当然已经存在的事件和监听器将保持不变。我们在项目根目录运行如下Artisan命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php artisan event:generate</div></pre></td></tr></table></figure>
<p>该命令会在  <code>app/Events</code> 目录下生成 <code>PostSaved.php</code>，在<code>app/Listeners</code> 目录下生成 <code>SaveDataToCache.php</code>。</p>
<h4 id="手动注册事件"><a href="#手动注册事件" class="headerlink" title="手动注册事件"></a>手动注册事件</h4><p>一般来说，事件必须通过 <code>EventServiceProvider</code> 类的 <code>$listen</code> 数组进行注册；不过，你也可以在 <code>EventServiceProvider</code> 类的 <code>boot</code> 方法中注册闭包事件。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 注册应用程序中的任何其他事件。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> void</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">parent</span>::boot();</div><div class="line">    </div><div class="line">    <span class="comment">//name可以使用通配符'*',它让你在一个监听器中可以监听到多个事件。通配符监听器接受的第一个参数是事件名称，第二个参数是整个的事件数据：</span></div><div class="line">    Event::listen(<span class="string">'event.name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($foo, $bar)</span>   </span>&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h3><p>事件类就是一个包含与事件相关信息数据的容器。接下来我们编辑事件类PostSaved如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Events</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Post</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">Channel</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">PrivateChannel</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">PresenceChannel</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Events</span>\<span class="title">Dispatchable</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">InteractsWithSockets</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Broadcasting</span>\<span class="title">ShouldBroadcast</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Event</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostSaved</span> <span class="keyword">extends</span> <span class="title">Event</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithSockets</span>, <span class="title">SerializesModels</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a new event instance.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Post $post)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;post = $post;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the channels the event should broadcast on.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Channel|array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">broadcastOn</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line"><span class="comment">//        return new PrivateChannel('channel-name');</span></div><div class="line">        <span class="keyword">return</span> [];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如你所见，这个事件类中没有包含其它逻辑。它仅只是一个被构建的 <code>Post</code> 对象的容器。如果使用 PHP 的 <code>serialize</code> 函数对事件进行序列化，使用了 <code>SerializesModels</code> trait 的事件将会优雅的序列化任何的 <code>Eloquent</code> 模型。</p>
<h3 id="定义监听器"><a href="#定义监听器" class="headerlink" title="定义监听器"></a>定义监听器</h3><p>接下来，让我们看一下例子中事件的监听器。事件监听器在 <code>handle</code> 方法中接受了事件实例作为参数。 <code>event:generate</code> 命令将会在事件的 <code>handle</code> 方法中自动加载正确的事件类和类型提示。在 <code>handle</code> 方法中，你可以运行任何需要响应该事件的业务逻辑。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Listeners</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">PostSaved</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Cache</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Log</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostSavedToCache</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create the event listener.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handle the event.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  PostSaved  $event</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(PostSaved $event)</span></span></div><div class="line">    &#123;</div><div class="line">        $post = $event-&gt;post;</div><div class="line">        $key = <span class="string">'post_'</span>.$post-&gt;id;</div><div class="line">        Cache::put($key,$post,<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</div><div class="line">        Log::info(<span class="string">'保存文章到缓存文件'</span>, [<span class="string">'id'</span> =&gt; $post-&gt;id, <span class="string">'title'</span> =&gt; $post-&gt;title]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="停止事件传播"><a href="#停止事件传播" class="headerlink" title="停止事件传播"></a>停止事件传播</h4><p>有时，你可能希望停止一个事件传播到其他的监听器。这时你可以通过在监听器的 <code>handle</code> 方法中返回 <code>false</code> 来实现。</p>
<h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><p>最后我们来测试文章保存事件及其监听器。</p>
<p>要触发文章保存事件，可以使用<code>Event</code>门面提供的<code>fire</code>方法，在<code>PostController</code>中修改<code>add</code>方法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $post = <span class="keyword">new</span> Post();</div><div class="line">    $post-&gt;title = $request-&gt;input(<span class="string">'title'</span>);</div><div class="line">    $post-&gt;content = $request-&gt;input(<span class="string">'content'</span>);</div><div class="line">    <span class="keyword">if</span>($post-&gt;save())&#123;</div><div class="line">        event(<span class="keyword">new</span> PostSaved($post));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'post'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问浏览器添加文章，添加后查看日志<code>storage/logs/laravel.log</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">2017</span><span class="number">-03</span><span class="number">-22</span> <span class="number">03</span>:<span class="number">27</span>:<span class="number">25</span>] local.INFO: 保存文章到缓存文件 &#123;<span class="string">"id"</span>:<span class="number">115</span>,<span class="string">"title"</span>:<span class="string">"标题1"</span>&#125;</div></pre></td></tr></table></figure>
<p>说明已触发文章保存事件，监听器监听到事件后将其保存到缓存中并记录日志。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Laravel 事件机制实现了一个简单的观察者模式，让我们可以订阅和监听应用中出现的各种事件。事件类 (Event) 类通常保存在 &lt;code&gt;app/Events&lt;/code&gt; 目录下，而它们的监听类 (Listener) 类被保存在 &lt;code&gt;app/Listeners&lt;/code&gt; 目录下。如果你在应用中看不到这些文件夹也不要担心，因为当你使用 Artisan 命令来生成事件和监听器时他们会被自动创建。&lt;/p&gt;
&lt;p&gt;事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，这里我们基于之前基于模型+缓存对文章增删改查这篇文件对文章保存后缓存的处理做进一步优化。我们将文章保存（新建/修改）视为一个事件，将保存文章内容到缓存放到监听器中实现：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="http://www.cenhq.com/categories/Laravel/"/>
    
    
      <category term="Events" scheme="http://www.cenhq.com/tags/Events/"/>
    
      <category term="Listeners" scheme="http://www.cenhq.com/tags/Listeners/"/>
    
      <category term="EventServiceProvider" scheme="http://www.cenhq.com/tags/EventServiceProvider/"/>
    
  </entry>
  
  <entry>
    <title>lumen 队列发送邮件</title>
    <link href="http://www.cenhq.com/2017/03/16/lumen-queue-sendEmail/"/>
    <id>http://www.cenhq.com/2017/03/16/lumen-queue-sendEmail/</id>
    <published>2017-03-16T02:34:44.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Lumen 的队列服务为不同的队列后端系统提供了一套统一的 API 。队列允许你将一个耗时的任务进行延迟处理，例如像 e-mail 发送。这能让应用程序对页面的请求有更快的响应。</p>
<p>Lumen 和 Laravel 的队列功能除了接下来会列出来的不同点以外，并没有太大区别，所以更多关于 Lumen 队列的使用，请参阅 <a href="http://laravelacademy.org/post/6922.html" target="_blank" rel="external">Laravel</a> 文档 。</p>
<a id="more"></a>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>队列的配置在 <code>.env</code> 中 <code>QUEUE_DRIVER</code> 选项里。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QUEUE_DRIVER=database</div></pre></td></tr></table></figure>
<p>如果你想完全自定义配置信息，你可以复制 <code>vendor/laravel/lumen-framework/config/queue.php</code> 整个文件到 <code>config/queue.php</code> 中，根目录如果没有 <code>config</code> 的话你应该创建一个。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> [</div><div class="line"></div><div class="line">    <span class="string">'default'</span> =&gt; env(<span class="string">'QUEUE_DRIVER'</span>, <span class="string">'database'</span>),</div><div class="line"></div><div class="line">    <span class="string">'connections'</span> =&gt; [</div><div class="line"></div><div class="line">        <span class="string">'sync'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'sync'</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">        <span class="string">'database'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'database'</span>,</div><div class="line">            <span class="string">'table'</span> =&gt; <span class="string">'jobs'</span>,</div><div class="line">            <span class="string">'queue'</span> =&gt; <span class="string">'default'</span>,</div><div class="line">            <span class="string">'retry_after'</span> =&gt; <span class="number">60</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">        <span class="string">'beanstalkd'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'beanstalkd'</span>,</div><div class="line">            <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</div><div class="line">            <span class="string">'queue'</span> =&gt; <span class="string">'default'</span>,</div><div class="line">            <span class="string">'retry_after'</span> =&gt; <span class="number">60</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">        <span class="string">'sqs'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'sqs'</span>,</div><div class="line">            <span class="string">'key'</span> =&gt; <span class="string">'your-public-key'</span>,</div><div class="line">            <span class="string">'secret'</span> =&gt; <span class="string">'your-secret-key'</span>,</div><div class="line">            <span class="string">'queue'</span> =&gt; <span class="string">'your-queue-url'</span>,</div><div class="line">            <span class="string">'region'</span> =&gt; <span class="string">'us-east-1'</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">        <span class="string">'redis'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'redis'</span>,</div><div class="line">            <span class="string">'connection'</span> =&gt; <span class="string">'default'</span>,</div><div class="line">            <span class="string">'queue'</span> =&gt; <span class="string">'default'</span>,</div><div class="line">            <span class="string">'retry_after'</span> =&gt; <span class="number">60</span>,</div><div class="line">        ],</div><div class="line"></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="string">'failed'</span> =&gt; [</div><div class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_CONNECTION'</span>, <span class="string">'mysql'</span>),</div><div class="line">        <span class="string">'table'</span> =&gt; env(<span class="string">'QUEUE_FAILED_TABLE'</span>, <span class="string">'failed_jobs'</span>),</div><div class="line">    ],</div><div class="line">];</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>要使用 <code>database</code> 这个队列驱动的话，则需要创建一个数据表来记住任务:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Schema::create(<span class="string">'jobs'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">    $table-&gt;bigIncrements(<span class="string">'id'</span>);</div><div class="line">    $table-&gt;string(<span class="string">'queue'</span>);</div><div class="line">    $table-&gt;longText(<span class="string">'payload'</span>);</div><div class="line">    $table-&gt;tinyInteger(<span class="string">'attempts'</span>)-&gt;unsigned();</div><div class="line">    $table-&gt;tinyInteger(<span class="string">'reserved'</span>)-&gt;unsigned();</div><div class="line">    $table-&gt;unsignedInteger(<span class="string">'reserved_at'</span>)-&gt;nullable();</div><div class="line">    $table-&gt;unsignedInteger(<span class="string">'available_at'</span>);</div><div class="line">    $table-&gt;unsignedInteger(<span class="string">'created_at'</span>);</div><div class="line">    $table-&gt;index([<span class="string">'queue'</span>, <span class="string">'reserved'</span>, <span class="string">'reserved_at'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="生成任务类"><a href="#生成任务类" class="headerlink" title="生成任务类"></a>生成任务类</h3><p>Lumen 中没有可用来生成事件监听器的命令，你可以复制 <code>ExampleJob</code> 文件，这个示例文件提供了基础的类结构，你可以作为参考。基类 <code>Job</code> 已经加载了我们需要的 traits <code>InteractsWithQueue</code>, <code>Queueable</code>, 和 <code>SerializesModels</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Jobs</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Mail</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendReminderEmail</span> <span class="keyword">extends</span> <span class="title">Job</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $email;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $active;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $subject;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个新的任务实例</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> $email</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($email, $active, $subject)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;email = $email;</div><div class="line">        <span class="keyword">$this</span>-&gt;active = $active;</div><div class="line">        <span class="keyword">$this</span>-&gt;subject = $subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行任务</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Mail::send(<span class="string">'emails.welcome'</span>, [<span class="string">'active'</span> =&gt; <span class="keyword">$this</span>-&gt;active, <span class="string">'subject'</span> =&gt; <span class="keyword">$this</span>-&gt;subject], <span class="function"><span class="keyword">function</span> <span class="params">($message)</span></span>&#123;</div><div class="line">            $message-&gt;to(<span class="keyword">$this</span>-&gt;email)-&gt;subject(<span class="keyword">$this</span>-&gt;subject);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="将任务推送到队列上"><a href="#将任务推送到队列上" class="headerlink" title="将任务推送到队列上"></a>将任务推送到队列上</h3><p>就如 Laravel 一样，你可使用 <code>dispatch</code> 辅助函数来推送任务到队列上:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch(<span class="keyword">new</span> ExampleJob);</div></pre></td></tr></table></figure>
<p>当然，你也可以使用 <code>Queue</code> facade。 如果你想使用 facade 的话，你需要在 <code>bootstrap/app.php</code> 中把 <code>$app-&gt;withFacades()</code> 这行调用的注释去除掉。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Queue::push(<span class="keyword">new</span> SendReminderEmail($user[<span class="string">'email'</span>], <span class="keyword">$this</span>-&gt;active($user[<span class="string">'email'</span>],$user[<span class="string">'id'</span>]),<span class="string">'注册成功'</span>));</div></pre></td></tr></table></figure>
<h4 id="延迟分发"><a href="#延迟分发" class="headerlink" title="延迟分发"></a>延迟分发</h4><p>有时候你可能想要延迟队列任务的执行，可以通过在任务实例使用 <code>delay</code> 方法。该方法由<code>Illuminate\Bus\Queueable</code> trait提供，已经自动添加在通过命令行生成的任务类中。例如你希望将某个任务在创建 10 分钟以后才执行：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Queue::push(<span class="keyword">new</span> SendReminderEmail($user[<span class="string">'email'</span>], <span class="keyword">$this</span>-&gt;active($user[<span class="string">'email'</span>],$user[<span class="string">'id'</span>])-&gt;delay(Carbon::now())-&gt;addMinute(<span class="number">10</span>),<span class="string">'注册成功'</span>));</div></pre></td></tr></table></figure>
<h4 id="自定义队列和连接"><a href="#自定义队列和连接" class="headerlink" title="自定义队列和连接"></a>自定义队列和连接</h4><p>通过推送任务到不同队列，你可以将队列任务进行“分类”，甚至根据优先级来分配每个队列的进程数。请注意，这并不意味着使用了配置项中那些不同的连接来管理队列，实际上只有单一连接会被用到。要指定队列，请在任务实例使用 <code>onQueue</code> 方法。要指定连接设备可以用 <code>onConnection</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Queue::push(<span class="keyword">new</span> SendReminderEmail($user[<span class="string">'email'</span>], <span class="keyword">$this</span>-&gt;active($user[<span class="string">'email'</span>],$user[<span class="string">'id'</span>])-&gt;onConnection(<span class="string">'redis'</span>)-&gt;onQueue(<span class="string">'emails'</span>),<span class="string">'注册成功'</span>));</div></pre></td></tr></table></figure>
<h4 id="指定最大失败次数-超时时间"><a href="#指定最大失败次数-超时时间" class="headerlink" title="指定最大失败次数/超时时间"></a>指定最大失败次数/超时时间</h4><p>指定队列任务最大失败次数的一种实现方式是通过 Artisan 命令 <code>--tries</code> 切换：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:work --tries=<span class="number">3</span></div></pre></td></tr></table></figure>
<p>类似的，队列任务最大运行时长（秒）可以通过 Artisan 命令 <code>--timeout</code> 来指定</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:work --timeout=<span class="number">30</span></div></pre></td></tr></table></figure>
<h3 id="运行队列任务"><a href="#运行队列任务" class="headerlink" title="运行队列任务"></a>运行队列任务</h3><p>Laravel 包含了一个队列进程用来处理被推送到队列的新任务。你可以使用 <code>queue:work</code> 命令运行队列进程。请注意，队列进程开始运行后，会持续监听队列，直至你手动停止或关闭终端：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:work</div></pre></td></tr></table></figure>
<blockquote>
<p>注：为了保持队列进程 <code>queue:work</code> 持续在后台运行，需要使用进程守护程序，比如 <code>Supervisor</code> 来确保队列进程持续运行。</p>
</blockquote>
<p>请记住，队列进程是长生命周期的进程，会在启动后驻留内存。若应用有任何改动将不会影响到已经启动的进程。所以请在发布程序后，重启队列进程。</p>
<h3 id="配置Supervisor"><a href="#配置Supervisor" class="headerlink" title="配置Supervisor"></a>配置Supervisor</h3><p>Supervisor 是 Linux 系统中常用的进程守护程序。如果队列进程 <code>queue:work</code> 意外关闭，它会自动重启启动队列进程。在 Mac 安装Supervisor 非常简单：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ brew search |grep supervisor                                                                                                                       </div><div class="line">supervisor</div><div class="line">$ brew install supervisor</div></pre></td></tr></table></figure>
<h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>Supervisor 配置文件通常存放在 <code>/usr/local/etc/supervisord.conf</code> 目录，在该目录中，可以创建多个配置文件指示 <code>Supervisor</code> 如何监视进程，例如，让我们创建一个开启并监视<code>queue:work</code> 进程的 <code>laravel-worker.conf</code> 文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[program:laravel-worker]</div><div class="line">process_name=%(program_name)s_%(process_num)<span class="number">02</span>d</div><div class="line">command=php /Users/zt<span class="number">-2203315</span>/www/gametest/artisan queue:work  --sleep=<span class="number">3</span> --tries=<span class="number">3</span></div><div class="line">autostart=<span class="keyword">true</span></div><div class="line">autorestart=<span class="keyword">true</span></div><div class="line">numprocs=<span class="number">8</span></div><div class="line">redirect_stderr=<span class="keyword">true</span></div><div class="line">stdout_logfile=/tmp/worker.log</div></pre></td></tr></table></figure>
<p>在本例中，<code>numprocs</code> 指令让 Supervisor 运行 8 个 <code>queue:work</code> 进程并监视它们，如果失败的话自动重启。当然，你需要修改 <code>queue:work</code> <code>database</code> 的 <code>command</code> 指令来映射你的队列连接。</p>
<h4 id="启动Supervisor"><a href="#启动Supervisor" class="headerlink" title="启动Supervisor"></a>启动Supervisor</h4><p>当你成功创建配置文件后，你需要刷新 Supervisor 的配置信息并使用如下命令启动进程:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ supervisord</div><div class="line">$ ps aux |grep supervisord |grep -v grep</div><div class="line">zt-2203315       94458   0.0  0.0  2470732   6320   ??  Ss    6:12PM   0:01.65 /usr/<span class="built_in">local</span>/Cellar/supervisor/3.3.1/libexec/bin/python /usr/<span class="built_in">local</span>/bin/supervisord</div><div class="line">$ supervisorctl</div><div class="line">laravel-worker:laravel-worker_00   RUNNING   pid 94546, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_01   RUNNING   pid 94547, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_02   RUNNING   pid 94548, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_03   RUNNING   pid 94549, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_04   RUNNING   pid 94550, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_05   RUNNING   pid 94551, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_06   RUNNING   pid 94552, uptime 0:35:28</div><div class="line">laravel-worker:laravel-worker_07   RUNNING   pid 94553, uptime 0:35:28</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>
<p>请注意：要先停止supervisor的laravel-work服务</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">supervisor&gt; shutdown</div><div class="line">Really shut the remote supervisord process down y/N? y</div><div class="line">Shut down</div></pre></td></tr></table></figure>
<p>发送邮件给用户</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"data"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"邮件已重新发送"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2017/03/16/lumen-queue-sendEmail/QQ20170315-0.png" alt=""></p>
<p>启动supervisor</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ supervisord</div><div class="line">$ tail <span class="_">-f</span> /tmp/worker.log</div><div class="line">[2017-03-15 18:56:46] Processed: App\Jobs\SendReminderEmail</div></pre></td></tr></table></figure>
<p>再次查看数据表,已经为空<br><img src="/2017/03/16/lumen-queue-sendEmail/QQ20170315-1.png" alt=""></p>
<p>查看邮箱<br><img src="/2017/03/16/lumen-queue-sendEmail/QQ20170315-2.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://lumen.laravel-china.org/docs/5.3/queues" target="_blank" rel="external">https://lumen.laravel-china.org/docs/5.3/queues</a></p>
<p><a href="http://laravelacademy.org/post/6922.html" target="_blank" rel="external">http://laravelacademy.org/post/6922.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Lumen 的队列服务为不同的队列后端系统提供了一套统一的 API 。队列允许你将一个耗时的任务进行延迟处理，例如像 e-mail 发送。这能让应用程序对页面的请求有更快的响应。&lt;/p&gt;
&lt;p&gt;Lumen 和 Laravel 的队列功能除了接下来会列出来的不同点以外，并没有太大区别，所以更多关于 Lumen 队列的使用，请参阅 &lt;a href=&quot;http://laravelacademy.org/post/6922.html&quot;&gt;Laravel&lt;/a&gt; 文档 。&lt;/p&gt;
    
    </summary>
    
      <category term="Lumen" scheme="http://www.cenhq.com/categories/Lumen/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Lumen/PHP/"/>
    
    
      <category term="supervisord" scheme="http://www.cenhq.com/tags/supervisord/"/>
    
      <category term="queue" scheme="http://www.cenhq.com/tags/queue/"/>
    
      <category term="sendEmail" scheme="http://www.cenhq.com/tags/sendEmail/"/>
    
  </entry>
  
  <entry>
    <title>lumen 头像上传</title>
    <link href="http://www.cenhq.com/2017/03/06/lumen-avatar-upload/"/>
    <id>http://www.cenhq.com/2017/03/06/lumen-avatar-upload/</id>
    <published>2017-03-06T05:50:17.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><code>Lumen</code> 可以使用 <code>Illuminate\Http\Request</code> 实例中的 <code>file</code> 方法来获取上传文件。<code>file</code>方法返回的对象是 <code>Symfony\Component\HttpFoundation\File\UploadedFile</code> 类的实例，该类继承了 PHP 的 <code>SplFileInfo</code> 类，并提供了许多和文件交互的方法：<br></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$file = $request-&gt;file(<span class="string">'photo'</span>);</div></pre></td></tr></table></figure>
<p>你可以使用请求的 <code>hasFile</code> 方法确认上传的文件是否存在：<br><br><a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($request-&gt;hasFile(<span class="string">'photo'</span>)) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了检查上传的文件是否存在外，你也可以通过 <code>isValid</code> 方法验证上传的文件是否有效<br></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($request-&gt;file(<span class="string">'photo'</span>)-&gt;isValid()) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>移动上传的文件<br>若要移动上传的文件至新位置，则必须使用 <code>move</code> 方法。该方法会将文件从缓存位置（由你的 PHP 配置决定）移动至你指定的永久保存位置：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$request-&gt;file(<span class="string">'photo'</span>)-&gt;move($destinationPath);</div><div class="line"></div><div class="line">$request-&gt;file(<span class="string">'photo'</span>)-&gt;move($destinationPath, $fileName);</div></pre></td></tr></table></figure>
<h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><p>创建保存文件的目录</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mk_dir</span><span class="params">($path)</span></span></div><div class="line">    &#123;</div><div class="line">        $dir = date(<span class="string">'y/md'</span>, time());</div><div class="line">        <span class="keyword">if</span>(is_dir($path . <span class="string">'/'</span> . $dir))&#123;</div><div class="line">            <span class="keyword">return</span> $path . <span class="string">'/'</span> . $dir;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            mkdir($path . <span class="string">'/'</span> . $dir,<span class="number">0777</span>,<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> $path . <span class="string">'/'</span> . $dir;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上传文件</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadAvatar</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        $id = Auth::user()-&gt;id;</div><div class="line">        <span class="comment">//获取文件</span></div><div class="line">        $avatar = $request-&gt;file(<span class="string">'avatar'</span>);</div><div class="line">        <span class="comment">//判断文件是否有效</span></div><div class="line">        <span class="keyword">if</span>(!($request-&gt;hasFile(<span class="string">'avatar'</span>) &amp;&amp; $avatar-&gt;isValid()))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">1</span>, <span class="string">''</span>, <span class="string">'没有图片'</span>);</div><div class="line">        <span class="comment">//表单验证</span></div><div class="line">        $userinfo = <span class="keyword">new</span> Userinfo();</div><div class="line">        $validator_userinfo = <span class="keyword">$this</span>-&gt;ruleValidator($request, $userinfo-&gt;rules([<span class="string">'avatar'</span>]), $userinfo-&gt;message());</div><div class="line">        <span class="keyword">if</span>($validator_userinfo)</div><div class="line">            <span class="keyword">return</span> $validator_userinfo;</div><div class="line">        <span class="comment">//获取文件后缀</span></div><div class="line">        $ext = $avatar-&gt;getClientMimeType();</div><div class="line">        $ext = explode(<span class="string">'/'</span>,$ext);</div><div class="line">        <span class="comment">//获取文件大小</span></div><div class="line">        $img_size = floor($avatar-&gt;getSize() / <span class="number">1024</span>) . <span class="string">'KB'</span>;</div><div class="line">        <span class="keyword">if</span>($img_size &gt;= <span class="number">2048</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">1</span>, <span class="string">''</span>, <span class="string">'文件大小不能超过2MB'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//存储图片</span></div><div class="line">        $request-&gt;file(<span class="string">'avatar'</span>)-&gt;move(<span class="keyword">$this</span>-&gt;mk_dir(<span class="keyword">$this</span>-&gt;path), <span class="string">'/'</span> . $avatar-&gt;getFilename() . <span class="string">'.'</span> . $ext[<span class="number">1</span>]);</div><div class="line">        $src_img_path = <span class="keyword">$this</span>-&gt;mk_dir(<span class="keyword">$this</span>-&gt;path) . <span class="string">'/'</span> . $avatar-&gt;getFilename() . <span class="string">'.'</span> . $ext[<span class="number">1</span>];</div><div class="line">        $des_img_path = <span class="keyword">$this</span>-&gt;mk_dir(<span class="keyword">$this</span>-&gt;small_path) . <span class="string">'/'</span> . <span class="string">'small_'</span> . $avatar-&gt;getFilename() . <span class="string">'.'</span> . $ext[<span class="number">1</span>];</div><div class="line">        <span class="comment">//生成缩略图</span></div><div class="line">        $slt = <span class="keyword">$this</span>-&gt;CreateImage($src_img_path, $des_img_path, <span class="number">40</span>,<span class="number">40</span>);</div><div class="line">        <span class="keyword">if</span>($slt)&#123;</div><div class="line">            <span class="comment">//保存到数据库</span></div><div class="line">            $res = DB::update(<span class="string">'update userinfo set avatar ="'</span>. $des_img_path . <span class="string">'" where userid = '</span>.$id);</div><div class="line">            <span class="keyword">if</span>($res)&#123;</div><div class="line">                $data[<span class="string">'avatar'</span>] = $des_img_path;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">0</span>, $data, <span class="string">'文件上传成功'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">1</span>, <span class="string">''</span>, <span class="string">'文件上传失败'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">1</span>, <span class="string">''</span>, <span class="string">'生成缩略图失败'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>生成缩略图代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span>  <span class="function"><span class="keyword">function</span> <span class="title">CreateImage</span><span class="params">($SrcImageUrl, $DirImageUrl, $Width, $Height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 图片类型</span></div><div class="line">        $type = substr(strrchr($SrcImageUrl, <span class="string">"."</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 初始化图像</span></div><div class="line">        <span class="keyword">if</span> ($type == <span class="string">"jpg"</span>)</div><div class="line">            $img = imagecreatefromjpeg($SrcImageUrl);</div><div class="line">        <span class="keyword">if</span> ($type == <span class="string">"gif"</span>)</div><div class="line">            $img = imagecreatefromgif($SrcImageUrl);</div><div class="line">        <span class="keyword">if</span> ($type == <span class="string">"png"</span>)</div><div class="line">            $img = imagecreatefrompng($SrcImageUrl);</div><div class="line"></div><div class="line">        $srcw = imagesx($img);</div><div class="line">        $srch = imagesy($img);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($srcw / $srch &gt; $Width / $Height) &#123;</div><div class="line">            <span class="keyword">if</span> ($srcw &gt; $Width) &#123;</div><div class="line">                $new_width = $Width;</div><div class="line">                $new_height = $srch * ($Width / $srcw);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                $new_width = $srcw;</div><div class="line">                $new_height = $srch;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> ($srch &gt; $Height) &#123;</div><div class="line">                $new_height = $Height;</div><div class="line">                $new_width = $srcw * ($Height / $srch);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                $new_width = $srcw;</div><div class="line">                $new_height = $srch;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $new_image = imagecreatetruecolor($new_width, $new_height);</div><div class="line">        imagecopyresampled($new_image, $img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, $new_width, $new_height, $srcw, $srch);</div><div class="line">        imagejpeg($new_image, $DirImageUrl);</div><div class="line"></div><div class="line">        imagedestroy($img);</div><div class="line">        imagedestroy($new_image);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>返回结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"data"</span>: &#123;</div><div class="line">    <span class="string">"avatar"</span>: <span class="string">"small_avatar/17/0302/small_phpXkcJAT.png"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"文件上传成功"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Lumen&lt;/code&gt; 可以使用 &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; 实例中的 &lt;code&gt;file&lt;/code&gt; 方法来获取上传文件。&lt;code&gt;file&lt;/code&gt;方法返回的对象是 &lt;code&gt;Symfony\Component\HttpFoundation\File\UploadedFile&lt;/code&gt; 类的实例，该类继承了 PHP 的 &lt;code&gt;SplFileInfo&lt;/code&gt; 类，并提供了许多和文件交互的方法：&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$file = $request-&amp;gt;file(&lt;span class=&quot;string&quot;&gt;&#39;photo&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以使用请求的 &lt;code&gt;hasFile&lt;/code&gt; 方法确认上传的文件是否存在：&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/PHP/"/>
    
      <category term="Lumen" scheme="http://www.cenhq.com/categories/PHP/Lumen/"/>
    
    
      <category term="uploadFile" scheme="http://www.cenhq.com/tags/uploadFile/"/>
    
      <category term="avatar" scheme="http://www.cenhq.com/tags/avatar/"/>
    
  </entry>
  
  <entry>
    <title>密码错误3次锁定账号</title>
    <link href="http://www.cenhq.com/2017/03/03/after-locking-verity-password-three-times-failure/"/>
    <id>http://www.cenhq.com/2017/03/03/after-locking-verity-password-three-times-failure/</id>
    <published>2017-03-03T05:23:11.000Z</published>
    <updated>2017-03-28T10:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="逻辑简介"><a href="#逻辑简介" class="headerlink" title="逻辑简介"></a>逻辑简介</h5><p>创建数据表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`userlock`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键id'</span>,</div><div class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</div><div class="line">  <span class="string">`lock_time`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'14400'</span> <span class="keyword">COMMENT</span> <span class="string">'锁定时间，默认14400秒'</span>,</div><div class="line">  <span class="string">`error_times`</span> tinyint(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'错误次数，默认0次'</span>,</div><div class="line">  <span class="string">`last_login`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最新登录时间'</span>,</div><div class="line">  <span class="string">`created_at`</span> <span class="keyword">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`updated_at`</span> <span class="keyword">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`userid`</span> (<span class="string">`userid`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">23</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>判断用户是否在<code>userlock</code>表中；如果不存在，则继续验证登录密码；</li>
<li>如果存在，则判断<code>userlock</code>中的当前时间<code>time()</code>减去<code>last_login</code>是否大于<code>lock_time</code>，如果大于，则继续验证密码；否则判断<code>error_times</code>是否大于等于3次，如果大于，返回<code>false</code>;</li>
<li>回到第一步，验证密码，如果密码错误并且用户不存在<code>userlock</code>表中，则插入数据；<code>error_times</code>为1，<code>last_login</code>为当前时间；写入到<code>userlock</code>表中；</li>
<li>如果用户已在<code>userlock</code>表中，则判断<code>time()</code>减去<code>last_login</code>是否大于<code>lock_time</code>,如果大于则<code>error_times</code>为1，否则<code>error_times</code>自加1, <code>last_login</code>为当前时间;写入到<code>userlock</code>表中；</li>
<li>还是回到第一步，验证密码，如果密码正确，则判断该用户是否在<code>userlock</code>表中;如果存在，则<code>error_times</code>为0，<code>last_login</code>为当前时间，保存该表；</li>
</ol>
<h5 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h5><p>用户登录前,检测用户是否在锁表内</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkLock</span><span class="params">($userid)</span></span></div><div class="line">    &#123;</div><div class="line">        $userlock = <span class="keyword">new</span> UserLock();</div><div class="line">        $userlock_data = $userlock-&gt;where(<span class="string">'userid'</span>, <span class="string">'='</span>, $userid)-&gt;first();</div><div class="line">        <span class="comment">//用户不在锁表内</span></div><div class="line">        <span class="keyword">if</span>(!$userlock_data) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//用户在锁表内,并且锁定时间小于4小时,并且错误次数大于3;</span></div><div class="line">        $validTime = time() - strtotime($userlock_data[<span class="string">'last_login'</span>]);</div><div class="line">        <span class="keyword">if</span>($validTime &lt; $userlock_data[<span class="string">'lock_time'</span>])&#123;</div><div class="line">            <span class="keyword">if</span>($userlock_data[<span class="string">'error_times'</span>] &gt;= <span class="number">3</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>判断用户是否在<code>userlock</code>中</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertlock</span><span class="params">($id)</span></span></div><div class="line">    &#123;</div><div class="line">        $userlock = <span class="keyword">new</span> UserLock();</div><div class="line">        $userlock_data = UserLock::where(<span class="string">"userid"</span>,$id)-&gt;first();</div><div class="line">        <span class="keyword">if</span>($userlock_data)&#123;</div><div class="line">            $userlock = UserLock::find($userlock_data[<span class="string">'id'</span>]);</div><div class="line">            $userlock-&gt;userid = $id;</div><div class="line">            <span class="comment">//如果锁表的时间在4小时之内,则error_times + 1;否则为1;</span></div><div class="line">            $validTime = time() - strtotime($userlock_data[<span class="string">'last_login'</span>]);</div><div class="line">            <span class="keyword">if</span>($validTime &lt; $userlock_data[<span class="string">'lock_time'</span>]) &#123;</div><div class="line">                $userlock-&gt;error_times += <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $userlock-&gt;error_times = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            $userlock-&gt;last_login = date(<span class="string">'Y-m-d H:i:m'</span>, time());</div><div class="line">            <span class="keyword">if</span>($userlock-&gt;save())</div><div class="line">                <span class="keyword">return</span> $userlock;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//如果用户不在锁表内,则新增;</span></div><div class="line">            $userlock-&gt;userid = $id;</div><div class="line">            $userlock-&gt;error_times = <span class="number">1</span>;</div><div class="line">            $userlock-&gt;last_login = date(<span class="string">'Y-m-d H:i:m'</span>, time());</div><div class="line">            <span class="keyword">if</span>($userlock-&gt;save())</div><div class="line">                <span class="keyword">return</span> $userlock;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果密码验证成功</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$userlock = $userlock-&gt;where(<span class="string">'userid'</span>,<span class="string">'='</span>,$user_data[<span class="string">'id'</span>])-&gt;first();</div><div class="line"><span class="keyword">if</span>($userlock)&#123;</div><div class="line">    $userlock-&gt;error_times = <span class="number">0</span>;</div><div class="line">    $userlock-&gt;last_login = date(<span class="string">'Y-m-d H:i:m'</span>, time());</div><div class="line">    $userlock-&gt;save();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;逻辑简介&quot;&gt;&lt;a href=&quot;#逻辑简介&quot; class=&quot;headerlink&quot; title=&quot;逻辑简介&quot;&gt;&lt;/a&gt;逻辑简介&lt;/h5&gt;&lt;p&gt;创建数据表&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`userlock`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;主键id&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`userid`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;用户id&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`lock_time`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;14400&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;锁定时间，默认14400秒&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`error_times`&lt;/span&gt; tinyint(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;错误次数，默认0次&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`last_login`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;最新登录时间&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`created_at`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`updated_at`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`userid`&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`userid`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT=&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CHARSET&lt;/span&gt;=utf8;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/PHP/"/>
    
      <category term="Lumen" scheme="http://www.cenhq.com/categories/PHP/Lumen/"/>
    
    
      <category term="password-verity" scheme="http://www.cenhq.com/tags/password-verity/"/>
    
      <category term="lock-user" scheme="http://www.cenhq.com/tags/lock-user/"/>
    
      <category term="three-times" scheme="http://www.cenhq.com/tags/three-times/"/>
    
  </entry>
  
  <entry>
    <title>lumen表单验证</title>
    <link href="http://www.cenhq.com/2017/03/03/lumen-form-validate/"/>
    <id>http://www.cenhq.com/2017/03/03/lumen-form-validate/</id>
    <published>2017-03-03T05:15:54.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Lumen 提供了多种不同的处理方法来对应用程序传入的数据进行验证。默认情况下，Lumen 的基底控制器类使用了 ValidatesRequests trait，其提供了一种便利的方法来使用各种强大的验证规则验证传入的 HTTP 请求。</p>
<p>Lumen 和 Laravel 验证功能除了接下来会列出来的不同点以外，并没有太大区别，所以更多关于 Lumen 验证的使用，请参阅 Laravel 文档 。</p>
<blockquote>
<p>Lumen 与 Laravel 不同，表单请求验证需要Laravel支持。Lumen 可以使用<code>$this-validate</code>方法来验证。</p>
<p>还有不同的是，Lumen 支持路由闭包的方式直接使用<code>validate</code>方法<br><a id="more"></a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"></div><div class="line">$app-&gt;post(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Request $request)</span> </span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;validate($request, [</div><div class="line">        <span class="string">'name'</span> =&gt; <span class="string">'required'</span>,</div><div class="line">        <span class="string">'email'</span> =&gt; <span class="string">'required|email|unique:users'</span></div><div class="line">    ]);</div><div class="line"></div><div class="line">    <span class="comment">// 存储用户...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>同样可以使用<code>Validator::make()</code> facade方法来验证</p>
</blockquote>
<h5 id="添加验证规则"><a href="#添加验证规则" class="headerlink" title="添加验证规则"></a>添加验证规则</h5><p>验证规则可以放在路由下，也可以放在<code>Controller</code>方法下；</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;validate($request, [</div><div class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|unique:posts|max:255'</span>,</div><div class="line">        <span class="string">'body'</span> =&gt; <span class="string">'required'</span>,</div><div class="line">    ]);</div><div class="line"></div><div class="line">    <span class="comment">// The blog post is valid, store in database...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如你所见，我们将本次 HTTP 请求及所需的验证规则传递至 validate 方法中。另外再提醒一次，如果验证失败，将会自动生成一个对应的响应。如果验证通过，那我们的控制器将会继续正常运行。</p>
<p>本人使用验证规则放在<code>Model</code>中的方法里</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">($array = [<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'mobile_no'</span>, <span class="string">'old_password'</span>])</span></span></div><div class="line">   &#123;</div><div class="line">       $rules =  [</div><div class="line">           <span class="string">'username'</span> =&gt;  <span class="string">'required|regex:/^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;$/'</span>,</div><div class="line">           <span class="string">'email'</span> =&gt;  <span class="string">'required|email'</span>,</div><div class="line">           <span class="string">'password'</span>  =&gt; <span class="string">'required|min:6'</span>,</div><div class="line">           <span class="string">'old_password'</span>  =&gt; <span class="string">'required|min:6'</span>,</div><div class="line">           <span class="string">'mobile_no'</span> =&gt; <span class="string">'required|numeric|digits:11'</span>,</div><div class="line">       ];</div><div class="line">       <span class="keyword">foreach</span>($array <span class="keyword">as</span> $item)&#123;</div><div class="line">           $data[$item] =  $rules[$item];</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> $data;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>并且附上自定义错误信息</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>  [</div><div class="line">            <span class="string">'username.required'</span> =&gt; <span class="string">'请填写用户名'</span>,</div><div class="line">            <span class="string">'username.unique'</span> =&gt; <span class="string">'用户名已存在'</span>,</div><div class="line">            <span class="string">'username.regex'</span> =&gt; <span class="string">'用户名不合法'</span>,</div><div class="line">            <span class="string">'email.required'</span> =&gt; <span class="string">'请填写邮箱地址'</span>,</div><div class="line">            <span class="string">'email.unique'</span>    =&gt;  <span class="string">'邮箱名已存在'</span>,</div><div class="line">            <span class="string">'email.email'</span> =&gt;  <span class="string">'邮箱名不合法'</span>,</div><div class="line">            <span class="string">'password.required'</span>    =&gt;  <span class="string">'请填写密码'</span>,</div><div class="line">            <span class="string">'password.min'</span>  =&gt;  <span class="string">'密码至少需要 :min 位字符'</span>,</div><div class="line">            <span class="string">'mobile_no.required'</span>    =&gt;  <span class="string">'请填写手机号'</span>,</div><div class="line">            <span class="string">'mobile_no.unique'</span>  =&gt;  <span class="string">'手机号已存在'</span>,</div><div class="line">            <span class="string">'mobile_no.numeric'</span> =&gt;  <span class="string">'手机号必须为数字'</span>,</div><div class="line">            <span class="string">'mobile_no.digits'</span>  =&gt;  <span class="string">'手机号必须为 :digits 位'</span>,</div><div class="line">        ];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h5><p>在基础类里添加验证方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Validator</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ruleValidator</span><span class="params">(Request $request, $rule=[], $message=[])</span></span></div><div class="line">    &#123;</div><div class="line">        $validator = Validator::make($request-&gt;all(), $rule, $message);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($validator-&gt;fails())&#123;</div><div class="line">            <span class="keyword">foreach</span>($validator-&gt;errors()-&gt;getMessages() <span class="keyword">as</span> $message)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatOutput(<span class="number">1</span>, <span class="string">''</span>, $message[<span class="number">0</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>具体操作则调用此方法，验证方式灵活</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$validator_user = <span class="keyword">$this</span>-&gt;ruleValidator($request, $user-&gt;rules([<span class="string">'username'</span>,<span class="string">'password'</span>]), $user-&gt;message());</div><div class="line">            <span class="keyword">if</span> ($validator_user)</div><div class="line">                <span class="keyword">return</span> $validator_user;</div></pre></td></tr></table></figure>
<p>参考文档:<br><a href="https://lumen.laravel-china.org/docs/5.3/validation" target="_blank" rel="external">https://lumen.laravel-china.org/docs/5.3/validation</a><br><a href="https://www.kancloud.cn/iwzh/laravel-doc5_3/229847" target="_blank" rel="external">https://www.kancloud.cn/iwzh/laravel-doc5_3/229847</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;Lumen 提供了多种不同的处理方法来对应用程序传入的数据进行验证。默认情况下，Lumen 的基底控制器类使用了 ValidatesRequests trait，其提供了一种便利的方法来使用各种强大的验证规则验证传入的 HTTP 请求。&lt;/p&gt;
&lt;p&gt;Lumen 和 Laravel 验证功能除了接下来会列出来的不同点以外，并没有太大区别，所以更多关于 Lumen 验证的使用，请参阅 Laravel 文档 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lumen 与 Laravel 不同，表单请求验证需要Laravel支持。Lumen 可以使用&lt;code&gt;$this-validate&lt;/code&gt;方法来验证。&lt;/p&gt;
&lt;p&gt;还有不同的是，Lumen 支持路由闭包的方式直接使用&lt;code&gt;validate&lt;/code&gt;方法&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/PHP/"/>
    
      <category term="Lumen" scheme="http://www.cenhq.com/categories/PHP/Lumen/"/>
    
    
      <category term="form-validate" scheme="http://www.cenhq.com/tags/form-validate/"/>
    
      <category term="validator" scheme="http://www.cenhq.com/tags/validator/"/>
    
  </entry>
  
  <entry>
    <title>Lumen实现用户注册登录认证</title>
    <link href="http://www.cenhq.com/2017/02/21/Lumen-user-register-and-login-auth/"/>
    <id>http://www.cenhq.com/2017/02/21/Lumen-user-register-and-login-auth/</id>
    <published>2017-02-21T06:47:10.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Lumen是一个基于Laravel的微框架，号称是以速度为生。截用Lumen官网的一段，号称是比silex和slim还要快。</p>
<p>本文将用Lumen来实现一个完整的用户注册、登录及获取用户信息的API。</p>
<p>Lumen官方网站：<a href="https://lumen.laravel.com/" target="_blank" rel="external">https://lumen.laravel.com/</a><br>Lumen中文网站：<a href="http://lumen.laravel-china.org/" target="_blank" rel="external">http://lumen.laravel-china.org/</a></p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project --prefer-dist laravel/lumen lumen</div></pre></td></tr></table></figure>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>跟全栈框架 Laravel 框架不一样的是，所有的 Lumen 框架的配置信息都存储在 .env 文件中。一旦 Lumen 成功安装，你需要 配置本地环境,如果没有在目录下新建.env文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">APP_ENV=<span class="built_in">local</span></div><div class="line">APP_DEBUG=<span class="literal">true</span></div><div class="line">APP_KEY=SomeRandomString!!!</div><div class="line">DB_CONNECTION=mysql</div><div class="line">DB_HOST=localhost</div><div class="line">DB_PORT=3306</div><div class="line">DB_DATABASE=lumen</div><div class="line">DB_USERNAME=root</div><div class="line">DB_PASSWORD=charlie</div><div class="line">CACHE_DRIVER=memcached</div><div class="line">QUEUE_DRIVER=sync</div><div class="line">APP_TIMEZONE=PRC</div><div class="line">DB_TIMEZONE=+08:00</div></pre></td></tr></table></figure></p>
<h3 id="三-配置迁移数据库"><a href="#三-配置迁移数据库" class="headerlink" title="三 配置迁移数据库"></a>三 配置迁移数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_users_table --create=users</div></pre></td></tr></table></figure>
<p>执行这条命令后，会在项目目录lumen/database/migrations/ 目录下生成一个php文件，这个文件主要包括两个函数，在up()函数中根据你的需求定义数据库字段。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsersTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Run the migrations.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">            $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'username'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'password'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'email'</span>);</div><div class="line">            $table-&gt;string(<span class="string">'api_token'</span>, <span class="number">60</span>)-&gt;unique();</div><div class="line">            $table-&gt;timestamps();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Reverse the migrations.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Schema::dropIfExists(<span class="string">'users'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行命令，创建数据库<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure></p>
<p>数据库会生成一张users表<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-1.png" alt=""></p>
<h3 id="创建用户数据模型"><a href="#创建用户数据模型" class="headerlink" title="创建用户数据模型"></a>创建用户数据模型</h3><p>如果你的项目文件夹lumen\app\文件夹下没有User.php文件，那么新建一个User.php文件，文件内容如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Auth</span>\<span class="title">Authorizable</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>, <span class="title">AuthorizableContract</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The attributes that are mass assignable.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@var</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $fillable = [</div><div class="line">        <span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'api_token'</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The attributes excluded from the model's JSON form.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@var</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $hidden = [</div><div class="line">        <span class="string">'password'</span>,</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h3><p>定义三个路由，实现用户登录，注册及获取用户信息</p>
<table>
<thead>
<tr>
<th>路由类型</th>
<th>路由路径</th>
<th>路由控制器</th>
</tr>
</thead>
<tbody>
<tr>
<td>POST</td>
<td>user/register</td>
<td>UserController@register</td>
</tr>
<tr>
<td>POST</td>
<td>user/login</td>
<td>UserController@login</td>
</tr>
<tr>
<td>GET</td>
<td>user/info</td>
<td>UserController@info</td>
</tr>
</tbody>
</table>
<p>根据上述表的内容，在routes/web.php中定义路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$app-&gt;get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $app-&gt;version();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//登录注册</span></div><div class="line">$app-&gt;post(<span class="string">'user/login'</span>, <span class="string">'UserController@login'</span>);</div><div class="line">$app-&gt;post(<span class="string">'user/register'</span>, <span class="string">'UserController@register'</span>);</div><div class="line">$app-&gt;get(<span class="string">'user/info'</span>, [</div><div class="line">    <span class="string">'middleware'</span>    =&gt;  <span class="string">'authToken'</span>,</div><div class="line">    <span class="string">'uses'</span>  =&gt;  <span class="string">'UserController@info'</span></div><div class="line">]);</div></pre></td></tr></table></figure></p>
<h3 id="Controller逻辑"><a href="#Controller逻辑" class="headerlink" title="Controller逻辑"></a>Controller逻辑</h3><p>在Lumen\app\Http\Controllers\文件夹下新建用户控制器UserController.php，实现用户注册、登录和用户信息获取功能<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $salt;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;salt = <span class="string">"userloginregister"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//登录</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($request-&gt;has(<span class="string">'username'</span>) &amp;&amp; $request-&gt;has(<span class="string">'password'</span>))&#123;</div><div class="line">            $user = User::where(<span class="string">'username'</span>, <span class="string">'='</span>, $request-&gt;input(<span class="string">'username'</span>))-&gt;where(<span class="string">'password'</span>, <span class="string">'='</span>, sha1(<span class="keyword">$this</span>-&gt;salt.$request-&gt;input(<span class="string">'password'</span>)))-&gt;first();</div><div class="line">            <span class="keyword">if</span>($user)&#123;</div><div class="line">                $token = str_random(<span class="number">60</span>);</div><div class="line">                $user-&gt;api_token = $token;</div><div class="line">                $user-&gt;save();</div><div class="line">                <span class="keyword">return</span> $user-&gt;api_token;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户名或密码不正确,登录失败'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'登录信息不完整,请输入用户名和密码'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//注册</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($request-&gt;has(<span class="string">'username'</span>) &amp;&amp; $request-&gt;has(<span class="string">'password'</span>) &amp;&amp; $request-&gt;has(<span class="string">'email'</span>))&#123;</div><div class="line">            $user = <span class="keyword">new</span> User;</div><div class="line">            $user-&gt;username = $request-&gt;input(<span class="string">'username'</span>);</div><div class="line">            $user-&gt;password = sha1(<span class="keyword">$this</span>-&gt;salt.$request-&gt;input(<span class="string">'password'</span>));</div><div class="line">            $user-&gt;email = $request-&gt;input(<span class="string">'email'</span>);</div><div class="line">            $user-&gt;api_token = str_random(<span class="number">60</span>);</div><div class="line">            <span class="keyword">if</span>($user-&gt;save())&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户注册成功!'</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'用户注册失败!'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'请输入完整用户信息!'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//信息</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Auth::user();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="认证服务"><a href="#认证服务" class="headerlink" title="认证服务"></a>认证服务</h3><p>必须要通过token验证才能获取用户信息。在Lumen\app\Http\Providers\AuthServiceProvider.php中定义验证服务。我们使用header包含token的形式来验证。修改Lumen\app\Http\Providers\AuthServiceProvider.php文件代码。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Gate</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Register any application services.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Boot the authentication services for the application.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Here you may define how you wish users to be authenticated for your Lumen</span></div><div class="line">        <span class="comment">// application. The callback which receives the incoming request instance</span></div><div class="line">        <span class="comment">// should return either a User instance or null. You're free to obtain</span></div><div class="line">        <span class="comment">// the User instance via an API token or any other method necessary.</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">'auth'</span>]-&gt;viaRequest(<span class="string">'api'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> ($request-&gt;header(<span class="string">'api_token'</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> User::where(<span class="string">'api_token'</span>, <span class="string">'='</span>, $request-&gt;header(<span class="string">'api_token'</span>))-&gt;first();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="定义认证中间件"><a href="#定义认证中间件" class="headerlink" title="定义认证中间件"></a>定义认证中间件</h3><p>在Lumen\app\Http\Middleware\文件夹下定义认证路由中间件AuthToken.php，就是之前在路由中定义的”authToken”。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthToken</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(Auth::check())&#123;</div><div class="line">            <span class="keyword">return</span> $next($request);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            abort(<span class="number">401</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="启用配置信息"><a href="#启用配置信息" class="headerlink" title="启用配置信息"></a>启用配置信息</h3><p>在lumen\app\bootstrap\app.php中取消注释<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//让数据库信息和认证服务修改生效</span></div><div class="line">$app-&gt;withFacades();</div><div class="line"></div><div class="line">$app-&gt;withEloquent();</div><div class="line"></div><div class="line"><span class="comment">//认证中间件</span></div><div class="line">$app-&gt;routeMiddleware([</div><div class="line">     <span class="string">'authToken'</span> =&gt; App\Http\Middleware\AuthToken::class</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">//开启注册提供者</span></div><div class="line">$app-&gt;register(App\Providers\AppServiceProvider::class);</div><div class="line">$app-&gt;register(App\Providers\AuthServiceProvider::class);</div></pre></td></tr></table></figure></p>
<h3 id="启动服务，测试"><a href="#启动服务，测试" class="headerlink" title="启动服务，测试"></a>启动服务，测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S localhost:8000</div></pre></td></tr></table></figure>
<p>1.用户注册<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-2.png" alt="user-register"></p>
<p>查看数据库<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-3.png" alt="show-user"></p>
<p>2.用户登录<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-4.png" alt="user-login"></p>
<p>登录后会更新数据库的api_token<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-5.png" alt="lumen-5"></p>
<p>3.获取用户信息<br><img src="/2017/02/21/Lumen-user-register-and-login-auth/lumen-6.png" alt="lumen-6"></p>
<hr>
<h3 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h3><p>1.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Symfony\Component\Debug\Exception\FatalErrorException]</div><div class="line">  Class <span class="string">'Memcached'</span> not found</div></pre></td></tr></table></figure></p>
<p>解决办法，安装memcached 和php扩展<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install memcached</div><div class="line">brew install php56-memcached</div><div class="line">启动memcached</div><div class="line">memcached -D</div></pre></td></tr></table></figure></p>
<p>2.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP Fatal error:  Call to a member <span class="keyword">function</span> connection() on null <span class="keyword">in</span> /Users/03315/www/lumen/vendor/illuminate/database/Eloquent/Model.php on line 1013</div></pre></td></tr></table></figure></p>
<p>解决办法，需要开启，路径<code>app/bootstrap/app.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$app-&gt;withEloquent();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Lumen是一个基于Laravel的微框架，号称是以速度为生。截用Lumen官网的一段，号称是比silex和slim还要快。&lt;/p&gt;
&lt;p&gt;本文将用Lumen来实现一个完整的用户注册、登录及获取用户信息的API。&lt;/p&gt;
&lt;p&gt;Lumen官方网站：&lt;a href=&quot;https://lumen.laravel.com/&quot;&gt;https://lumen.laravel.com/&lt;/a&gt;&lt;br&gt;Lumen中文网站：&lt;a href=&quot;http://lumen.laravel-china.org/&quot;&gt;http://lumen.laravel-china.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/PHP/"/>
    
      <category term="Lumen" scheme="http://www.cenhq.com/categories/PHP/Lumen/"/>
    
    
      <category term="access_token" scheme="http://www.cenhq.com/tags/access-token/"/>
    
      <category term="Api" scheme="http://www.cenhq.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp数据缓存</title>
    <link href="http://www.cenhq.com/2017/02/04/thinkphp-data-cache/"/>
    <id>http://www.cenhq.com/2017/02/04/thinkphp-data-cache/</id>
    <published>2017-02-04T14:34:07.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于第一次打开页面会很慢，所以需要做个数据缓存。正好thinkphp框架有封装好的方法，这里说下如何操作的；</p>
<p>1.首先介绍数据缓存的用法</p>
<p><pre class="lang:php decode:true ">// 缓存初始化<br>S(array(‘type’=&gt;’xcache’,’expire’=&gt;60));</pre><br>缓存初始化可以支持的参数根据不同的缓存方式有所区别，常用的参数是：<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>expire</td>
<td>缓存有效期(时间为秒)</td>
</tr>
<tr>
<td>prefix</td>
<td>缓存标识前缀</td>
</tr>
<tr>
<td>type</td>
<td>缓存类型</td>
</tr>
</tbody>
</table>
<p>系统目前已经支持的缓存类型包括：<code>Apachenote、Apc、Db、Eaccelerator、File、Memcache、Redis、Shmop、Sqlite、Wincache和Xcache</code>。</p>
<p>如果S方法不传入type参数初始化的话，则读取配置文件中设置的<code>DATA_CACHE_TYPE</code>参数值作为默认类型。同样的道理，prefix参数如果没有传入会读取配置文件的<code>DATA_CACHE_PREFIX</code>参数值，expire参数没有传入则读取<code>DATA_CACHE_TIME</code>配置值作为默认。</p>
<p>2.缓存设置</p>
<p><pre class="lang:php decode:true ">// 设置缓存<br>S(‘name’,$value);<br>// 缓存数据300秒<br>S(‘name’,$value,300);<br>// 采用文件方式缓存数据300秒<br>S(‘name’,$value,array(‘type’=&gt;’file’,’expire’=&gt;300));</pre><br>3.缓存读取</p>
<p><pre class="lang:php decode:true ">// 读取缓存<br>$value = S(‘name’);</pre><br>4.缓存删除</p>
<p><pre class="lang:sh decode:true ">// 删除缓存<br>S(‘name’,null);</pre><br>5.对象方式缓存</p>
<p><pre class="lang:php decode:true ">// 初始化缓存<br>$cache = S(array(‘type’=&gt;’xcache’,’prefix’=&gt;’think’,’expire’=&gt;600));<br>$cache-&gt;name = ‘value’; // 设置缓存<br>$value = $cache-&gt;name; // 获取缓存<br>unset($cache-&gt;name); // 删除缓存</pre><br>6.缓存队列</p>
<p><pre class="lang:php decode:true ">//设置了length参数后，系统只会缓存最近的100条缓存数据。<br>S(array(‘type’=&gt;’xcache’,’length’=&gt;100,’expire’=&gt;60));</pre><br>7.具体操作，我的代码如下</p>
<p><pre class="lang:php decode:true ">  public function test()<br>    {<br>        $cacheConfig = array(<br>            ‘type’ =&gt; ‘file’,<br>            ‘expire’ =&gt; 60,<br>            ‘prefix’ =&gt; ‘order_db<em>cache</em>‘<br>        );<br>        if(!$num = S(‘test’,’’,$cacheConfig)){<br>            sleep(10);<br>            $num = 11;<br>            S(‘test’,$num, $cacheConfig);<br>        }<br>        echo $num;</pre></p>
<pre><code>}&lt;/pre&gt;
</code></pre><p>8.访问该方法,生成缓存文件</p>
<p><img src="/2017/02/04/thinkphp-data-cache/QQ20170204-0.png" alt=""></p>
<p>第一次访问时间</p>
<p><img src="/2017/02/04/thinkphp-data-cache/QQ20170204-1.png" alt=""></p>
<p>第二次访问时间</p>
<p><img src="/2017/02/04/thinkphp-data-cache/QQ20170204-2.png" alt=""></p>
<p>说明已经使用上缓存了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于第一次打开页面会很慢，所以需要做个数据缓存。正好thinkphp框架有封装好的方法，这里说下如何操作的；&lt;/p&gt;
&lt;p&gt;1.首先介绍数据缓存的用法&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:php decode:true &quot;&gt;// 缓存初始化&lt;br&gt;S(array(‘type’=&amp;gt;’xcache’,’expire’=&amp;gt;60));&lt;/pre&gt;&lt;br&gt;缓存初始化可以支持的参数根据不同的缓存方式有所区别，常用的参数是：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/PHP/"/>
    
      <category term="Thinkphp" scheme="http://www.cenhq.com/categories/Dev/PHP/Thinkphp/"/>
    
    
      <category term="S方法" scheme="http://www.cenhq.com/tags/S%E6%96%B9%E6%B3%95/"/>
    
      <category term="thinkphp" scheme="http://www.cenhq.com/tags/thinkphp/"/>
    
      <category term="数据缓存" scheme="http://www.cenhq.com/tags/%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mongo-3.2主从配置</title>
    <link href="http://www.cenhq.com/2017/01/04/mongo-3-2-replication/"/>
    <id>http://www.cenhq.com/2017/01/04/mongo-3-2-replication/</id>
    <published>2017-01-04T16:08:24.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><div>mongodb的复制使用的oplog,类似于mysql复制的binlog,不同的是oplog是保存在local数据库中的.</div></p>
<p><div>需要合理的设置oplog的大小,如果此大小没有设置那么mongodb将会使用可用空间的5%来存放oplog.官方建议64位系统至少分配1G大小.</div></p>
<p><div>当slave端落后太多master端的时候,复制会终止,此时需要管理员手工来重启mongodb然后使用resync来重新同步.</div></p>
<p><div>此外你可以设置autoresync参数,当复制终止10秒后mongodb会自动重启复制,slave端会每隔10分钟自动重新同步一次.</div></p>
<p><div><strong>注意官方现在强烈不建议使用master-slave复制模式,建议使用replica sets复制.</strong></div><br><a id="more"></a></p>
<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>这里介绍的mongodb的主从复制,并不是复制集replica sets,复制的参数如下:</p>
<pre class="lang:sh decode:true ">Replication options:
  --oplogSize arg                       操作日志大小,单位M

Master/slave options (old; use replica sets instead):
  --master                              指定角色为master mode
  --slave                               指定角色为slave mode
  --source arg                          当角色为slave的时候使用,格式为:&lt;server:port&gt;
  --only arg                            当角色为slave的时候使用,指定单独同步的数据库,默认为同步所有数据库.
  --slavedelay arg                      指定一个应用日志的延时,单位秒
  --autoresync</pre>

<h3 id="创建mongo仓库"><a href="#创建mongo仓库" class="headerlink" title="创建mongo仓库"></a>创建mongo仓库</h3><pre class="lang:sh decode:true ">vim /etc/yum.repos.d/mongodb-org-3.2.repo
[mongodb-org-3.2]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc</pre>

<h3 id="主从服务器配置"><a href="#主从服务器配置" class="headerlink" title="主从服务器配置"></a>主从服务器配置</h3><pre class="lang:sh decode:true">#安装
yum install -y mongodb-org
#修改配置
egrep -v '^$|^#' /etc/mongod.conf
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
storage:
  dbPath: /var/lib/mongo
  journal:
    enabled: true
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile
net:
  port: 27017
  bindIp: 0.0.0.0  # Listen to local interface only, comment to listen on all interfaces.
security:
  authorization: enabled
</pre>

<h3 id="配置keyFile文件"><a href="#配置keyFile文件" class="headerlink" title="配置keyFile文件"></a>配置keyFile文件</h3><p>（<a href="https://docs.mongodb.com/v3.2/tutorial/enforce-keyfile-access-control-in-existing-replica-set/" target="_blank" rel="external">官网介绍</a>）密钥文件的内容作为共享密码的成员复制集。密钥文件的内容必须相同副本集的所有成员。你可以使用任何方法生成一个密钥文件选择。密钥文件的内容必须是6 - 1024个字符长。</p>
<pre class="lang:sh decode:true ">openssl rand -base64 512 &gt;&gt; /var/lib/mongo/mongo.key
chmod 600 /var/lib/mongo/mongo.key</pre>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class="lang:sh decode:true">#主服务器启动
mongod --master -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key
#从服务器启动
mongod --slave --source master_ip:27017 -f /etc/mongod.conf --keyFile /var/lib/mongo/mongo.key</pre>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>主服务器创建账号</p>
<pre class="lang:sh decode:true ">#!/bin/bash
mongo_connect="mongo 127.0.0.1/admin"  
cmd_use_admin="db = db.getSiblingDB('admin');"  
cmd_create_user="db.createUser({\"user\":\"sa\", \"pwd\":\"123456\", \"roles\":[\"root\"]});"  
echo $cmd_use_admin &gt; dbcmd.js  
echo $cmd_create_user &gt;&gt; dbcmd.js  
execute="$mongo_connect dbcmd.js"  
echo "#!/bin/sh" &gt; createDBUser.sh  
echo $execute &gt;&gt; createDBUser.sh  
sh createDBUser.sh &amp;&amp; rm -f createDBUser.sh</pre>
主库插入一条数据
<pre class="lang:sh decode:true ">use test
db.xxoo.save({xx:00});</pre>
从库查看是否同步
<pre class="lang:sh decode:true ">use test
db.test.find()</pre>

<h3 id="主库宕机如何将从库切为主库"><a href="#主库宕机如何将从库切为主库" class="headerlink" title="主库宕机如何将从库切为主库"></a>主库宕机如何将从库切为主库</h3><h6 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h6><ul>
<li>停止从库<br><code>kill -2 PID</code></li>
<li>删除从数据目录中的 local.<em><br>`rm -rf /data/mongodb/data/db/local.</em>`</li>
<li>以 –master 模式启动从库 (注意修改原有端口)<br><code>mongod --master -f /etc/mongod.master.conf</code></li>
</ul>
<h6 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h6><ul>
<li>备份从库</li>
<li>重建主库，导入新数据<br>参考：<a href="https://docs.mongodb.com/v3.2/replication/" target="_blank" rel="external">https://docs.mongodb.com/v3.2/replication/</a></li>
</ul>
<p><a href="https://blog.imdst.com/mongodb-yi-di-zhu-cong-tong-bu-pei-zhi/" target="_blank" rel="external">https://blog.imdst.com/mongodb-yi-di-zhu-cong-tong-bu-pei-zhi/</a></p>
<p><a href="http://blog.csdn.net/su377486/article/details/51599255" target="_blank" rel="external">http://blog.csdn.net/su377486/article/details/51599255</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div&gt;mongodb的复制使用的oplog,类似于mysql复制的binlog,不同的是oplog是保存在local数据库中的.&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;需要合理的设置oplog的大小,如果此大小没有设置那么mongodb将会使用可用空间的5%来存放oplog.官方建议64位系统至少分配1G大小.&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;当slave端落后太多master端的时候,复制会终止,此时需要管理员手工来重启mongodb然后使用resync来重新同步.&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;此外你可以设置autoresync参数,当复制终止10秒后mongodb会自动重启复制,slave端会每隔10分钟自动重新同步一次.&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;&lt;strong&gt;注意官方现在强烈不建议使用master-slave复制模式,建议使用replica sets复制.&lt;/strong&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DB" scheme="http://www.cenhq.com/categories/DB/"/>
    
      <category term="Linux" scheme="http://www.cenhq.com/categories/DB/Linux/"/>
    
      <category term="Mongo" scheme="http://www.cenhq.com/categories/DB/Linux/Mongo/"/>
    
    
      <category term="mongo-replcation" scheme="http://www.cenhq.com/tags/mongo-replcation/"/>
    
      <category term="mongo主从" scheme="http://www.cenhq.com/tags/mongo%E4%B8%BB%E4%BB%8E/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询24小时内无重复的记录</title>
    <link href="http://www.cenhq.com/2016/12/29/mysql-query-repeat-recodes-in-hours/"/>
    <id>http://www.cenhq.com/2016/12/29/mysql-query-repeat-recodes-in-hours/</id>
    <published>2016-12-29T11:21:55.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求：<br>一次性解决问题率 = 一次解决的对话量/接入量<br>一次解决的对话量：客户在接入人工客服对话结束后24小时（暂定）内未再次请求人工服务的对话</p>
<p>由于条件还要加上日期间隔，所以从mysql查询结果到PHP处理。</p>
<a id="more"></a>
<p>例如：每隔2天内，用户请求对话结束时间到下次发起时间的间隔超过24小时，即为一次性解决对话量。然后再除以接入量，就是一次性解决问题率。</p>
<p>首先给出sql语句，间隔查询参考<a href="http://blog.cenhq.com/2016/12/06/mysql-select-date-interval-custom-date/" target="_blank" rel="external">mysql日期间隔查询</a></p>
<p><pre class="lang:mysql decode:true ">– 间隔两天的记录<br>select<br>  floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId ,<br>  createUserId,<br>  createTime,<br>  endTime<br>FROM <code>think_kf_chat_im_group</code><br>  WHERE <code>endTime</code> &lt;&gt; 0<br>  AND <code>createTime</code> BETWEEN 1470022740 AND 1470886740<br>  and kfUserId &lt;&gt; 0<br>order BY sortId,createUserId;</pre><br>结果如下</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-0.png" alt=""></p>
<p>下面把这些记录到php通过数组来处理</p>
<p><pre class="lang:php decode:true">/**</pre></p>
<pre><code> * 一次性问题解决率,用户对话结束后,24小时内不在有新的对话出现
 * @param $array array
 * return array
 */
private function oneTimesQuesRate($array){
    $len = count($array);
    $arr = [];
    $sortId = [];
    $sortArr = [];
    $id = [];
    $count = [];
    $total = [];

    //遍历获取同一个sortId
    foreach($array as $v){
        $sortId[] = $v[&apos;sortid&apos;];
    }

    //取唯一sortId
    $unique_sortId = array_unique($sortId);

    //循环取出值
    foreach($unique_sortId as $v){
        $id[] = $v;
    }

    //循环取出间隔自定义时间内和24小时内不在发起的对话记录
    for($i = 0; $i &amp;lt; $len; $i++){
        for($j = $i+1; $j &amp;lt; $len; $j++){
            foreach($id as $v){
                if($v == $array[$i][&apos;sortid&apos;]){
                    if($array[$i][&apos;createuserid&apos;] == $array[$j][&apos;createuserid&apos;]){
                        if($array[$i][&apos;endtime&apos;] + 86400 &amp;lt;= $array[$j][&apos;createtime&apos;]){
                            // $num++;
                            $sortArr[] = $v;

                        }
                    }
                }
            }
            //每次对比后跳出循环
            break;
        }
        //获取每条的用户ID
        $arr[$array[$i][&apos;sortid&apos;]][] = $array[$i][&apos;createuserid&apos;];
    }
    //循环每个sortId,去重获取总数
    foreach($arr as $k=&amp;gt;$v){
        $count[$k] = count(array_unique($v));
    }
    //取相同值得总数
    $num = array_count_values($sortArr);

    //合并两个数组的值
    foreach($count as $k=&amp;gt;$v){
        foreach($num as $k1=&amp;gt;$v1){
            if($k == $k1){
                $total[$k] = $v + $v1;
            }else{
                $total[$k] = $v;
            }
        }
    }
    return $total;
}&lt;/pre&gt;
</code></pre><p>返回的结果如下图：<a href="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-1.png" target="_blank" rel="external"><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-1-300x138.png" alt="qq20161228-1"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>然后用这个结果来除以接入量，也就是下面的sql语句，当然这个sql查询到的结果也需要通过php来处理。也可以把上面的结果插入到数据库的临时表，通过sql来相除。多种方式可以实现。</p>
<p><pre class="lang:mysql decode:true ">– 获取每隔2天的接入量<br>SELECT<br>  floor( (2 - to_days(FROM_UNIXTIME(1470022740)) % 2 + to_days(FROM_UNIXTIME(createTime)) )/2 ) as sortId,<br>  min(date_format(from_unixtime(createTime),’%y-%m-%d’)) as mtime,<br>  count(kfUserId) as c<br>FROM <code>think_kf_chat_im_group</code><br>  WHERE <code>endTime</code> &lt;&gt; 0<br>  AND <code>createTime</code> BETWEEN 1470022740<br>  AND 1470886740<br>  and kfUserId &lt;&gt; 0<br>GROUP BY sortId;</pre><br>结果如下：</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-2.png" alt=""></p>
<p>用php来处理刚查询出的数据<a href="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-2.png" target="_blank" rel="external">
</a></p>
<p><pre class="lang:php decode:true ">    /**</pre></p>
<pre><code> * @param $arr1 array 总接入量
 * @param $arr array 处理过的接入量
 * @return array 返回百分比
 */
private function processData($arr1,$arr){
    $result = [];
    foreach($arr1 as $k1=&amp;gt;$v1){
        foreach($arr as $k=&amp;gt;$v){
            if($v1[&apos;sortid&apos;] == $k){
                $result[$k1][&apos;mtime&apos;] = $v1[&apos;mtime&apos;];
                $result[$k1][&apos;c&apos;] = floor($v/$v1[&apos;c&apos;]*100);
            }
        }
    }
    return $result;
}&lt;/pre&gt;
</code></pre><p>通过highcharts绘画出图形</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161228-3.png" alt=""></p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求：&lt;br&gt;一次性解决问题率 = 一次解决的对话量/接入量&lt;br&gt;一次解决的对话量：客户在接入人工客服对话结束后24小时（暂定）内未再次请求人工服务的对话&lt;/p&gt;
&lt;p&gt;由于条件还要加上日期间隔，所以从mysql查询结果到PHP处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/PHP/"/>
    
    
      <category term="24小时内重复记录" scheme="http://www.cenhq.com/tags/24%E5%B0%8F%E6%97%B6%E5%86%85%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    
      <category term="mysql查询重复记录" scheme="http://www.cenhq.com/tags/mysql%E6%9F%A5%E8%AF%A2%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>ajax作用域范围无法获取返回值</title>
    <link href="http://www.cenhq.com/2016/12/16/ajax-unable-to-get-return-value/"/>
    <id>http://www.cenhq.com/2016/12/16/ajax-unable-to-get-return-value/</id>
    <published>2016-12-16T16:15:46.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求：判断title的值是否在mongo库里存在，如果不存在就继续，存在则返回false。<br><a id="more"></a><br>代码如下：</p>
<p><pre class="lang:js decode:true">//检测标题是否存在<br>            var result = true;<br>            $.ajax({<br>                type: ‘POST’,<br>                url: ‘<strong>APP</strong>/Home/Custorm/chkTitle’,<br>                data: {‘title’:$(‘#title’).val()},<br>                success: function(data){<br>                    if(data.count &gt;= 1){<br>                        alert(‘标题已存在,请重新输入!’);<br>                        $(‘#title’).select();<br>                        result =  false;<br>                    }<br>                },<br>                error: function(e){<br>                    console.log(e);<br>                }<br>            });<br>            return result;</pre><br>上述代码是有问题的，返回的result一直true；</p>
<p>后查到原因，是因为ajax默认是异步传输，也就是说，ajax并没有等待 success:function(data) 回调函数执行完，就已经向下执行了。于是 result的值永远只会等于其初始化的值，也就是true.</p>
<p>解决办法， 设置为同步传输。</p>
<p>//默认 async: true</p>
<p>//同步 async: false</p>
<p>参考：<a href="http://blog.csdn.net/zxstone/article/details/7297284" target="_blank" rel="external">http://blog.csdn.net/zxstone/article/details/7297284</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求：判断title的值是否在mongo库里存在，如果不存在就继续，存在则返回false。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.cenhq.com/categories/JavaScript/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/JavaScript/PHP/"/>
    
    
      <category term="ajax作用域" scheme="http://www.cenhq.com/tags/ajax%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="ajax同步" scheme="http://www.cenhq.com/tags/ajax%E5%90%8C%E6%AD%A5/"/>
    
      <category term="ajax异步" scheme="http://www.cenhq.com/tags/ajax%E5%BC%82%E6%AD%A5/"/>
    
      <category term="ajax返回值" scheme="http://www.cenhq.com/tags/ajax%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp页面显示权限控制</title>
    <link href="http://www.cenhq.com/2016/12/08/thinkphp-page-access-control/"/>
    <id>http://www.cenhq.com/2016/12/08/thinkphp-page-access-control/</id>
    <published>2016-12-08T19:10:05.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求：报表生成后，需要发布报表浏览页，在发布的同时，需要设置权限；创建者有浏览该报表权限，所属部门有浏览权限，员工级别有浏览权限，只要包含其中就可；</p>
<p>如图所示：</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161208-0.png" alt=""><br><a id="more"></a><br>用户信息在session里保存，所以当创建报表是，获取用户信息，当发布报表时，写入用户信息和用户设置的权限到mongo库里</p>
<p>下面是显示的操作方法</p>
<p><pre class="lang:php decode:true ">//获取用户名,只显示当前用户的报表<br>$info = $_SESSION[‘info’][‘data’];<br>$map[‘user’] = $info[‘user_name’];<br>$map = $this-&gt;getAuthInfo($map);<br>$where[‘_complex’] = array(‘_logic’=&gt;”or”, array(‘user’=&gt;$map[‘user’]), array(‘dept’=&gt;$map[‘dept’]),array(‘level’=&gt;$map[‘level’]));<br>$data = $model-&gt;order(‘ym desc’)-&gt;where($where)-&gt;limit($Page-&gt;firstRow.’,’.$Page-&gt;listRows)-&gt;select();</pre></p>
<p><pre class="lang:php decode:true ">private function getAuthInfo($map)<br>    //获取当前用户的部门和级别<br>        $info = $_SESSION[‘title’];<br>        //判断用户所属部门<br>        if($info[‘department’] == ‘技术服务部’)<br>            $map[‘dept’] = ‘jw’;<br>        elseif ($info[‘department’] == ‘手游服务部’)<br>            $map[‘dept’] = ‘sy’;<br>        elseif ($info[‘department’] == ‘端游服务部’)<br>            $map[‘dept’] = ‘dy’;<br>        elseif ($info[‘department’] == ‘监控服务部’)<br>            $map[‘dept’] = ‘jk’;<br>        else<br>            $map[‘dept’] = ‘all’;</pre></p>
<pre><code>    //判断用户的级别
    if($info[&apos;powerTitle&apos;] == &apos;员工&apos;)
        $map[&apos;level&apos;] = &apos;staff&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;组长&apos;)
        $map[&apos;level&apos;] = &apos;leader&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;主管&apos;)
        $map[&apos;level&apos;] = &apos;competent&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;经理&apos;)
        $map[&apos;level&apos;] = &apos;manager&apos;;
    elseif ($info[&apos;powerTitle&apos;] == &apos;总监&apos;)
        $map[&apos;level&apos;] = &apos;director&apos;;

    return $map;
}&lt;/pre&gt;
</code></pre><p>显示效果如下：</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161208-1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求：报表生成后，需要发布报表浏览页，在发布的同时，需要设置权限；创建者有浏览该报表权限，所属部门有浏览权限，员工级别有浏览权限，只要包含其中就可；&lt;/p&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161208-0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/PHP/"/>
    
    
      <category term="mongo or查询" scheme="http://www.cenhq.com/tags/mongo-or%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="_complex" scheme="http://www.cenhq.com/tags/complex/"/>
    
      <category term="_logic=&amp;gt;&quot;or&quot;" scheme="http://www.cenhq.com/tags/logic-gt-or/"/>
    
      <category term="报表浏览权限" scheme="http://www.cenhq.com/tags/%E6%8A%A5%E8%A1%A8%E6%B5%8F%E8%A7%88%E6%9D%83%E9%99%90/"/>
    
      <category term="权限控制" scheme="http://www.cenhq.com/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询日期间隔自定义日期</title>
    <link href="http://www.cenhq.com/2016/12/06/mysql-select-date-interval-custom-date/"/>
    <id>http://www.cenhq.com/2016/12/06/mysql-select-date-interval-custom-date/</id>
    <published>2016-12-06T17:32:35.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求：由于查询日期范围内数据，需要定义日期范围内数据的单位，比如从2016年11月1日到2016年12月10日，间隔为5天，也就是11月1日，11月6日，11月11日。。。<br><a id="more"></a><br>这里要用到mysql函数，如下：</p>
<p><pre class="lang:mysql decode:true ">DELIMITER $$<br>create function getTimeSortId(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10))<br>returns int(10)<br>begin<br>declare sortId int;<br>set sortId = 0;<br>if timetype = “day” then<br>    set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );<br>end if;<br>if timetype = “week” then<br>    set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);<br>end if;<br>if timetype = “month” then<br>    set sortId = floor((splitNum -  ( month(startTime) + year(startTime) <em> 12) % splitNum + ( month(usetime) + year(usetime) </em> 12) )/splitNum);<br>end if;<br>return sortId;<br>end $$<br>DELIMITER ;<br></pre><br>解释下函数内容：</p>
<p>getTimeSortId为函数，timetype : 日期类型，startTime ： 开始时间，usetime : 字段时间，splitNum : 间隔数；</p>
<p>如果传递的参数为天，间隔数 - 转化为天的开始时间 % 间隔数 + 转化为天的字段时间 / 间隔数 = 排序ID</p>
<p>下面周跟月就具体介绍了；</p>
<p>具体运行如下：</p>
<p><pre class="lang:mysql decode:true">select<br>  getTimeSortId(‘day’,from_unixtime(1470109260,’%y-%m-%d’),from_unixtime(createTime,’%y-%m-%d’),3) as sortId,<br>  min(from_unixtime(createTime,’%y-%m-%d’)) as mtime,<br>  count(*) from think_kf_chat_im_group<br>where createTime BETWEEN 1470109260 AND 1472442060<br>group by sortId;</pre><br><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161206-0.png" alt=""></p>
<p>到数据库中运行，查看生成的语法</p>
<p><pre class="lang:mysql decode:true ">CREATE DEFINER=<code>root</code>@<code>localhost</code> FUNCTION <code>getTimeSortId</code>(timetype varchar(20),startTime datetime,usetime datetime,splitNum int(10)) RETURNS int(10)<br>begin<br>declare sortId int;<br>declare totalDay int;<br>declare totalMonth int;<br>declare totalYear int;<br>set sortId = 0;<br>if timetype = “day” then<br>    set sortId = floor( (splitNum - to_days(startTime) % splitNum + to_days(usetime) )/splitNum );<br>end if;<br>if timetype = “week” then<br>    set sortId = floor((splitNum - floor((TO_DAYS(startTime) + 5 )/7) % splitNum + floor((TO_DAYS(usetime) + 5 )/7) )/splitNum);<br>end if;<br>if timetype = “month” then<br>    set sortId = floor((splitNum -  ( month(startTime) + year(startTime) <em> 12) % splitNum + ( month(usetime) + year(usetime) </em> 12) )/splitNum);<br>end if;<br>return sortId;<br>end;</pre><br>如果不是root用户的话，会有权限问题；</p>
<p>我这里数据库有的不是root用户，所以要把这个函数放到php里定义成一个方法，然后调用生成sql语句来执行；</p>
<p><pre class="lang:php decode:true ">/**</pre></p>
<pre><code> * @param type day week month
 * @param startTime 开始时间,必须是时间戳
 * @param key 时间字段
 * @param asName 生成的ID
 * @param isTimestamp key是否为时间戳
 * @param echo $this-&amp;gt;getSortId(&quot;week&quot;, 1477929600, &quot;intitime&quot;, 2, &quot;sortId&quot;, false);
 */
protected function getSortId($type, $startTime, $key, $splitNum, $asName = &quot;sortId&quot;, $isTimestamp = false)
{
    if ($isTimestamp) {
        $key = &quot;FROM_UNIXTIME(&quot; . $key . &quot;)&quot;;
    }

    $startTime = &quot;FROM_UNIXTIME(&quot; . $startTime . &quot;)&quot;;

    if ($type == &quot;day&quot;) {
        $sql = &quot;floor( (&quot; . $splitNum . &quot; - to_days(&quot; . $startTime . &quot;) % &quot; . $splitNum . &quot; + to_days(&quot; . $key . &quot;) )/&quot; . $splitNum . &quot; ) as &quot; . $asName . &quot; &quot;;
    } else if ($type == &quot;week&quot;) {
        $sql = &quot;floor((&quot; . $splitNum . &quot; - floor((TO_DAYS(&quot; . $startTime . &quot;) + 5 )/7) % &quot; . $splitNum . &quot; + floor((TO_DAYS(&quot; . $key . &quot;) + 5 )/7) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;;
    } else if ($type == &quot;month&quot;) {
        $sql = &quot;floor((&quot; . $splitNum . &quot; -  ( month(&quot; . $startTime . &quot;) + year(&apos;&quot; . $startTime . &quot;&apos;) * 12) % &quot; . $splitNum . &quot; + ( month(&quot; . $key . &quot;) + year(&apos;&quot; . $key . &quot;&apos;) * 12) )/&quot; . $splitNum . &quot;) as &quot; . $asName . &quot; &quot;;
    } else {
        $sql = &quot;(0) as &quot; . $asName . &quot; &quot;;
    }
    return $sql;
}&lt;/pre&gt;
</code></pre><p>调用次方法来生成field</p>
<p><pre class="lang:php decode:true ">/**</pre></p>
<pre><code> * 根据日期间隔统计数据
 * @param $dateFormat int 间隔数字
 * @param $dateUtil string 间隔单位,如:天,周,月,年
 * @param $sTime int | datetime 开始时间
 * @param $dateField string 日期字段名
 * @param $opertion string 统计数量
 * @param $groupType string 日期类型
 * echo $this-&amp;gt;setIntervalTime(3,&apos;day&apos;,1477929600,&apos;createTime&apos;,&apos;count(*)&apos;,&apos;day&apos;);
 */
private function setIntervalTime($dateFormat,$dateUtil,$sTime,$dateField,$opertion,$groupType,$isTimestamp = true)
{
    if(is_numeric($dateFormat) &amp;amp;&amp;amp; is_string($dateUtil)){
        if(!is_int($sTime)){
            $sTime =  strtotime($sTime);
        }
        $field = $this-&amp;gt;getSortId($dateUtil,$sTime,$dateField,$dateFormat,&quot;sortId&quot;,$isTimestamp) .
            &quot;,min(date_format(&quot; .
                ($isTimestamp ? &quot;from_unixtime(&quot; . $dateField . &quot;)&quot; : $dateField).
            &quot;,&apos;&quot;.$this-&amp;gt;getGroupFormat($groupType).&quot;&apos;)) as mtime,&quot;.
            $opertion.&quot; as c&quot;;
    }else{
        $this-&amp;gt;error(&apos;你输入的日期单位或日期格式不正确&apos;);
        exit;
    }
    return $field;
}&lt;/pre&gt;
</code></pre><p>具体调用如下：</p>
<p><pre class="lang:php decode:true ">$field = $this-&gt;setIntervalTime($dateFormat,$dateUnit,$sTime,’createTime’,’count(*)’,$groupType);<br>$where[‘createTime’] = array(‘between’,array($sTime,$eTime));<br>$model-&gt;field($field)-&gt;where($where)-&gt;group(‘sortId’)-&gt;select();</pre><br>获取的数据到通过highcharts到前端显示如下</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161206-1.png" alt=""></p>
<p>&nbsp;</p>
<p>感谢同事鹏哥的帮助；大家有好的方法，求留言讨论；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求：由于查询日期范围内数据，需要定义日期范围内数据的单位，比如从2016年11月1日到2016年12月10日，间隔为5天，也就是11月1日，11月6日，11月11日。。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="Mysql" scheme="http://www.cenhq.com/categories/Dev/Mysql/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/Mysql/PHP/"/>
    
    
      <category term="mysql日期间隔查询" scheme="http://www.cenhq.com/tags/mysql%E6%97%A5%E6%9C%9F%E9%97%B4%E9%9A%94%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="todays" scheme="http://www.cenhq.com/tags/todays/"/>
    
      <category term="天数排序" scheme="http://www.cenhq.com/tags/%E5%A4%A9%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
      <category term="自定义时间间隔" scheme="http://www.cenhq.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/"/>
    
  </entry>
  
  <entry>
    <title>html-to-pdf-for-php</title>
    <link href="http://www.cenhq.com/2016/12/01/html-to-pdf-for-php/"/>
    <id>http://www.cenhq.com/2016/12/01/html-to-pdf-for-php/</id>
    <published>2016-12-01T18:54:34.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求：报表页面点击下载后转成pdf文件；</p>
<p>之前找了很多插件，用下来wkhtmltopdf最好用；</p>
<p>下面说下如何操作</p>
<p>首先下载插件，最好翻墙下载，不然很慢，最好下载tar.gz包，不要到github上clone,文件太大；</p>
<p><pre class="lang:sh decode:true"><a href="http://wkhtmltopdf.org/downloads.html" target="_blank" rel="external">http://wkhtmltopdf.org/downloads.html</a></pre><br><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161201-0.png" alt=""><br><a id="more"></a><br>拷贝文件到命令目录</p>
<p><pre class="lang:sh decode:true ">tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz<br>cd wkhtmltox/bin<br>cp wkhtmltopdf /usr/local/bin/<br></pre><br>html页面</p>
<p><pre class="lang:xhtml decode:true ">&lt;button class=”btn-success btn button” style=”margin-left: 85%” onclick=”print_pdf()”&gt;下载PDF&lt;/button&gt;<br>&lt;form action=”&lt;?php echo U(‘Custorm/savePdf’) ?&gt;” method=”post” name=”hld_res” id=”hideform”&gt;<br>  &lt;input type=”hidden” id=”hide_content” name=”content” /&gt;<br>  &lt;input type=”hidden” name=”title” value=”&lt;?php echo $data[0][‘title’]?&gt;”/&gt;<br>&lt;/form&gt;</pre><br>JS方法</p>
<p><pre class="lang:sh decode:true ">function print_pdf(){<br>            //下载范围<br>            bdhtml=window.document.body.innerHTML;<br>            sprnstr=”&lt;!–startprint–&gt;”;<br>            eprnstr=”&lt;!–endprint–&gt;”;<br>            prnhtml=bdhtml.substring(bdhtml.indexOf(sprnstr)+17);<br>            prnhtml=prnhtml.substring(0,prnhtml.indexOf(eprnstr));<br>//            将获取的html代码添加到隐藏域中传给php文件处理<br>            $(“#hide_content”).val(“”+prnhtml+””);<br>            $(“#hideform”).submit();<br>        }</pre><br>PHP方法</p>
<p><pre class="lang:php decode:true">public function savePdf()<br>    {<br>        $html = $_REQUEST[‘content’];<br>        ob_start();<br>        $html=’<br>        &lt;html&gt;<br>        &lt;link href=”<a href="http://your_domain_name/Public/css/style.css" target="_blank" rel="external">http://your_domain_name/Public/css/style.css</a>“ rel=”stylesheet”&gt;<br>        &lt;link href=”<a href="http://your_domain_name/Public/css/style-responsive.css" target="_blank" rel="external">http://your_domain_name/Public/css/style-responsive.css</a>“ rel=”stylesheet”&gt;<br>        &lt;link type=”text/css” rel=”stylesheet” href=”<a href="http://your_domain_name/Public/js/bootstrap-table/bootstrap-table.css&quot;&amp;gt" target="_blank" rel="external">http://your_domain_name/Public/js/bootstrap-table/bootstrap-table.css&quot;&amp;gt</a>;<br>        &lt;meta http-equiv=”Content-Type” content=”text/html; charset=utf-8” /&gt;<br>        &lt;body style=”background: white;”&gt; ‘.$html;<br>        $html .= ‘ &lt;/body&gt;&lt;/html&gt;’;<br>        $filename = $_REQUEST[‘title’] ? $_REQUEST[‘title’] : ‘报表-‘.date(‘Y-m-d’);<br>        file_put_contents(“{$filename}.html”, $html);<br>        ob_end_clean();<br>        //转换HTML TO PDF<br>        sh_exec(“/usr/local/bin/wkhtmltopdf -q -s A2 -O Landscape {$filename}.html {$filename}.pdf”);<br>        if(file_exists(“{$filename}.pdf”)){<br>            header(‘Content-type:application/octet-stream’);<br>            header(“Content-Disposition:attachment;filename={$filename}.pdf”);<br>            header(‘Content-Length:’.filesize(“{$filename}.pdf”));<br>            readfile(“{$filename}.pdf”);<br>            //删除本地的文件<br>            unlink(“{$filename}.pdf”);<br>            unlink(“{$filename}.html”);<br>        }else{<br>            exit;<br>        }<br>    }</pre><br>pdf文档效果</p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161201-1.png" alt=""></p>
<p>效果还是不错的；</p>
<p>这里遇到一个问题，就是线上的sh_exec()函数不执行。改目录权限，改sudo配置等等，都没效果，然后去配置文件里查看php.ini, 里面添加了disable_functions，去掉你要用的函数就可以了。</p>
<p>参考：<a href="http://blog.csdn.net/qq_14873105/article/details/51394026" target="_blank" rel="external">http://blog.csdn.net/qq_14873105/article/details/51394026</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求：报表页面点击下载后转成pdf文件；&lt;/p&gt;
&lt;p&gt;之前找了很多插件，用下来wkhtmltopdf最好用；&lt;/p&gt;
&lt;p&gt;下面说下如何操作&lt;/p&gt;
&lt;p&gt;首先下载插件，最好翻墙下载，不然很慢，最好下载tar.gz包，不要到github上clone,文件太大；&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:sh decode:true&quot;&gt;&lt;a href=&quot;http://wkhtmltopdf.org/downloads.html&quot;&gt;http://wkhtmltopdf.org/downloads.html&lt;/a&gt;&lt;/pre&gt;&lt;br&gt;&lt;img src=&quot;http://blog.cenhq.com/wp-content/uploads/2016/12/QQ20161201-0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="JavaScript" scheme="http://www.cenhq.com/categories/Dev/JavaScript/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/JavaScript/PHP/"/>
    
    
      <category term="highcharts to pdf" scheme="http://www.cenhq.com/tags/highcharts-to-pdf/"/>
    
      <category term="html to pdf" scheme="http://www.cenhq.com/tags/html-to-pdf/"/>
    
      <category term="sh_exec()" scheme="http://www.cenhq.com/tags/sh-exec/"/>
    
      <category term="wkhtmltopdf" scheme="http://www.cenhq.com/tags/wkhtmltopdf/"/>
    
      <category term="页面生成pdf" scheme="http://www.cenhq.com/tags/%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90pdf/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp修改mongo数据</title>
    <link href="http://www.cenhq.com/2016/11/29/thinkphp-update-mongo-data/"/>
    <id>http://www.cenhq.com/2016/11/29/thinkphp-update-mongo-data/</id>
    <published>2016-11-29T16:34:56.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于需要修改mongo库的<code>status</code>的值，首先要找到这条记录的id；</p>
<p>我这里的id在mysql库里有记录，每条记录里有<code>key_time</code>字段，所以需要获取这个字段的值；</p>
<p>获取该字段的值需要从url里获取，通过ajax方式传递到后台来处理；<br><a id="more"></a></p>
<p><pre class="lang:js decode:true ">function commit(){<br>        var url = self.location.href;<br>        var title = $(‘h2’).html().split(‘_’);<br>        $.ajax({<br>            type: ‘POST’,<br>            url: ‘&lt;?php echo U(“ReportBrowse/info”)?&gt;’,<br>            data : {url:url,title:title[0]},<br>            success: function (data) {<br>//                console.log(data);<br>            },<br>            error: function (e) {</pre></p>
<pre><code>    }
});
</code></pre><p>}<br>后台会处理url，截取<code>key_time</code>的值</p>
<p><pre class="lang:php decode:true">public function info()<br>{<br>        //截取url字符串<br>        $url = $_REQUEST[‘url’];<br>        if ($url) {<br>            $action = explode(‘&amp;’,$url);<br>            $params = array();<br>            foreach ($action as $param) {<br>                $item = explode(‘=’, $param);<br>                $params[$item[0]] = $item[1];<br>            }</pre></p>
<pre><code>//根据预览页面的url中的key参数,从数据库yulan数据库中获取mongoId,然后到mongo库的template表中查找,修改status状态
$this-&amp;gt;editMongoId($params[$item[0]]);
</code></pre><p>}<br>这里调用了另外一个方法，这个方法就是查找mongoid, 然后根据mongoid修改<code>status</code>的值</p>
<p><pre class="lang:php decode:true ">private function editMongoId($key_time)<br>{<br>        //实例化mysql库的yulan表,根据传递的key_time查找mongoid<br>        $yulan_mysql = new Model(‘yulan’,’’,’DB_MYSQL_KW’);<br>        //实例化mongo库的template表,根据mongoid查找status状态<br>        $temp_mongo = new MongoModel(‘template’,’’,’DB_MONGO’);<br>        if($key_time){<br>            //获取预览数据里的mongoid<br>            $where[‘key_time’] = array(‘eq’,$key_time);<br>            $yulan_data = $yulan_mysql-&gt;field(‘mongoId’)-&gt;where($where)-&gt;select();<br>            if($mid = $yulan_data[0][‘mongoid’]){<br>                //根据mongoid获取模板mongo里的所有数据<br>                $status = $temp_mongo-&gt;where(array(<br>                    ‘_id’   =&gt;  $mid,<br>                ))-&gt;select();<br>                //如果状态为”草稿”,则修改mongo库的template的状态<br>                if($status[$mid][‘status’] == ‘草稿’){<br>                    $data[‘status’] = ‘已发布’;<br>                    $temp_mongo-&gt;where(array(<br>                        ‘_id’   =&gt;  $mid,<br>                    ))-&gt;save($data);<br>                }<br>            }<br>        }<br>}</pre><br>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于需要修改mongo库的&lt;code&gt;status&lt;/code&gt;的值，首先要找到这条记录的id；&lt;/p&gt;
&lt;p&gt;我这里的id在mysql库里有记录，每条记录里有&lt;code&gt;key_time&lt;/code&gt;字段，所以需要获取这个字段的值；&lt;/p&gt;
&lt;p&gt;获取该字段的值需要从url里获取，通过ajax方式传递到后台来处理；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="JavaScript" scheme="http://www.cenhq.com/categories/Dev/JavaScript/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/JavaScript/PHP/"/>
    
    
      <category term="mongo" scheme="http://www.cenhq.com/tags/mongo/"/>
    
      <category term="update_mongo" scheme="http://www.cenhq.com/tags/update-mongo/"/>
    
  </entry>
  
  <entry>
    <title>php多维数组整理</title>
    <link href="http://www.cenhq.com/2016/11/29/php-array-add-value/"/>
    <id>http://www.cenhq.com/2016/11/29/php-array-add-value/</id>
    <published>2016-11-29T16:15:08.000Z</published>
    <updated>2017-03-28T10:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取的数据需要到highcharts中显示，所以格式如下，但是在显示的时候，会有时间不存在，导致在一起显示的无法正常显示。所以需要整理数组是同样长度，并且在无时间的值为0；<br><a id="more"></a></p>
<p><pre class="lang:php decode:true ">array (size=3)<br>  0 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=16)<br>          0 =&gt; string ‘16-09-02’ (length=8)<br>          1 =&gt; string ‘16-09-03’ (length=8)<br>          2 =&gt; string ‘16-09-04’ (length=8)<br>          3 =&gt; string ‘16-09-05’ (length=8)<br>          4 =&gt; string ‘16-09-06’ (length=8)<br>          5 =&gt; string ‘16-09-07’ (length=8)<br>          6 =&gt; string ‘16-09-08’ (length=8)<br>          7 =&gt; string ‘16-09-09’ (length=8)<br>          8 =&gt; string ‘16-09-10’ (length=8)<br>          9 =&gt; string ‘16-09-11’ (length=8)<br>          10 =&gt; string ‘16-09-12’ (length=8)<br>          11 =&gt; string ‘16-09-13’ (length=8)<br>          12 =&gt; string ‘16-09-14’ (length=8)<br>          13 =&gt; string ‘16-09-15’ (length=8)<br>          14 =&gt; string ‘16-09-16’ (length=8)<br>          15 =&gt; string ‘16-09-17’ (length=8)<br>      ‘板块回复帖总数’ =&gt;<br>        array (size=16)<br>          0 =&gt; int 98<br>          1 =&gt; int 207<br>          2 =&gt; int 188<br>          3 =&gt; int 125<br>          4 =&gt; int 196<br>          5 =&gt; int 153<br>          6 =&gt; int 228<br>          7 =&gt; int 289<br>          8 =&gt; int 254<br>          9 =&gt; int 245<br>          10 =&gt; int 220<br>          11 =&gt; int 326<br>          12 =&gt; int 286<br>          13 =&gt; int 497<br>          14 =&gt; int 419<br>          15 =&gt; int 243<br>  1 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=13)<br>          0 =&gt; string ‘16-09-03’ (length=8)<br>          1 =&gt; string ‘16-09-05’ (length=8)<br>          2 =&gt; string ‘16-09-06’ (length=8)<br>          3 =&gt; string ‘16-09-07’ (length=8)<br>          4 =&gt; string ‘16-09-08’ (length=8)<br>          5 =&gt; string ‘16-09-09’ (length=8)<br>          6 =&gt; string ‘16-09-11’ (length=8)<br>          7 =&gt; string ‘16-09-12’ (length=8)<br>          8 =&gt; string ‘16-09-13’ (length=8)<br>          9 =&gt; string ‘16-09-14’ (length=8)<br>          10 =&gt; string ‘16-09-15’ (length=8)<br>          11 =&gt; string ‘16-09-16’ (length=8)<br>          12 =&gt; string ‘16-09-17’ (length=8)<br>      ‘版主回复帖数’ =&gt;<br>        array (size=13)<br>          0 =&gt; int 1<br>          1 =&gt; int 4<br>          2 =&gt; int 2<br>          3 =&gt; int 3<br>          4 =&gt; int 3<br>          5 =&gt; int 2<br>          6 =&gt; int 1<br>          7 =&gt; int 4<br>          8 =&gt; int 8<br>          9 =&gt; int 5<br>          10 =&gt; int 2<br>          11 =&gt; int 3<br>          12 =&gt; int 1<br>  2 =&gt;<br>    array (size=2)<br>      ‘day’ =&gt;<br>        array (size=16)<br>          0 =&gt; string ‘16-09-02’ (length=8)<br>          1 =&gt; string ‘16-09-03’ (length=8)<br>          2 =&gt; string ‘16-09-04’ (length=8)<br>          3 =&gt; string ‘16-09-05’ (length=8)<br>          4 =&gt; string ‘16-09-06’ (length=8)<br>          5 =&gt; string ‘16-09-07’ (length=8)<br>          6 =&gt; string ‘16-09-08’ (length=8)<br>          7 =&gt; string ‘16-09-09’ (length=8)<br>          8 =&gt; string ‘16-09-10’ (length=8)<br>          9 =&gt; string ‘16-09-11’ (length=8)<br>          10 =&gt; string ‘16-09-12’ (length=8)<br>          11 =&gt; string ‘16-09-13’ (length=8)<br>          12 =&gt; string ‘16-09-14’ (length=8)<br>          13 =&gt; string ‘16-09-15’ (length=8)<br>          14 =&gt; string ‘16-09-16’ (length=8)<br>          15 =&gt; string ‘16-09-17’ (length=8)<br>      ‘板块主题帖总数’ =&gt;<br>        array (size=16)<br>          0 =&gt; int 10<br>          1 =&gt; int 39<br>          2 =&gt; int 56<br>          3 =&gt; int 21<br>          4 =&gt; int 31<br>          5 =&gt; int 27<br>          6 =&gt; int 42<br>          7 =&gt; int 59<br>          8 =&gt; int 46<br>          9 =&gt; int 33<br>          10 =&gt; int 45<br>          11 =&gt; int 47<br>          12 =&gt; int 64<br>          13 =&gt; int 76<br>          14 =&gt; int 67<br>          15 =&gt; int 36</pre><br>这里写个私有方法，方便内部调用</p>
<p><pre class="lang:php decode:true ">private function getDateLength($arr)<br>    {<br>        //数组映射<br>        $new_arr = [];<br>        foreach($arr as $k=&gt;$v){<br>            foreach($v as $k1=&gt;$v1){<br>                if($k1 != ‘day’){<br>                    foreach($v[‘day’] as $k2=&gt;$v2){<br>                        $new_arr[$k][$v2] = $v1[$k2];<br>                    }<br>                }<br>            }<br>        }<br>        //数组补值<br>        $data = [];<br>        $max = max($new_arr);<br>        foreach($new_arr as $k=&gt;$v){<br>            foreach($max as $k1=&gt;$v1){<br>                if(in_array($k1,array_keys($v))){<br>                    $data[$k][$k1] = $v[$k1];<br>                }else{<br>                    $data[$k][$k1] = 0;<br>                }<br>            }<br>        }<br>        //转化成原型<br>        $array = [];<br>        foreach($arr as $k=&gt;$v){<br>            foreach($v as $k1=&gt;$v1){<br>                if($k1 != ‘day’){<br>                    $array[$k][$k1] = array_values($data[$k]);<br>                }else{<br>                    $array[$k][$k1] = array_keys($data[$k]);<br>                }<br>            }<br>        }<br>        return $array;<br>    }</pre><br>显示效果如下：<a href="http://blog.cenhq.com/wp-content/uploads/2016/11/2A8ADEDB-B2D0-483A-B014-09283F8B760A.jpg" target="_blank" rel="external">
</a></p>
<p><img src="http://blog.cenhq.com/wp-content/uploads/2016/11/2A8ADEDB-B2D0-483A-B014-09283F8B760A.jpg" alt=""></p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取的数据需要到highcharts中显示，所以格式如下，但是在显示的时候，会有时间不存在，导致在一起显示的无法正常显示。所以需要整理数组是同样长度，并且在无时间的值为0；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://www.cenhq.com/categories/Dev/"/>
    
      <category term="PHP" scheme="http://www.cenhq.com/categories/Dev/PHP/"/>
    
    
      <category term="highcharts" scheme="http://www.cenhq.com/tags/highcharts/"/>
    
      <category term="php" scheme="http://www.cenhq.com/tags/php/"/>
    
  </entry>
  
</feed>
